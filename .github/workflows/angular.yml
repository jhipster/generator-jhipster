#
# Copyright the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Angular
concurrency:
  # Group PRs by head_ref, push to main branch by commit id, and others branch by ref.
  group: ${{ github.workflow }}-${{ github.head_ref || (github.ref == 'refs/heads/main' && github.sha) || github.ref }}
  cancel-in-progress: true
on:
  push:
    branches:
      - 'main'
      - '**maintenance'
    paths-ignore:
      - 'package*.json'
      - 'generators/react/**'
      - 'generators/vue/**'
  pull_request:
    types: [closed, opened, synchronize, reopened]
    branches:
      - '*'
jobs:
  build-matrix:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
      client: ${{ steps.build.outputs.client }}
      server: ${{ steps.build.outputs.server }}
      any: ${{ steps.build.outputs.any }}
      workflow-angular: ${{ steps.build.outputs.workflow-angular }}
      workflow-react: ${{ steps.build.outputs.workflow-react }}
      workflow-vue: ${{ steps.build.outputs.workflow-vue }}
    steps:
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: 'Build matrix'
        id: build
        uses: ./.github/actions/build-matrix
        with:
          workflow-samples-file: angular

  applications:
    name: ${{ matrix.name }} (n${{ matrix.node }}/j${{ matrix.java }})
    runs-on: ${{ matrix.os || 'ubuntu-20.04' }}
    needs: build-matrix
    defaults:
      run:
        working-directory: ${{ github.workspace }}/app
    if: >-
      !contains(github.event.head_commit.message, '[react]') &&
      !contains(github.event.head_commit.message, '[vue]') &&
      !contains(github.event.pull_request.title, '[react]') &&
      !contains(github.event.pull_request.title, '[vue]') &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[ci skip]') &&
      github.event.action != 'closed' &&
      !contains(github.event.pull_request.labels.*.name, 'pr: skip-ci') &&
      needs.build-matrix.outputs.workflow-angular == 'true'
    timeout-minutes: 50
    strategy:
      fail-fast: false
      # Matrix available at https://github.com/jhipster/generator-jhipster/tree/main/test-integration/workflow-samples/
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
    steps:
      #----------------------------------------------------------------------
      # Install all tools and check configuration
      #----------------------------------------------------------------------
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v4
        with:
          path: generator-jhipster
          fetch-depth: 2
      - uses: jhipster/actions/setup-runner@v0
        with:
          node-version: ${{ matrix.node }}
          java-version: ${{ matrix.java }}
          npm-version: ${{ matrix.npm-version }}
          maven-cache: true
          gradle-cache: ${{ matrix.gradle-cache }}
          binary-dir: ${{ github.workspace }}/generator-jhipster/bin
      #----------------------------------------------------------------------
      # Install JHipster and generate project+entities
      #----------------------------------------------------------------------
      - run: npm ci --ignore-scripts
        working-directory: ${{ github.workspace }}/generator-jhipster
      - name: 'GENERATION: project'
        run: jhipster.cjs generate-sample ${{ matrix.name }} --skip-jhipster-dependencies --skip-checks --skip-install --no-insight
        env:
          JHI_FOLDER_APP: ${{ github.workspace }}/app
          JHIPSTER_DEPENDENCIES_VERSION: ${{ matrix.jhipster-bom-cicd-version }}
      - run: jhipster.cjs info
      #----------------------------------------------------------------------
      # Detect changes against base commit
      #----------------------------------------------------------------------
      - uses: jhipster/actions/compare-sample@v0
        id: compare
        if: >-
          github.event.pull_request &&
          !contains(github.event.pull_request.labels.*.name, 'pr: disable-compare')
        with:
          generator-path: generator-jhipster
          cmd: jhipster.cjs generate-sample ${{ matrix.name }} --skip-jhipster-dependencies --skip-checks --skip-install --no-insight
        env:
          # generate-sample uses JHI_FOLDER_APP to generate the application.
          JHI_FOLDER_APP: ${{ github.workspace }}/base/app
          JHIPSTER_DEPENDENCIES_VERSION: ${{ matrix.jhipster-bom-cicd-version }}
      #----------------------------------------------------------------------
      # Launch tests
      #----------------------------------------------------------------------
      - uses: jhipster/actions/build-jhipster-bom@v0
        if: matrix.build-jhipster-bom && steps.compare.outputs.equals != 'true'
        with:
          jhipster-bom-ref: ${{ matrix.jhipster-bom-branch }}
      - name: 'TESTS: backend'
        id: backend
        if: steps.compare.outputs.equals != 'true' && matrix.skip-backend-tests != 'true' && needs.build-matrix.outputs.server != 'false'
        run: npm run ci:backend:test
        continue-on-error: ${{matrix.continue-on-backend-tests-error || false}}
        timeout-minutes: 15
      - name: 'PREPARE: npm install'
        if: steps.compare.outputs.equals != 'true' && matrix.skip-frontend-tests != 'true' && needs.build-matrix.outputs.client != 'false'
        run: ${{ (matrix.workspaces == 'true' && 'npm') || './npmw' }} install
        timeout-minutes: 7
      - name: 'TESTS: frontend'
        if: steps.compare.outputs.equals != 'true' && matrix.skip-frontend-tests != 'true' && needs.build-matrix.outputs.client != 'false'
        run: npm run ci:frontend:test
        timeout-minutes: 15
      - name: 'TESTS: packaging'
        if: steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:package
        timeout-minutes: 12
      - name: 'TESTS: Start docker compose containers for e2e tests'
        if: steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:prepare
        timeout-minutes: 5
      - name: 'E2E: Run'
        id: e2e
        if: steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:run --if-present
        timeout-minutes: 15
      - name: 'BACKEND: Store failure logs'
        uses: actions/upload-artifact@v4
        if: always() && steps.backend.outcome == 'failure'
        with:
          name: log-${{ matrix.name }}
          path: ${{ github.workspace }}/app/**/test-results/**/*.xml
      - name: 'E2E: Store failure screenshots'
        uses: actions/upload-artifact@v4
        if: always() && steps.e2e.outcome == 'failure'
        with:
          name: screenshots-${{ matrix.name }}
          path: ${{ github.workspace }}/app/**/cypress/screenshots
      - name: Dump docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2
      - name: 'ANALYSIS: Sonar analysis'
        if: >-
          github.event_name == 'push' &&
          matrix.sonar-analyse == 'true' &&
          steps.compare.outputs.equals != 'true' &&
          matrix.workspaces != 'true' &&
          matrix.skip-frontend-tests != 'true' &&
          needs.build-matrix.outputs.client != 'false' &&
          matrix.skip-backend-tests != 'true' &&
          needs.build-matrix.outputs.server != 'false'
        run: |
          ./mvnw -ntp --batch-mode initialize org.jacoco:jacoco-maven-plugin:prepare-agent sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.projectKey=sultanov-jhipster-sample-application \
            -Dsonar.organization=jhipster \
            -Dsonar.login=$SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      # New steps to cache, load, and analyze with local SonarQube in Docker
      - name: 'CACHE: Store Maven/JUnit results (main)'
        if: github.ref == 'refs/heads/main'
        uses: actions/cache@v4
        with:
          path: |
            **/target
            **/.sonar
            **/jacoco
          key: cache-maven-junit-main-${{ github.sha }}
          restore-keys: |

      # Install jq if not available
      - name: 'Install jq'
        if: github.event_name == 'pull_request'
        run: sudo apt-get install -y jq

      # Start SonarQube locally only for PRs
      - name: 'SETUP: Start SonarQube'
        if: github.event_name == 'pull_request'
        run: |
          docker run -d --name sonar-server -p 9000:9000 sonarqube:latest
          until curl -s http://localhost:9000/api/system/status | grep -q '"status":"UP"'; do
            echo "Waiting for SonarQube to start..."
            sleep 5
          done
            cache-maven-junit-main-

      - name: 'CACHE: Load Maven/JUnit results (PR)'
        if: github.event_name == 'pull_request'
        uses: actions/cache@v4
        with:
          path: |
            **/target
            **/.sonar
            **/jacoco
          key: cache-maven-junit-main-${{ github.event.pull_request.base.sha }}
          restore-keys: |
            cache-maven-junit-main-

      - name: 'ANALYSIS: Run SonarQube on previous results'
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm -e SONAR_HOST_URL=http://localhost:9000 -e SONAR_LOGIN=admin -e SONAR_PASSWORD=admin \
          -v ${{ github.workspace }}/app:/usr/src \
          sonarqube sonar-scanner \
          -Dsonar.projectKey=sultanov-jhipster-sample-application \
          -Dsonar.sources=src \
          -Dsonar.tests=src/test \
          -Dsonar.java.binaries=target \
          -Dsonar.junit.reportPaths=target/test-results/test \
          -Dsonar.jacoco.reportPaths=target/jacoco.exec \
          -Dsonar.report.export.path=issues_report-main.json

      - name: 'ANALYSIS: Run SonarQube on new code'
        if: github.event_name == 'pull_request'
        run: |
          docker run --rm -e SONAR_HOST_URL=http://localhost:9000 -e SONAR_LOGIN=admin -e SONAR_PASSWORD=admin \
          -v ${{ github.workspace }}/app:/usr/src \
          sonarqube sonar-scanner \
          -Dsonar.projectKey=sultanov-jhipster-sample-application-pr \
          -Dsonar.sources=src \
          -Dsonar.tests=src/test \
          -Dsonar.java.binaries=target \
          -Dsonar.junit.reportPaths=target/test-results/test \
          -Dsonar.jacoco.reportPaths=target/jacoco.exec \
          -Dsonar.report.export.path=issues_report-pr.json

      - name: 'ANALYSIS: Compare SonarQube results'
        id: compare-sonar
        if: github.event_name == 'pull_request' && steps.compare.outputs.equals != 'true'
        run: |
          jq '.[].issues[] | select(.status != "RESOLVED") | .message' issues_report-pr.json > pr_issues.txt
          jq '.[].issues[] | select(.status != "RESOLVED") | .message' issues_report-main.json > main_issues.txt

          # Compare the issues in the PR with the issues in the main branch
          new_issues=$(grep -Fxvf main_issues.txt pr_issues.txt || true)
          fixed_issues=$(grep -Fxvf pr_issues.txt main_issues.txt || true)

          if [ -n "$fixed_issues" ]; then
            echo "Fixed issues:"
            echo "$fixed_issues"
          fi

          if [ -n "$new_issues" ]; then
            echo "New issues introduced:"
            echo "$new_issues"
            echo "## New SonarQube Issues" > sonar-result.md
            echo "$new_issues" | sed 's/^/- /' >> sonar-result.md
            exit 1
          else
            echo "No new issues introduced."
            echo "## SonarQube Analysis" > sonar-result.md
            echo "No new issues introduced." >> sonar-result.md
          fi

      # Post the SonarQube results as a comment in the PR
      - name: 'Find previous SonarQube comment'
        if: github.event_name == 'pull_request'
        id: find-comment
        uses: peter-evans/find-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body-includes: '## SonarQube Analysis'

      - name: 'Create or update SonarQube comment'
        if: github.event_name == 'pull_request'
        uses: peter-evans/create-or-update-comment@v4
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            $(cat sonar-result.md)
          comment-id: ${{ steps.find-comment.outputs.comment-id }}

      # Stop SonarQube server only if started
      - name: 'STOP: Stop SonarQube'
        if: github.event_name == 'pull_request' && always()
        run: |
          docker stop sonar-server
          docker rm sonar-server

  check-angular:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: [applications]
    if: always()
    steps:
      - run: |
          echo '${{ toJSON(needs) }}'
          if [ 'skipped' == '${{ needs.applications.result }}' ] || [ 'success' == '${{ needs.applications.result }}' ] || [ 'closed' == '${{ github.event.action }}' ]; then
            exit 0
          fi
          exit 1

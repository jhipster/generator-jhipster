#
# Copyright the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Angular
concurrency:
  # Group PRs by head_ref, push to main branch by commit id, and others branch by ref.
  group: ${{ github.workflow }}-${{ github.head_ref || (github.ref == 'refs/heads/main' && github.sha) || github.ref }}
  cancel-in-progress: true
on:
  push:
    branches:
      - 'main'
      - '**maintenance'
    paths-ignore:
      - 'package*.json'
      - 'generators/react/**'
      - 'generators/vue/**'
  pull_request:
    types: [closed, opened, synchronize, reopened]
    branches:
      - '*'
jobs:
  build-matrix:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
      client: ${{ steps.build.outputs.client }}
      server: ${{ steps.build.outputs.server }}
      any: ${{ steps.build.outputs.any }}
      workflow-angular: ${{ steps.build.outputs.workflow-angular }}
      workflow-react: ${{ steps.build.outputs.workflow-react }}
      workflow-vue: ${{ steps.build.outputs.workflow-vue }}
    steps:
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - name: 'Build matrix'
        id: build
        uses: ./.github/actions/build-matrix
        with:
          workflow-samples-file: angular
  applications:
    name: ${{ matrix.name }} (n${{ matrix.node }}/j${{ matrix.java }})
    runs-on: ${{ matrix.os || 'ubuntu-20.04' }}
    needs: build-matrix
    defaults:
      run:
        working-directory: ${{ github.workspace }}/app
    if: >-
      !contains(github.event.head_commit.message, '[react]') &&
      !contains(github.event.head_commit.message, '[vue]') &&
      !contains(github.event.pull_request.title, '[react]') &&
      !contains(github.event.pull_request.title, '[vue]') &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[ci skip]') &&
      github.event.action != 'closed' &&
      !contains(github.event.pull_request.labels.*.name, 'pr: skip-ci') &&
      needs.build-matrix.outputs.workflow-angular == 'true'
    timeout-minutes: 50
    strategy:
      fail-fast: false
      # Matrix available at https://github.com/jhipster/generator-jhipster/tree/main/test-integration/workflow-samples/
      matrix: ${{fromJson(needs.build-matrix.outputs.matrix)}}
    steps:
      #----------------------------------------------------------------------
      # Install all tools and check configuration
      #----------------------------------------------------------------------
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v4
        with:
          path: generator-jhipster
          fetch-depth: 2
      - name: 'SETUP: environment'
        id: setup
        uses: ./generator-jhipster/.github/actions/setup
        with:
          application-sample: ${{ matrix.setup-application-sample }}
          entities-sample: ${{ matrix.setup-entities-sample }}
          jdl-entities-sample: ${{ matrix.setup-jdl-entities-sample }}
          jdl-sample: ${{ matrix.setup-jdl-sample }}
          application-environment: ${{ matrix.setup-application-environment }}
          application-packaging: ${{ matrix.setup-application-packaging }}
      - uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
      - uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ matrix.java }}
      - uses: jhipster/actions/restore-cache@v0
        with:
          npm: true
          maven: true
          gradle: ${{ matrix.workspaces == 'true' || matrix.gradle == 1 || contains(matrix.name, 'gradle') }}
      - uses: jhipster/actions/setup-keycloak-hostname@v0
      - uses: jhipster/actions/setup-git@v0
      # Update global NPM for workspaces support
      - name: 'Install required NPM version'
        if: matrix.workspaces == 'true'
        run: npm install -g npm@${{ matrix.npm }} || true
      #----------------------------------------------------------------------
      # Install JHipster and generate project+entities
      #----------------------------------------------------------------------
      - name: 'GENERATION: install JHipster'
        run: $JHI_SCRIPTS/10-install-jhipster.sh
      - name: 'GENERATION: project'
        run: jhipster generate-sample ${{ matrix.name }} --skip-jhipster-dependencies --skip-checks --skip-install --no-insight
      - name: 'GENERATION: workspace git'
        if: matrix.workspaces == 'true'
        run: |
          git add .
          git commit --allow-empty -m "Commit workspaces"
      - run: jhipster info
      #----------------------------------------------------------------------
      # Detect changes against base commit
      #----------------------------------------------------------------------
      - uses: jhipster/actions/compare-sample@v0
        id: compare
        with:
          generator-path: generator-jhipster
          cmd: ${{ github.workspace }}/generator-jhipster/bin/jhipster.cjs generate-sample ${{ matrix.name }} --skip-jhipster-dependencies --skip-checks --skip-install --no-insight
        env:
          # generate-sample uses JHI_FOLDER_APP to generate the application.
          JHI_FOLDER_APP: ${{ github.workspace }}/base/app
      #----------------------------------------------------------------------
      # Launch tests
      #----------------------------------------------------------------------
      - name: 'TESTS: backend'
        id: backend
        if: steps.compare.outputs.equals != 'true' && matrix.skip-backend-tests != 'true' && needs.build-matrix.outputs.server != 'false'
        run: npm run ci:backend:test
        continue-on-error: ${{matrix.continue-on-backend-tests-error || false}}
        timeout-minutes: 15
      - name: 'PREPARE: npm install'
        if: steps.compare.outputs.equals != 'true' && matrix.skip-frontend-tests != 'true' && needs.build-matrix.outputs.client != 'false'
        run: ${{ (matrix.workspaces == 'true' && 'npm') || './npmw' }} install
        timeout-minutes: 7
      - name: 'TESTS: frontend'
        if: steps.compare.outputs.equals != 'true' && matrix.skip-frontend-tests != 'true' && needs.build-matrix.outputs.client != 'false'
        run: npm run ci:frontend:test
        timeout-minutes: 15
      - name: 'TESTS: packaging'
        if: steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:package
        timeout-minutes: 12
      - name: 'TESTS: Start docker compose containers for e2e tests'
        if: steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:prepare
        timeout-minutes: 5
      - name: 'E2E: Run'
        id: e2e
        if: steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:run --if-present
        timeout-minutes: 15
      - name: 'BACKEND: Store failure logs'
        uses: actions/upload-artifact@v4
        if: always() && steps.backend.outcome == 'failure'
        with:
          name: log-${{ matrix.name }}
          path: ${{ github.workspace }}/app/**/test-results/**/*.xml
      - name: 'E2E: Store failure screenshots'
        uses: actions/upload-artifact@v4
        if: always() && steps.e2e.outcome == 'failure'
        with:
          name: screenshots-${{ matrix.name }}
          path: ${{ github.workspace }}/app/**/cypress/screenshots
      - name: Dump docker logs
        if: always()
        uses: jwalton/gh-docker-logs@v2
      - name: 'ANALYSIS: Sonar analysis'
        if: >-
          github.event_name == 'push' &&
          github.repository == 'jhipster/generator-jhipster' &&
          matrix.sonar-analyse == 'true' &&
          steps.compare.outputs.equals != 'true' &&
          matrix.workspaces != 'true' &&
          matrix.skip-frontend-tests != 'true' &&
          needs.build-matrix.outputs.client != 'false' &&
          matrix.skip-backend-tests != 'true' &&
          needs.build-matrix.outputs.server != 'false'
        run: |
          ./mvnw -ntp --batch-mode initialize org.jacoco:jacoco-maven-plugin:prepare-agent sonar:sonar \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.projectKey=jhipster-sample-application \
            -Dsonar.organization=jhipster \
            -Dsonar.login=$SONAR_TOKEN
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  check-angular:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: [applications]
    if: always()
    steps:
      - run: |
          echo '${{ toJSON(needs) }}'
          if [ 'skipped' == '${{ needs.applications.result }}' ] || [ 'success' == '${{ needs.applications.result }}' ] || [ 'closed' == '${{ github.event.action }}' ]; then
            exit 0
          fi
          exit 1

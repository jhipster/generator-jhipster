#
# Copyright 2013-2021 the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Vue
concurrency:
  # Group PRs by head_ref, push to main branch by commit id, and others branch by ref.
  group: ${{ github.workflow }}-${{ github.head_ref || (github.ref == 'refs/heads/main' && github.sha) || github.ref }}
  cancel-in-progress: true
on:
  push:
    branches-ignore:
      - 'dependabot/**'
      - 'skip_ci*'
    paths-ignore:
      - 'package*.json'
      - 'generators/*client/templates/angular/**'
      - 'generators/*client/templates/react/**'
  pull_request:
    types: [closed, opened, synchronize, reopened]
    branches:
      - '*'
    paths-ignore:
      - 'package*.json'
      - 'generators/*client/templates/angular/**'
      - 'generators/*client/templates/react/**'
jobs:
  build-matrix:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
      client: ${{ steps.build.outputs.client }}
      server: ${{ steps.build.outputs.server }}
      any: ${{ steps.build.outputs.any }}
    steps:
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 2
      - name: 'Build matrix'
        id: build
        uses: ./.github/actions/build-matrix
  applications:
    name: ${{ matrix.app-sample }}
    runs-on: ${{ matrix.os }}
    needs: build-matrix
    defaults:
      run:
        working-directory: ${{ github.workspace }}/app
    if: >-
      !contains(github.event.head_commit.message, '[angular]') &&
      !contains(github.event.head_commit.message, '[react]') &&
      !contains(github.event.pull_request.title, '[angular]') &&
      !contains(github.event.pull_request.title, '[react]') &&
      !contains(github.event.head_commit.message, '[ci skip]') &&
      !contains(github.event.head_commit.message, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[skip ci]') &&
      !contains(github.event.pull_request.title, '[ci skip]') &&
      github.event.action != 'closed' &&
      !contains(github.event.pull_request.labels.*.name, 'pr: skip-ci') &&
      needs.build-matrix.outputs.any != 'false'
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04]
        cache: [vue]
        app-sample:
          - vue-default
          - vue-noi18n-ws-oauth2
          - vue-fulli18n-es
          - vue-gateway
          - vue-gradle-ws-session
          - vue-ws-theme
          - vue-oauth2
          - vue-mongodb-kafka-cucumber
          - vue-session-cassandra-fr
        include:
          - app-sample: vue-default
            entity: sqlfull
            environment: prod
            war: 0
            e2e: 1
          - app-sample: vue-noi18n-ws-oauth2
            entity: sqlfull
            environment: prod
            war: 0
            e2e: 1
          - app-sample: vue-fulli18n-es
            entity: sql
            environment: prod
            war: 0
            e2e: 1
          - app-sample: vue-gateway
            entity: sql
            environment: dev
            war: 0
            e2e: 1
          - app-sample: vue-gradle-ws-session
            entity: sql
            environment: dev
            war: 0
            e2e: 1
          - app-sample: vue-ws-theme
            entity: sql
            environment: dev
            war: 0
            e2e: 1
          - app-sample: vue-oauth2
            entity: sql
            environment: prod
            war: 0
            e2e: 1
          - app-sample: vue-mongodb-kafka-cucumber
            entity: mongodb
            environment: dev
            war: 0
            e2e: 1
          - app-sample: vue-session-cassandra-fr
            entity: cassandra
            environment: dev
            war: 0
            e2e: 1
            testcontainers: 1
    steps:
      #----------------------------------------------------------------------
      # Install all tools and check configuration
      #----------------------------------------------------------------------
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v2.4.0
        with:
          path: generator-jhipster
          fetch-depth: 2
      - name: 'SETUP: environment'
        id: setup
        uses: ./generator-jhipster/.github/actions/setup
        with:
          entities-sample: ${{ matrix.entity }}
          application-sample: ${{ matrix.app-sample }}
          application-environment: ${{ matrix.environment }}
          application-packaging: ${{ (matrix.war == 1 && 'war') || 'jar' }}
          enable-testcontainers: ${{ matrix.testcontainers == 1 }}
      - uses: actions/setup-node@v2.5.0
        with:
          node-version: ${{ steps.setup.outputs.node-version }}
      - uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: ${{ steps.setup.outputs.java-version }}
      - name: 'SETUP: load npm cache'
        uses: actions/cache@v2.1.7
        with:
          path: |
            ~/.npm
            ~/.cache/Cypress/
          key: ${{ runner.os }}-node-${{ steps.setup.outputs.date }}-${{ matrix.cache }}-${{ hashFiles('generator-jhipster/package-lock.json', 'generator-jhipster/**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ steps.setup.outputs.date }}-${{ matrix.cache }}-
            ${{ runner.os }}-node-${{ steps.setup.outputs.date }}-
            ${{ runner.os }}-node-${{ steps.setup.outputs.date }}
      - name: 'SETUP: load maven cache'
        uses: actions/cache@v2.1.7
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ steps.setup.outputs.date }}-${{ hashFiles('generator-jhipster/**/pom.xml.ejs') }}
          restore-keys: |
            ${{ runner.os }}-maven-${{ steps.setup.outputs.date }}-
            ${{ runner.os }}-maven-${{ steps.setup.outputs.date }}
      - name: 'SETUP: load gradle cache'
        if: contains(matrix.app-sample, 'gradle')
        uses: actions/cache@v2.1.7
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ steps.setup.outputs.date }}-${{ hashFiles('generator-jhipster/**/build.gradle.ejs') }}
          restore-keys: |
            ${{ runner.os }}-gradle-${{ steps.setup.outputs.date }}-
            ${{ runner.os }}-gradle-${{ steps.setup.outputs.date }}
      - name: 'TOOLS: configure tools installed by the system'
        run: $JHI_SCRIPTS/03-system.sh
      - name: 'TOOLS: configure git'
        run: $JHI_SCRIPTS/04-git-config.sh
      #----------------------------------------------------------------------
      # Install JHipster and generate project+entities
      #----------------------------------------------------------------------
      - name: 'GENERATION: install JHipster'
        run: $JHI_SCRIPTS/10-install-jhipster.sh
      - name: 'GENERATION: config'
        run: $JHI_SCRIPTS/11-generate-config.sh
      - name: 'GENERATION: project'
        run: $JHI_SCRIPTS/12-generate-project.sh --skip-jhipster-dependencies ${{ matrix.extra-args }} ${{ matrix.new-extra-args }}
      - name: 'GENERATION: jhipster info'
        run: $JHI_SCRIPTS/14-jhipster-info.sh
      #----------------------------------------------------------------------
      # Detect changes against base commit
      #----------------------------------------------------------------------
      - name: 'MERGE: generate base'
        continue-on-error: true
        id: base-app
        if: github.event.pull_request
        uses: ./generator-jhipster/.github/actions/compare-base
        with:
          extra-args: '--skip-jhipster-dependencies ${{ matrix.extra-args }}'
      - name: 'MERGE: compare changes'
        continue-on-error: true
        id: compare
        if: steps.base-app.outcome == 'success'
        uses: ./generator-jhipster/.github/actions/compare
        with:
          application-path: ${{ steps.base-app.outputs.application-path }}
      #----------------------------------------------------------------------
      # Launch tests
      #----------------------------------------------------------------------
      - name: 'TESTS: Start docker-compose containers for e2e and backend tests'
        if: steps.compare.outputs.equals != 'true' && matrix.testcontainers == 0
        run: npm run ci:e2e:prepare
      - name: 'TESTS: backend'
        id: backend
        if: steps.compare.outputs.equals != 'true' && matrix.skip-backend-tests != 1 && needs.build-matrix.outputs.server != 'false'
        run: npm run ci:backend:test
      - name: 'TESTS: frontend'
        if: steps.compare.outputs.equals != 'true' && needs.build-matrix.outputs.client != 'false'
        run: npm run ci:frontend:test
      - name: 'TESTS: packaging'
        if: steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:package
      - name: 'TESTS: Start docker-compose containers for e2e tests'
        if: steps.compare.outputs.equals != 'true' && matrix.testcontainers != 0
        run: npm run ci:e2e:prepare
      - name: 'E2E: Run'
        id: e2e
        if: steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:run --if-present
      - name: 'E2E: Teardown'
        if: always() && matrix.e2e == 1 && steps.compare.outputs.equals != 'true'
        run: npm run ci:e2e:teardown
      - name: 'BACKEND: Store failure logs'
        uses: actions/upload-artifact@v2
        if: always() && steps.backend.outcome == 'failure'
        with:
          name: log-${{ matrix.app-sample }}
          path: ${{ steps.setup.outputs.application-path }}/*/test-results/**/*.xml
      - name: 'E2E: Store failure screenshots'
        uses: actions/upload-artifact@v2
        if: always() && steps.e2e.outcome == 'failure'
        with:
          name: screenshots-${{ matrix.app-sample }}
          path: ${{ steps.setup.outputs.application-path }}/*/cypress/screenshots
      - name: 'ANALYSIS: Sonar analysis'
        if: steps.compare.outputs.equals != 'true' && matrix.sonar-analyse != 'false'
        run: $JHI_SCRIPTS/25-sonar-analyze.sh
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

#
# Copyright the original author or authors from the JHipster project.
#
# This file is part of the JHipster project, see https://www.jhipster.tech/
# for more information.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Dev Server
concurrency:
  # Group PRs by head_ref, push to main branch by commit id, and others branch by ref.
  group: ${{ github.workflow }}-${{ github.head_ref || (github.ref == 'refs/heads/main' && github.sha) || github.ref }}
  cancel-in-progress: true
env:
  NODE_OPTIONS: --dns-result-order=ipv4first
  FORCE_COLOR: 2
on:
  push:
    branches:
      - 'main'
      - '**maintenance'
    paths:
      - '.github/workflows/devserver.yml'
      - 'generators/angular/**'
      - 'generators/client/**'
      - 'generators/javascript/**'
      - 'generators/react/**'
      - 'generators/vue/**'
      - 'generators/*'
  pull_request:
    types: [closed, opened, synchronize, reopened]
    branches:
      - '*'
jobs:
  build-matrix:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.build.outputs.matrix }}
      empty-matrix: ${{ steps.build.outputs.empty-matrix }}
    steps:
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - run: npm ci --ignore-scripts
      - id: build
        run: bin/jhipster.cjs github-build-matrix devserver --event-name ${{ github.event_name }}
  applications:
    name: ${{ matrix.job-name }}
    needs: build-matrix
    runs-on: ${{ matrix.os }}
    defaults:
      run:
        working-directory: ${{ github.workspace }}/app
    timeout-minutes: 40
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.build-matrix.outputs.matrix) }}
    if: fromJson(needs.build-matrix.outputs.matrix).include[0] != null
    steps:
      #----------------------------------------------------------------------
      # Install all tools and check configuration
      #----------------------------------------------------------------------
      - name: 'SETUP: Checkout generator-jhipster'
        uses: actions/checkout@v4
        with:
          path: generator-jhipster
          fetch-depth: 2
      - uses: jhipster/actions/setup-runner@v0
        with:
          node-version: ${{ matrix.node-version }}
          java-version: ${{ matrix.java-version }}
          npm-version: ${{ matrix.npm-version }}
          maven-cache: true
          binary-dir: ${{ github.workspace }}/generator-jhipster/bin
      #----------------------------------------------------------------------
      # Install JHipster and generate project+entities
      #----------------------------------------------------------------------
      - run: npm ci --ignore-scripts
        working-directory: ${{ github.workspace }}/generator-jhipster
      - name: 'GENERATION: project'
        run: jhipster.cjs generate-sample ${{ matrix.sample }} --skip-jhipster-dependencies --skip-install ${{ matrix.args }}
      - run: jhipster.cjs info
      #----------------------------------------------------------------------
      # Launch tests
      #----------------------------------------------------------------------
      - name: 'E2E: Run'
        id: e2e
        run: |
          ./npmw install
          ./npmw run e2e:devserver --if-present
      - name: 'E2E: Store failure screenshots'
        uses: actions/upload-artifact@v4
        if: always() && steps.e2e.outcome == 'failure'
        with:
          name: screenshots-${{ matrix.job-name }}
          path: ${{ github.workspace }}/app/*/cypress/screenshots
  check-dev-server:
    permissions:
      contents: none
    runs-on: ubuntu-latest
    needs: [applications]
    if: always()
    steps:
      - run: |
          echo '${{ toJSON(needs) }}'
          if [ 'skipped' == '${{ needs.applications.result }}' ] || [ 'success' == '${{ needs.applications.result }}' ] || [ 'closed' == '${{ github.event.action }}' ]; then
            exit 0
          fi
          exit 1

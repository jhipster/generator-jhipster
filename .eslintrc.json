{
  "env": {
    "node": true,
    "es2022": true
  },
  "extends": ["airbnb-base", "plugin:prettier/recommended", "plugin:@typescript-eslint/recommended"],
  "parser": "@typescript-eslint/parser",
  "plugins": ["mocha", "prettier", "chai-friendly", "@typescript-eslint", "unused-imports", "import"],
  "settings": {
    "import/core-modules": ["generator-jhipster", "generator-jhipster/support"]
  },
  "parserOptions": {
    "ecmaVersion": 13
  },
  "overrides": [
    {
      "files": ["**/*.{c,m,}{js,ts}"],
      "rules": {
        "import/extensions": [0, { "pattern": { "{c,m,}{js,ts}": "always" } }]
      }
    },
    {
      "files": ["**/*.spec.{c,m,}{js,ts}", "**/__test-support/*.{c,m,}{js,ts}", "test/**/*.{c,m,}{js,ts}"],
      "rules": {
        "@typescript-eslint/ban-ts-comment": "off",
        "import/first": "off"
      }
    },
    {
      "files": ["**/*.{c,m,}js", "**/*.{c,m,}js"],
      "rules": {
        "@typescript-eslint/no-var-requires": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-this-alias": "off",
        "import/no-unresolved": "off"
      }
    },
    {
      "files": ["**/*.{c,m,}ts"],
      "rules": {
        "import/extensions": "off",
        "import/no-unresolved": "off"
      }
    }
  ],
  "rules": {
    "default-param-last": "off",
    "import/no-unresolved": [2, { "ignore": ["^#[\\w\\d/\\-]+$"] }],
    "import/prefer-default-export": "off",
    "prettier/prettier": "error",
    "prefer-regex-literals": "off",
    "linebreak-style": 0,
    "eol-last": 2,
    "quotes": [2, "single", { "avoidEscape": true }],
    "semi": [2, "always"],
    "eqeqeq": [2, "smart"],
    "no-restricted-globals": ["off"],
    "no-restricted-exports": "off",
    "no-use-before-define": [2, "nofunc"],
    "no-confusing-arrow": "off",
    "no-multi-str": 2,
    "no-promise-executor-return": "off",
    "no-irregular-whitespace": 2,
    "@typescript-eslint/no-empty-function": "off",
    "@typescript-eslint/no-unused-vars": "off",
    "unused-imports/no-unused-imports": "error",
    "unused-imports/no-unused-vars": [
      "error",
      { "vars": "all", "varsIgnorePattern": "^_", "args": "after-used", "argsIgnorePattern": "^_" }
    ],
    "@typescript-eslint/no-explicit-any": "off",
    "comma-dangle": "off",
    "max-len": "off",
    "import/order": "error",
    "import/no-duplicates": "error",
    "func-names": "off",
    "class-methods-use-this": "off",
    "no-underscore-dangle": "off",
    "no-plusplus": "off",
    "no-unused-expressions": 0,
    "chai-friendly/no-unused-expressions": [2, { "allowShortCircuit": true, "allowTernary": true }],
    "prefer-destructuring": "off",
    "no-multi-assign": "off",
    "no-param-reassign": "off",
    "lines-between-class-members": [2, "always", { "exceptAfterSingleLine": true }],
    "import/no-extraneous-dependencies": "off",
    "no-await-in-loop": "off",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-shadow": "off"
  }
}

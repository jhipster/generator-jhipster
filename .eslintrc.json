{
  "env": {
    "node": true,
    "es2020": true
  },
  "extends": ["airbnb-base", "plugin:prettier/recommended"],
  "plugins": ["mocha", "prettier", "chai-friendly"],
  "settings": {
    "import/core-modules": ["generator-jhipster", "generator-jhipster/support"]
  },
  "overrides": [
    {
      "files": ["**/*.mjs"],
      "parserOptions": {
        "ecmaVersion": 11
      },
      "rules": {
        "import/extensions": [0, { "pattern": { "{c,m,}js": "always" } }]
      }
    },
    {
      "files": ["**/*.spec.{c,m,}js", "test/**/*.{c,m,}js"],
      "env": {
        "mocha": true
      }
    }
  ],
  "rules": {
    "default-param-last": "off",
    "import/no-unresolved": [2, { "ignore": ["^#[\\w\\d/\\-]+$"] }],
    "prettier/prettier": "error",
    "prefer-regex-literals": "off",
    "linebreak-style": 0,
    "eol-last": 2,
    "quotes": [2, "single", { "avoidEscape": true }],
    "semi": [2, "always"],
    "eqeqeq": [2, "smart"],
    "no-restricted-globals": ["off"],
    "no-restricted-exports": "off",
    "no-use-before-define": [2, "nofunc"],
    "no-confusing-arrow": "off",
    "no-unused-vars": [2, { "vars": "local", "args": "none" }],
    "no-multi-str": 2,
    "no-promise-executor-return": "off",
    "no-irregular-whitespace": 2,
    "comma-dangle": "off",
    "max-len": "off",
    "func-names": "off",
    "class-methods-use-this": "off",
    "no-underscore-dangle": "off",
    "no-plusplus": "off",
    "no-unused-expressions": 0,
    "chai-friendly/no-unused-expressions": [2, { "allowShortCircuit": true, "allowTernary": true }],
    "prefer-destructuring": "off",
    "no-multi-assign": "off",
    "no-param-reassign": "off",
    "import/no-extraneous-dependencies": ["error", { "devDependencies": true }],
    "no-await-in-loop": "off",
    "no-restricted-syntax": [
      "error",
      {
        "selector": "ForInStatement",
        "message": "for..in loops iterate over the entire prototype chain, which is virtually never what you want. Use Object.{keys,values,entries}, and iterate over the resulting array."
      },
      {
        "selector": "LabeledStatement",
        "message": "Labels are a form of GOTO; using them makes code confusing and hard to maintain and understand."
      },
      {
        "selector": "WithStatement",
        "message": "`with` is disallowed in strict mode because it makes code impossible to predict and optimize."
      }
    ],
    "no-shadow": "off"
  }
}

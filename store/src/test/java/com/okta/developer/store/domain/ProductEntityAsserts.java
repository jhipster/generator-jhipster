package com.okta.developer.store.domain;

import static com.okta.developer.store.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ProductEntityAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductEntityAllPropertiesEquals(ProductEntity expected, ProductEntity actual) {
        assertProductEntityAutoGeneratedPropertiesEquals(expected, actual);
        assertProductEntityAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductEntityAllUpdatablePropertiesEquals(ProductEntity expected, ProductEntity actual) {
        assertProductEntityUpdatableFieldsEquals(expected, actual);
        assertProductEntityUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductEntityAutoGeneratedPropertiesEquals(ProductEntity expected, ProductEntity actual) {
        assertThat(actual)
            .as("Verify ProductEntity auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductEntityUpdatableFieldsEquals(ProductEntity expected, ProductEntity actual) {
        assertThat(actual)
            .as("Verify ProductEntity relevant properties")
            .satisfies(a -> assertThat(a.getTitle()).as("check title").isEqualTo(expected.getTitle()))
            .satisfies(a -> assertThat(a.getPrice()).as("check price").usingComparator(bigDecimalCompareTo).isEqualTo(expected.getPrice()))
            .satisfies(a -> assertThat(a.getImage()).as("check image").isEqualTo(expected.getImage()))
            .satisfies(a -> assertThat(a.getImageContentType()).as("check image contenty type").isEqualTo(expected.getImageContentType()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertProductEntityUpdatableRelationshipsEquals(ProductEntity expected, ProductEntity actual) {
        // empty method
    }
}

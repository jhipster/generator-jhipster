/*
 * Microservice stack sample to test compilation and base gateway/microservices functionality.
 *
 * Test focus:
 * - serviceDiscovery: eureka
 * - authenticationType: oauth2
 * - databaseType: mongodb
 * - testFrameworks: cypress, cucumber, gatling
 * - messageBroker: kafka
 *
 * Imperative focus:
 * - cacheProvider: caffeine
 *
 * Matrix:
 * - reactive: true, false
 * - buildTool: maven, gradle
 */

/* reactive, maven */
application {
  config {
    applicationType gateway
    authenticationType oauth2
    baseName gateway
    buildTool maven
    clientFramework angular
    creationTimestamp 1617901618886
    // databaseType mongodb
    jhiPrefix custom
    jwtSecretKey "ZjY4MTM4YjI5YzMwZjhjYjI2OTNkNTRjMWQ5Y2Q0Y2YwOWNmZTE2NzRmYzU3NTMwM2NjOTE3MTllOTM3MWRkMzcyYTljMjVmNmQ0Y2MxOTUzODc0MDhhMTlkMDIxMzI2YzQzZDM2ZDE3MmQ3NjVkODk3OTVmYzljYTQyZDNmMTQ="
    // TODO enable kafka
    // messageBroker kafka
    packageName com.okta.developer.gateway
    serviceDiscoveryType consul
    testFrameworks [cypress, cucumber, gatling]
  }
  entities *
}

/* imperative, maven */
application {
  config {
    applicationType microservice
    authenticationType oauth2
    baseName blog
    buildTool maven
    cacheProvider caffeine
    creationTimestamp 1617901618887
    databaseType mongodb
    jwtSecretKey "ZjY4MTM4YjI5YzMwZjhjYjI2OTNkNTRjMWQ5Y2Q0Y2YwOWNmZTE2NzRmYzU3NTMwM2NjOTE3MTllOTM3MWRkMzcyYTljMjVmNmQ0Y2MxOTUzODc0MDhhMTlkMDIxMzI2YzQzZDM2ZDE3MmQ3NjVkODk3OTVmYzljYTQyZDNmMTQ="
    // messageBroker kafka
    packageName com.okta.developer.blog
    serverPort 8081
    serviceDiscoveryType consul
    testFrameworks [cucumber, gatling]
  }
  entities Blog, Post, Tag
}

/* imperative, gradle, entitySuffix/dtoSuffix */
application {
  config {
    applicationType microservice
    authenticationType oauth2
    baseName store,
    buildTool gradle
    cacheProvider caffeine
    creationTimestamp 1617901618888
    databaseType mongodb
    dtoSuffix Rest
    entitySuffix Entity
    jwtSecretKey "ZjY4MTM4YjI5YzMwZjhjYjI2OTNkNTRjMWQ5Y2Q0Y2YwOWNmZTE2NzRmYzU3NTMwM2NjOTE3MTllOTM3MWRkMzcyYTljMjVmNmQ0Y2MxOTUzODc0MDhhMTlkMDIxMzI2YzQzZDM2ZDE3MmQ3NjVkODk3OTVmYzljYTQyZDNmMTQ="
    // messageBroker kafka
    packageName com.okta.developer.store
    serverPort 8082
    serviceDiscoveryType consul
    testFrameworks [cucumber, gatling]
  }
  entities Product
}

/* reactive, gradle, entitySuffix/dtoSuffix */
application {
  config {
    applicationType microservice
    authenticationType oauth2
    baseName notification,
    buildTool gradle
    creationTimestamp 1617901618889
    // databaseType mongodb
    dtoSuffix Rest
    entitySuffix Entity
    jwtSecretKey "ZjY4MTM4YjI5YzMwZjhjYjI2OTNkNTRjMWQ5Y2Q0Y2YwOWNmZTE2NzRmYzU3NTMwM2NjOTE3MTllOTM3MWRkMzcyYTljMjVmNmQ0Y2MxOTUzODc0MDhhMTlkMDIxMzI2YzQzZDM2ZDE3MmQ3NjVkODk3OTVmYzljYTQyZDNmMTQ="
    // messageBroker kafka
    packageName com.okta.developer.notification
    reactive true
    serverPort 8083
    serviceDiscoveryType consul
    testFrameworks [cucumber, gatling]
  }
  entities Notification
}

@ChangelogDate(20210408164809)
entity UserData {
  address String
}

@ChangelogDate(20210408164810)
entity Blog {
  name String required minlength(3)
  handle String required minlength(2)
}

@ChangelogDate(20210408164811)
entity Post {
  title String required
}

@ChangelogDate(20210408164812)
entity Tag {
  name String required minlength(2)
}

@ChangelogDate(20210408164813)
entity Product {
  title String required
  price BigDecimal required min(0)
  image ImageBlob
}

@ChangelogDate(20210408164814)
entity Notification {
  title String required
}

relationship OneToOne {
  @Id UserData{user(login)} to User
}

relationship ManyToOne {
  Post{blog(name)} to Blog
}

relationship ManyToMany {
  Post{tag(name)} to Tag{post}
}

paginate Post, Tag with infinite-scroll
paginate Product with pagination

service Product with serviceClass
service Notification with serviceImpl
dto Blog, Post, Tag with mapstruct

microservice Product with store
microservice Blog, Post, Tag with blog
microservice Notification with notification

deployment {
  deploymentType docker-compose,
  appsFolders [gateway, store, blog, notification]
  dockerRepositoryName "hipsterslabs"
  monitoring no
  serviceDiscoveryType consul
}

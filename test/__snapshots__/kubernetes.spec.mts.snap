// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator - Kubernetes Kafka application should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["09-kafka"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["09-kafka"],
    "serviceDiscoveryType": false
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag samplekafka jhipster/samplekafka
$ docker push jhipster/samplekafka
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc samplekafka
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f samplekafka-\${suffix}/
    kubectl apply -f messagebroker-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - samplekafka-k8s/samplekafka-deployment.yml
  - samplekafka-k8s/samplekafka-service.yml
  - samplekafka-k8s/samplekafka-mysql.yml
  # messagebroker
  - messagebroker-k8s/kafka.yml
# service discovery eureka/consul

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "messagebroker-k8s/kafka.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhipster-kafka
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhipster-kafka
  template:
    metadata:
      labels:
        app: jhipster-kafka
    spec:
      containers:
        - name: kafka
          image: kafka-placeholder
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://jhipster-kafka.default.svc.cluster.local:9092"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "jhipster-zookeeper.default.svc.cluster.local:2181"
            - name: KAFKA_BROKER_ID
              value: "2"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
          ports:
            - containerPort: 9092
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-kafka
  namespace: default
spec:
  selector:
    app: jhipster-kafka
  ports:
    - port: 9092
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhipster-zookeeper
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhipster-zookeeper
  template:
    metadata:
      labels:
        app: jhipster-zookeeper
    spec:
      containers:
        - name: zookeeper
          image: zookeeper-placeholder
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
            - name: ZOOKEEPER_SYNC_LIMIT
              value: "2"
          ports:
            - containerPort: 2181
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-zookeeper
  namespace: default
spec:
  selector:
    app: jhipster-zookeeper
  ports:
    - port: 2181
",
    "stateCleared": "modified",
  },
  "samplekafka-k8s/samplekafka-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplekafka
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplekafka
      version: "v1"
  template:
    metadata:
      labels:
        app: samplekafka
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - samplekafka
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 samplekafka-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: samplekafka-app
          image: jhipster/samplekafka
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://samplekafka-mysql.default.svc.cluster.local:3306/samplekafka?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://samplekafka-mysql.default.svc.cluster.local:3306/samplekafka?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: KAFKA_CONSUMER_KEY_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_CONSUMER_VALUE_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_CONSUMER_BOOTSTRAP_SERVERS
              value: "jhipster-kafka.default.svc.cluster.local:9092"
            - name: KAFKA_CONSUMER_GROUP_ID
              value: "samplekafka"
            - name: KAFKA_CONSUMER_AUTO_OFFSET_RESET
              value: "earliest"
            - name: KAFKA_PRODUCER_BOOTSTRAP_SERVERS
              value: "jhipster-kafka.default.svc.cluster.local:9092"
            - name: KAFKA_PRODUCER_KEY_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_PRODUCER_VALUE_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "samplekafka-k8s/samplekafka-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: samplekafka-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplekafka-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplekafka-mysql
  template:
    metadata:
      labels:
        app: samplekafka-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: samplekafka-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: samplekafka
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: samplekafka-mysql
  namespace: default
spec:
  selector:
    app: samplekafka-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "samplekafka-k8s/samplekafka-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: samplekafka
  namespace: default
  labels:
    app: samplekafka
spec:
  selector:
    app: samplekafka
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/samplekafka
      context: ./09-kafka
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes MySQL and PostgreSQL microservices without gateway should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql", "03-psql"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["02-mysql", "03-psql"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
$ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`

$ kubectl scale deployment <app-name> --replicas <replica-count>

\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`

$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>

\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.




## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
\`\`\`
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/
    kubectl apply -f mspsql-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  - mspsql-k8s/mspsql-deployment.yml
  - mspsql-k8s/mspsql-service.yml
  - mspsql-k8s/mspsql-postgresql.yml
  - mspsql-k8s/mspsql-elasticsearch.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql
      version: "v1"
  template:
    metadata:
      labels:
        app: mspsql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mspsql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 mspsql-postgresql 5432)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: mspsql-app
          image: jhipster/mspsql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_DATASOURCE_USERNAME
              value: mspsql
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-elasticsearch.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-elasticsearch-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-elasticsearch-pvc
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-postgresql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mspsql-postgresql
  namespace: default
  labels:
    app: mspsql-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-postgresql
  template:
    metadata:
      labels:
        app: mspsql-postgresql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-postgresql-pvc
      containers:
        - name: postgres
          image: postgresql-placeholder
          env:
            - name: POSTGRES_USER
              value: mspsql
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  selector:
    app: mspsql-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: mspsql
  namespace: default
  labels:
    app: mspsql
spec:
  selector:
    app: mspsql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
    - image: jhipster/mspsql
      context: ./03-psql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway and ingress should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "example.com",
    "ingressType": "nginx",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "Ingress",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["01-gateway"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-ingress.yml": {
    "contents": "apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jhgate
  namespace: default
spec:
  ingressClassName: nginx
  rules:
    - host: jhgate.default.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: jhgate
                port:
                  name: http
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: ClusterIP
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
        echo "#####################################################"
        echo "Please find the below useful endpoints,"
        echo "Gateway - http://jhgate.default.example.com"
        echo "#####################################################"
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - jhgate-k8s/jhgate-ingress.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway and mysql microservice should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway", "02-mysql"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["01-gateway", "02-mysql"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway with istio routing should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "example.com",
    "istio": true,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["01-gateway"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "istio-k8s/grafana-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.example.com
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-k8s/kiali-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.example.com
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-k8s/zipkin-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.example.com
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_PREFER_IP_ADDRESS
              value: "false"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME
              value: jhgate
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_SERVICE_NAME
              value: jhgate
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-destination-rule.yml": {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: "v1"
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.example.com
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type:
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-virtual-service.yml": {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  hosts:
    - jhgate
  http:
    - route:
        - destination:
            host: jhgate
            subset: "v1"
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
        echo "#####################################################"
        echo "Please find the below useful endpoints,"
        echo "#####################################################"
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl label namespace default istio-injection=enabled --overwrite=true
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - jhgate-k8s/jhgate-gateway.yml
  - jhgate-k8s/jhgate-destination-rule.yml
  - jhgate-k8s/jhgate-virtual-service.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml
  # istio
  - istio-k8s/grafana-gateway.yml
  - istio-k8s/zipkin-gateway.yml
  - istio-k8s/kiali-gateway.yml

patchesJson6902:
  - target:
      version: v1
      kind: Namespace
      name: default
    path: patch-k8s/istio-label.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      kind: Gateway
      name: grafana-observability-gateway
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      name: grafana-gw-virtualservice
      kind: VirtualService
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      kind: Gateway
      name: kiali-observability-gateway
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      name: kiali-gw-virtualservice
      kind: VirtualService
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      kind: Gateway
      name: zipkin-observability-gateway
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      name: zipkin-gw-virtualservice
      kind: VirtualService
      namespace: default
    path: patch-k8s/istio-namespace.yml
",
    "stateCleared": "modified",
  },
  "patch-k8s/istio-label.yml": {
    "contents": "- op: add
  path: "/metadata/labels/istio-injection"
  value: "enabled"
",
    "stateCleared": "modified",
  },
  "patch-k8s/istio-namespace.yml": {
    "contents": "- op: replace
  path: "/metadata/namespace"
  value: "istio-system"
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway, mysql, psql, mongodb, mariadb, mssql microservices should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": [
      "01-gateway",
      "02-mysql",
      "03-psql",
      "04-mongo",
      "07-mariadb",
      "11-mssql"
    ],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": [],
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": [
      "01-gateway",
      "02-mysql",
      "03-psql",
      "04-mongo",
      "07-mariadb",
      "11-mssql"
    ],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
$ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
$ docker image tag msmongodb jhipster/msmongodb
$ docker push jhipster/msmongodb
$ docker image tag msmariadb jhipster/msmariadb
$ docker push jhipster/msmariadb
$ docker image tag msmssqldb jhipster/msmssqldb
$ docker push jhipster/msmssqldb
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/
    kubectl apply -f mspsql-\${suffix}/
    kubectl apply -f msmongodb-\${suffix}/
    kubectl apply -f msmariadb-\${suffix}/
    kubectl apply -f msmssqldb-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  - mspsql-k8s/mspsql-deployment.yml
  - mspsql-k8s/mspsql-service.yml
  - mspsql-k8s/mspsql-postgresql.yml
  - mspsql-k8s/mspsql-elasticsearch.yml
  - msmongodb-k8s/msmongodb-deployment.yml
  - msmongodb-k8s/msmongodb-service.yml
  - msmongodb-k8s/msmongodb-mongodb.yml
  - msmariadb-k8s/msmariadb-deployment.yml
  - msmariadb-k8s/msmariadb-service.yml
  - msmariadb-k8s/msmariadb-mariadb.yml
  - msmssqldb-k8s/msmssqldb-deployment.yml
  - msmssqldb-k8s/msmssqldb-service.yml
  - msmssqldb-k8s/msmssqldb-mssql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmariadb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmariadb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmariadb-mariadb 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmariadb-app
          image: jhipster/msmariadb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false&serverTimezone=UTC
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false&serverTimezone=UTC
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-mariadb.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmariadb-mariadb-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: msmariadb-mariadb
  namespace: default
  labels:
    app: msmariadb-mariadb
type: Opaque
data:
  mariadb-root-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb-mariadb
  template:
    metadata:
      labels:
        app: msmariadb-mariadb
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmariadb-mariadb-pvc
      containers:
        - name: mariadb
          image: mariadb-placeholder
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MYSQL_DATABASE
              value: msmariadb
          #        command:
          #        - mysqld
          #        - --lower_case_table_names=1
          #        - --skip-ssl
          #        - --character_set_server=utf8mb4
          #        - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  selector:
    app: msmariadb-mariadb
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmariadb
  namespace: default
  labels:
    app: msmariadb
spec:
  selector:
    app: msmariadb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmongodb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmongodb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmongodb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmongodb-mongodb 27017)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmongodb-app
          image: jhipster/msmongodb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: msmongodb
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://msmongodb-mongodb-0.msmongodb-mongodb.default:27017"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-mongodb.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-config
data:
  mongod.conf: |
    net:
      port: 27017
    replication:
      replSetName: rs0
    storage:
      dbPath: /data/db
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-init
data:
  on-start.sh: |
    script_name=\${0##*/}

    log() {
        local msg="$1"
        local timestamp
        timestamp=$(date --iso-8601=ns)
        echo "[$timestamp] [$script_name] $msg" >> /work-dir/log.txt
    }

    shutdown_mongo() {
        if [[ $# -eq 1 ]]; then
            args="timeoutSecs: $1"
        else
            args='force: true'
        fi
        log "Shutting down MongoDB ($args)..."
        mongo admin "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "db.shutdownServer({$args})"
    }

    my_hostname=$(hostname)
    log "Bootstrapping MongoDB replica set member: $my_hostname"

    log "Reading standard input..."
    while read -ra line; do
        if [[ "\${line}" == *"\${my_hostname}"* ]]; then
            service_name="$line"
            continue
        fi
        peers=("\${peers[@]}" "$line")
    done

    # Generate the ca cert
    ca_crt=/data/configdb/tls.crt
    if [ -f "$ca_crt"  ]; then
        log "Generating certificate"
        ca_key=/data/configdb/tls.key
        pem=/work-dir/mongo.pem
        ssl_args=(--ssl --sslCAFile "$ca_crt" --sslPEMKeyFile "$pem")

    # Move into /work-dir
    pushd /work-dir

    cat >openssl.cnf <<EOL
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = $(echo -n "$my_hostname" | sed s/-[0-9]*$//)
    DNS.2 = $my_hostname
    DNS.3 = $service_name
    DNS.4 = localhost
    DNS.5 = 127.0.0.1
    EOL

        # Generate the certs
        openssl genrsa -out mongo.key 2048
        openssl req -new -key mongo.key -out mongo.csr -subj "/CN=$my_hostname" -config openssl.cnf
        openssl x509 -req -in mongo.csr \\
            -CA "$ca_crt" -CAkey "$ca_key" -CAcreateserial \\
            -out mongo.crt -days 3650 -extensions v3_req -extfile openssl.cnf

        rm mongo.csr
        cat mongo.crt mongo.key > $pem
        rm mongo.key mongo.crt
    fi


    log "Peers: \${peers[*]}"

    log "Starting a MongoDB instance..."
    mongod --config /data/configdb/mongod.conf --dbpath="$DATA_PATH" --replSet="$REPLICA_SET" --port=$PORT "\${auth_args[@]}" --bind_ip=0.0.0.0 >> /work-dir/log.txt 2>&1 &

    log "Waiting for MongoDB to be ready..."
    until mongo "\${ssl_args[@]}" --eval "db.adminCommand('ping')"; do
        log "Retrying..."
        sleep 2
    done

    log "Initialized."

    # try to find a master and add yourself to its replica set.
    for peer in "\${peers[@]}"; do
        if mongo admin --host "$peer" "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "rs.isMaster()" | grep '"ismaster" : true'; then
            log "Found master: $peer"
            log "Adding myself ($service_name) to replica set..."
            if mongo admin --host "$peer" "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "rs.add('$service_name')" | grep 'Quorum check failed'; then
                log 'Quorum check failed, unable to join replicaset. Exiting prematurely.'
                shutdown_mongo
                exit 1
            fi

            sleep 3

            log 'Waiting for replica to reach SECONDARY state...'
            until printf '.' && [[ $(mongo admin "\${admin_creds[@]}" "\${ssl_args[@]}" --quiet --eval "rs.status().myState") == '2' ]]; do
                sleep 1
            done

            log '✓ Replica reached SECONDARY state.'

            shutdown_mongo "60"
            log "Good bye."
            exit 0
        fi
    done

    # else initiate a replica set with yourself.
    if mongo "\${ssl_args[@]}" --eval "rs.status()" | grep "no replset config has been received"; then
        log "Initiating a new replica set with myself ($service_name)..."
        mongo "\${ssl_args[@]}" --eval "rs.initiate({'_id': '$REPLICA_SET', 'members': [{'_id': 0, 'host': '$service_name'}]})"

        sleep 3

        log 'Waiting for replica to reach PRIMARY state...'
        until printf '.' && [[ $(mongo "\${ssl_args[@]}" --quiet --eval "rs.status().myState") == '1' ]]; do
            sleep 1
        done

        log '✓ Replica reached PRIMARY state.'

        log "Done."
    fi

    shutdown_mongo
    log "Good bye."
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  serviceName: msmongodb-mongodb
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb-mongodb
  template:
    metadata:
      labels:
        app: msmongodb-mongodb
    spec:
      initContainers:
        - name: config
          image: busybox
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x
              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
        - name: install
          image: "k8s.gcr.io/mongodb-install:0.6"
          args:
            - --work-dir=/work-dir
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
        - name: boot
          image: mongodb-placeholder
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - "-service=msmongodb-mongodb"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: "27017"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: mongodb
          image: mongodb-placeholder
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: "27017"
          ports:
            - name: peer
              containerPort: 27017
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=$(DATA_PATH)
            - --replSet=$(REPLICA_SET)
            - --port=$(PORT)
            - --bind_ip=0.0.0.0
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
      volumes:
        - name: config
          configMap:
            name: msmongodb-mongodb-config
        - name: workdir
          emptyDir: {}
        - name: init
          configMap:
            defaultMode: 0755
            name: msmongodb-mongodb-init
        - name: configdir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Headless service for DNS record
apiVersion: v1
kind: Service
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: peer
      port: 27017
  selector:
    app: msmongodb-mongodb
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmongodb
  namespace: default
  labels:
    app: msmongodb
spec:
  selector:
    app: msmongodb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmssqldb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmssqldb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmssqldb-app
          image: jhipster/msmssqldb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-mssql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmssqldb-mssql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb-mssql
  template:
    metadata:
      labels:
        app: msmssqldb-mssql
    spec:
      volumes:
        - name: mssqldb
          persistentVolumeClaim:
            claimName: mssql-data
        - name: data
          persistentVolumeClaim:
            claimName: msmssqldb-mssql-pvc
      containers:
        - name: mysql
          image: mssql-placeholder
          env:
            - name: MSSQL_PID
              value: "Express"
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql
                  key: SA_PASSWORD
          ports:
            - containerPort: 1433
          volumeMounts:
            - name: mssqldb
              mountPath: /var/opt/mssql
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"

---
apiVersion: v1
kind: Service
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  selector:
    app: msmssqldb-mssql
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433
  type: LoadBalancer
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mssql-data
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 8Gi
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmssqldb
  namespace: default
  labels:
    app: msmssqldb
spec:
  selector:
    app: msmssqldb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql
      version: "v1"
  template:
    metadata:
      labels:
        app: mspsql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mspsql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 mspsql-postgresql 5432)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: mspsql-app
          image: jhipster/mspsql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_DATASOURCE_USERNAME
              value: mspsql
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-elasticsearch.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-elasticsearch-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-elasticsearch-pvc
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-postgresql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mspsql-postgresql
  namespace: default
  labels:
    app: mspsql-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-postgresql
  template:
    metadata:
      labels:
        app: mspsql-postgresql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-postgresql-pvc
      containers:
        - name: postgres
          image: postgresql-placeholder
          env:
            - name: POSTGRES_USER
              value: mspsql
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  selector:
    app: mspsql-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: mspsql
  namespace: default
  labels:
    app: mspsql
spec:
  selector:
    app: mspsql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
    - image: jhipster/mspsql
      context: ./03-psql
      jib: {}
    - image: jhipster/msmongodb
      context: ./04-mongo
      jib: {}
    - image: jhipster/msmariadb
      context: ./07-mariadb
      jib: {}
    - image: jhipster/msmssqldb
      context: ./11-mssql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes monolith application should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["08-monolith"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["08-monolith"],
    "serviceDiscoveryType": false
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag samplemysql jhipster/samplemysql
$ docker push jhipster/samplemysql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc samplemysql
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f samplemysql-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - samplemysql-k8s/samplemysql-deployment.yml
  - samplemysql-k8s/samplemysql-service.yml
  - samplemysql-k8s/samplemysql-mysql.yml
  - samplemysql-k8s/samplemysql-elasticsearch.yml
# service discovery eureka/consul

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "samplemysql-k8s/samplemysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplemysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplemysql
      version: "v1"
  template:
    metadata:
      labels:
        app: samplemysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - samplemysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 samplemysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: samplemysql-app
          image: jhipster/samplemysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://samplemysql-mysql.default.svc.cluster.local:3306/samplemysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://samplemysql-mysql.default.svc.cluster.local:3306/samplemysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://samplemysql-elasticsearch.default.svc.cluster.local:9200
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "samplemysql-k8s/samplemysql-elasticsearch.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: samplemysql-elasticsearch-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplemysql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplemysql-elasticsearch
  template:
    metadata:
      labels:
        app: samplemysql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: samplemysql-elasticsearch-pvc
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: samplemysql-elasticsearch
  namespace: default
spec:
  selector:
    app: samplemysql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "samplemysql-k8s/samplemysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: samplemysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplemysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplemysql-mysql
  template:
    metadata:
      labels:
        app: samplemysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: samplemysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: samplemysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: samplemysql-mysql
  namespace: default
spec:
  selector:
    app: samplemysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "samplemysql-k8s/samplemysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: samplemysql
  namespace: default
  labels:
    app: samplemysql
spec:
  selector:
    app: samplemysql
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/samplemysql
      context: ./08-monolith
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes mysql microservice with custom namespace and jhipster prometheus monitoring should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "mynamespace",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "prometheus",
    "packages": ["02-mysql"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`

$ kubectl scale deployment <app-name> --replicas <replica-count> -n mynamespace

\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`

$ kubectl set image deployment/<app-name>-app <app-name>=<new-image> -n mynamespace

\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Monitoring tools

### Prometheus metrics

Generator is also packaged with [Prometheus operator by CoreOS](https://github.com/coreos/prometheus-operator).

**hint**: use must build your apps with \`prometheus\` profile active!

Application metrics can be explored in Prometheus through,

\`\`\`

$ kubectl get svc jhipster-prometheus -n mynamespace

\`\`\`

Also the visualisation can be explored in Grafana which is pre-configured with a dashboard view. You can find the service details by
\`\`\`

$ kubectl get svc jhipster-grafana -n mynamespace

\`\`\`

* If you have chosen *Ingress*, then you should be able to access Grafana using the given ingress domain.
* If you have chosen *NodePort*, then point your browser to an IP of any of your nodes and use the node port described in the output.
* If you have chosen *LoadBalancer*, then use the IaaS provided load balancer IP




## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
\`\`\`
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
        echo "#####################################################"
        echo "Please find the below useful endpoints,"
        echo "JHipster Grafana - http://jhipster-grafana.mynamespace."
        echo "#####################################################"
}

default() {
    suffix=k8s
    kubectl apply -f namespace.yml
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/
    kubectl apply -f monitoring-\${suffix}/jhipster-prometheus-crd.yml
    until [ $(kubectl get crd prometheuses.monitoring.coreos.com 2>>/dev/null | wc -l) -ge 2 ]; do
        echo "Waiting for the custom resource prometheus operator to get initialised";
        sleep 5;
    done
    kubectl apply -f monitoring-\${suffix}/jhipster-prometheus-cr.yml
    kubectl apply -f monitoring-\${suffix}/jhipster-grafana.yml
    kubectl apply -f monitoring-\${suffix}/jhipster-grafana-dashboard.yml

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

namespace: mynamespace

resources:
  - namespace.yml
  # Individual apps
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  - msmysql-k8s/msmysql-prometheus-sm.yml
  # monitoring prometheus
  - monitoring-k8s/jhipster-prometheus-cr.yml
  - monitoring-k8s/jhipster-prometheus-crd.yml
  - monitoring-k8s/jhipster-grafana.yml
  - monitoring-k8s/jhipster-grafana-dashboard.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "monitoring-k8s/jhipster-grafana-dashboard.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: jhipster-grafana-dashboard
  namespace: mynamespace
data:
  deployment-dashboard.json: |
    {
        "dashboard": {
            "__inputs": [
                {
                    "name": "DS_PROMETHEUS",
                    "label": "prometheus",
                    "description": "",
                    "type": "datasource",
                    "pluginId": "prometheus",
                    "pluginName": "Prometheus"
                }
            ],
            "__requires": [
                {
                    "type": "grafana",
                    "id": "grafana",
                    "name": "Grafana",
                    "version": "4.6.0"
                },
                {
                    "type": "panel",
                    "id": "graph",
                    "name": "Graph",
                    "version": ""
                },
                {
                    "type": "datasource",
                    "id": "prometheus",
                    "name": "Prometheus",
                    "version": "1.0.0"
                },
                {
                    "type": "panel",
                    "id": "singlestat",
                    "name": "Singlestat",
                    "version": ""
                }
            ],
            "annotations": {
                "list": [
                    {
                        "builtIn": 1,
                        "datasource": "-- Grafana --",
                        "enable": true,
                        "hide": true,
                        "iconColor": "rgba(0, 211, 255, 1)",
                        "name": "Annotations & Alerts",
                        "type": "dashboard"
                    }
                ]
            },
            "description": "JHipster metrics",
            "editable": true,
            "gnetId": 3308,
            "graphTooltip": 0,
            "hideControls": false,
            "id": null,
            "links": [],
            "refresh": false,
            "rows": [
                {
                    "collapse": false,
                    "height": "250px",
                    "panels": [
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": false,
                            "colors": [
                                "rgba(245, 54, 54, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "decimals": null,
                            "description": "Service status",
                            "format": "none",
                            "gauge": {
                                "maxValue": 1,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "height": "",
                            "id": 1,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "100%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 4,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.18)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": false
                            },
                            "tableColumn": "Value",
                            "targets": [
                                {
                                    "expr": "up{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "table",
                                    "intervalFactor": 2,
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "up",
                                    "legendFormat": "service"
                                }
                            ],
                            "thresholds": "0",
                            "title": "Service Status Now",
                            "type": "singlestat",
                            "valueFontSize": "120%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "Down",
                                    "value": "0"
                                },
                                {
                                    "value": "1",
                                    "op": "=",
                                    "text": "Up"
                                }
                            ],
                            "valueName": "current",
                            "hideTimeOverride": false,
                            "minSpan": null,
                            "repeat": null,
                            "transparent": false
                        },
                        {
                            "id": 29,
                            "title": "Service Uptime",
                            "span": 8,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "up{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{pod}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": "1",
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": "1",
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": true,
                            "pointradius": 3,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": false,
                                "min": false,
                                "max": false,
                                "current": false,
                                "total": false,
                                "avg": false,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": true,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": true,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The uptime of the service"
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Uptime Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": true,
                            "colors": [
                                "rgba(32, 176, 9, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Total requests count",
                            "format": "none",
                            "gauge": {
                                "maxValue": 10000000000000,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "id": 5,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "50%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 3,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.18)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": false
                            },
                            "tableColumn": "Value",
                            "targets": [
                                {
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_requests_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "table",
                                    "intervalFactor": 2,
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_requests_count"
                                }
                            ],
                            "thresholds": "",
                            "title": "Total Requests",
                            "type": "singlestat",
                            "valueFontSize": "70%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "N/A",
                                    "value": "null"
                                }
                            ],
                            "valueName": "total",
                            "transparent": false
                        },
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": false,
                            "colors": [
                                "rgba(245, 54, 54, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Number of 200 OK requests",
                            "format": "none",
                            "gauge": {
                                "maxValue": 10000000000000000,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "id": 6,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "50%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 3,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.78)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": true
                            },
                            "tableColumn": "Value",
                            "targets": [
                                {
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "table",
                                    "intervalFactor": 2,
                                    "legendFormat": "",
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total"
                                }
                            ],
                            "thresholds": "",
                            "title": "Total Successful hits",
                            "type": "singlestat",
                            "valueFontSize": "80%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "N/A",
                                    "value": "null"
                                }
                            ],
                            "valueName": "total"
                        },
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": false,
                            "colors": [
                                "rgba(245, 54, 54, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Number of server errors and bad requests",
                            "format": "none",
                            "gauge": {
                                "maxValue": 1,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "id": 7,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "50%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 3,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.18)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": false
                            },
                            "tableColumn": "Value",
                            "targets": [
                                {
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total{namespace =\\"$namespace\\", service =\\"$service_name\\"} + com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_badRequest_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total"
                                }
                            ],
                            "thresholds": "1",
                            "title": "Total Bad hits",
                            "type": "singlestat",
                            "valueFontSize": "70%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "N/A",
                                    "value": "null"
                                }
                            ],
                            "valueName": "total"
                        },
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": false,
                            "colors": [
                                "rgba(245, 54, 54, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Number of 404 not found requests",
                            "format": "none",
                            "gauge": {
                                "maxValue": 1,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "id": 8,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "50%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 3,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.18)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": false
                            },
                            "tableColumn": "",
                            "targets": [
                                {
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total"
                                }
                            ],
                            "thresholds": "1",
                            "title": "Trace 404 hits",
                            "type": "singlestat",
                            "valueFontSize": "80%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "N/A",
                                    "value": "null"
                                }
                            ],
                            "valueName": "total"
                        },
                        {
                            "id": 30,
                            "title": "Active Requests",
                            "span": 12,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_activeRequests{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_activeRequests",
                                    "step": 2,
                                    "legendFormat": "{{service}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": null,
                                    "max": null,
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": null,
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [
                                    "total"
                                ],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 2,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": false,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": false,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": []
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Requests Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The current number of live threads including daemon and non-daemon and runnable threads",
                            "fill": 4,
                            "id": 10,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true,
                                "rightSide": false,
                                "hideEmpty": false
                            },
                            "lines": true,
                            "linewidth": 2,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": true,
                            "targets": [
                                {
                                    "expr": "jvm_threads_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Total threads",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_threads_count"
                                },
                                {
                                    "expr": "jvm_threads_daemon_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_threads_daemon_count",
                                    "step": 4,
                                    "legendFormat": "Daemon threads"
                                },
                                {
                                    "expr": "jvm_threads_runnable_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "C",
                                    "metric": "jvm_threads_runnable_count",
                                    "step": 4,
                                    "legendFormat": "Runnable threads"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Live Threads",
                            "tooltip": {
                                "shared": false,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": [
                                    "total"
                                ]
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ],
                            "transparent": false
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The current number of blocked and deadlock threads",
                            "fill": 1,
                            "id": 11,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_threads_blocked_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Blocked threads",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_threads_blocked_count"
                                },
                                {
                                    "expr": "jvm_threads_deadlock_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_threads_deadlock_count",
                                    "step": 4,
                                    "legendFormat": "Deadlock threads"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Blocked and Deadlock Threads",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The current number of waiting threads",
                            "fill": 1,
                            "id": 12,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_threads_waiting_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Waiting threads",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_threads_waiting_count"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Waiting Threads",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ]
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Thread Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "An estimate of the number of buffers in the pool",
                            "fill": 1,
                            "id": 13,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_buffers_direct_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "{{service}}",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_buffers_direct_count"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Buffer Count",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "An estimate of the memory that the Java virtual machine is using for this buffer pool",
                            "fill": 1,
                            "id": 14,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_buffers_direct_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "{{service}}",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_buffers_direct_used"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Buffer Mem Used",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "An estimate of the total capacity of the buffers in this pool",
                            "fill": 1,
                            "id": 15,
                            "legend": {
                                "alignAsTable": true,
                                "avg": false,
                                "current": true,
                                "max": false,
                                "min": false,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_buffers_direct_capacity{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "{{service}}",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_buffers_direct_capacity"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Buffer Capacity",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The total amount of heap memory",
                            "fill": 1,
                            "id": 18,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_heap_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_memory_heap_used"
                                },
                                {
                                    "expr": "jvm_memory_heap_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_memory_heap_max",
                                    "step": 4,
                                    "legendFormat": "Maximum"
                                },
                                {
                                    "expr": "jvm_memory_heap_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "C",
                                    "metric": "jvm_memory_heap_committed",
                                    "step": 4,
                                    "legendFormat": "Committed"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Heap Memory",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The amount of used, committed and max memory",
                            "fill": 1,
                            "id": 16,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_total_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_memory_total_used"
                                },
                                {
                                    "expr": "jvm_memory_total_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_memory_total_max",
                                    "step": 4,
                                    "legendFormat": "Max"
                                },
                                {
                                    "expr": "jvm_memory_total_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "C",
                                    "metric": "jvm_memory_total_committed",
                                    "step": 4,
                                    "legendFormat": "Committed"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Total Memory",
                            "tooltip": {
                                "shared": false,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": [
                                    "total"
                                ]
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The total amount of  non heap memory",
                            "fill": 1,
                            "id": 17,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_non_heap_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Non Heap Used",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_memory_non_heap_used"
                                },
                                {
                                    "expr": "jvm_memory_non_heap_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_memory_non_heap_max",
                                    "step": 4,
                                    "legendFormat": "Non Heap Committed"
                                },
                                {
                                    "expr": "jvm_memory_pools_Metaspace_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "C",
                                    "metric": "jvm_memory_pools_Metaspace_used",
                                    "step": 4,
                                    "legendFormat": "Metaspace Used"
                                },
                                {
                                    "expr": "jvm_memory_pools_Code_Cache_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "D",
                                    "metric": "jvm_memory_pools_Code_Cache_used",
                                    "step": 4,
                                    "legendFormat": "Code Cache Used"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Other Memory",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Memory Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Memory space of new generation",
                            "fill": 2,
                            "id": 19,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 2,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 6,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_pools_PS_Eden_Space_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 2,
                                    "metric": "jvm_memory_pools_PS_Eden_Space_used"
                                },
                                {
                                    "expr": "jvm_memory_pools_PS_Eden_Space_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_memory_pools_PS_Eden_Space_max",
                                    "step": 2,
                                    "legendFormat": "Max"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Eden Space",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Memory space of new generation",
                            "fill": 1,
                            "id": 20,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 6,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_pools_PS_Survivor_Space_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 2,
                                    "metric": "jvm_memory_pools_PS_Old_Gen_used"
                                },
                                {
                                    "expr": "jvm_memory_pools_PS_Survivor_Space_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "",
                                    "step": 2,
                                    "legendFormat": "Max"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Survivor Space",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Memory space of old generation",
                            "fill": 1,
                            "id": 24,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 12,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_pools_PS_Old_Gen_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 2,
                                    "metric": "jvm_memory_pools_PS_Old_Gen_used"
                                },
                                {
                                    "expr": "jvm_memory_pools_PS_Old_Gen_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "step": 2,
                                    "legendFormat": "Max"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Old Generation",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "s",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Memory Space Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "id": 31,
                            "title": "Cache Hits",
                            "span": 6,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "{__name__=~\\"^jcache_statistics.*cache_hits\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{__name__}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "none"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [
                                    "total"
                                ],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": true,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": false,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The total number of cache hits"
                        },
                        {
                            "id": 32,
                            "title": "Cache Misses",
                            "span": 6,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "{__name__=~\\"^jcache_statistics.*cache_misses\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{__name__}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": true,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": true,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The total number of cache misses"
                        },
                        {
                            "id": 33,
                            "title": "Cache Gets",
                            "span": 6,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "{__name__=~\\"^jcache_statistics.*cache_gets\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{__name__}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": true,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": true,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The total number of cache gets"
                        },
                        {
                            "id": 34,
                            "title": "Cache Puts",
                            "span": 6,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "{__name__=~\\"^jcache_statistics.*cache_puts\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{__name__}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": true,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": true,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The total number of cache puts"
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Cache Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Count of REST requests",
                            "fill": 1,
                            "id": 27,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 12,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "{__name__=~\\".*rest.*_count\\", namespace=\\"$namespace\\", service=\\"$service_name\\"} ",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "{{__name__}}",
                                    "refId": "A",
                                    "step": 2
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "REST Requests Metrics",
                            "tooltip": {
                                "shared": false,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": [
                                    "total"
                                ]
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ],
                            "decimals": 0
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "REST Metrics",
                    "titleSize": "h6"
                }
            ],
            "schemaVersion": 14,
            "style": "dark",
            "tags": [
                "java",
                "jhipster",
                "spring-boot"
            ],
            "templating": {
                "list": [
                    {
                        "allValue": null,
                        "current": {},
                        "datasource": "\${DS_PROMETHEUS}",
                        "hide": 0,
                        "includeAll": false,
                        "label": "Namespace",
                        "multi": false,
                        "name": "namespace",
                        "options": [],
                        "query": "label_values(jvm_files, namespace)",
                        "refresh": 2,
                        "regex": "",
                        "sort": 1,
                        "tagValuesQuery": "",
                        "tags": [],
                        "tagsQuery": "",
                        "type": "query",
                        "useTags": false
                    },
                    {
                        "allValue": null,
                        "current": {},
                        "datasource": "\${DS_PROMETHEUS}",
                        "hide": 0,
                        "includeAll": false,
                        "label": "Service Name",
                        "multi": false,
                        "name": "service_name",
                        "options": [],
                        "query": "label_values(jvm_files, service)",
                        "refresh": 2,
                        "regex": "",
                        "sort": 1,
                        "tagValuesQuery": "",
                        "tags": [],
                        "tagsQuery": "",
                        "type": "query",
                        "useTags": false
                    }
                ]
            },
            "time": {
                "from": "now-15m",
                "to": "now"
            },
            "timepicker": {
                "refresh_intervals": [
                    "5s",
                    "10s",
                    "30s",
                    "1m",
                    "5m",
                    "15m",
                    "30m",
                    "1h",
                    "2h",
                    "1d"
                ],
                "time_options": [
                    "5m",
                    "15m",
                    "1h",
                    "6h",
                    "12h",
                    "24h",
                    "2d",
                    "7d",
                    "30d"
                ]
            },
            "timezone": "",
            "title": "JHipster Metrics",
            "version": 3
        },
        "inputs": [
            {
                "name": "DS_PROMETHEUS",
                "pluginId": "prometheus",
                "type": "datasource",
                "value": "prometheus"
            }
        ],
        "overwrite": true
    }
  prometheus-datasource.json: |
    {
        "access": "proxy",
        "basicAuth": false,
        "name": "prometheus",
        "type": "prometheus",
        "url": "http://jhipster-prometheus:9090"
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: jhipster-grafana-dashboard
  namespace: mynamespace
  labels:
    job: jhipster-grafana-dashboard
spec:
  template:
    metadata:
      labels:
        job: jhipster-grafana-dashboard
    spec:
      initContainers:
        - name: init-dependent-services-check
          image: busybox
          command:
            - "/bin/sh"
            - "-c"
            - |
              until nc -z -w 1 jhipster-prometheus 9090
              do
                echo Waiting for prometheus to get initialized
                sleep 5
              done
              until nc -z -w 1 jhipster-grafana 3000
              do
                echo Waiting for grafana to get initialized
                sleep 5
              done
      containers:
        - name: grafana-configurer
          image: grafana-watcher-placeholder
          args:
            - "--watch-dir=/var/grafana-dashboard"
            - "--grafana-url=http://jhipster-grafana:3000"
          env:
            - name: GRAFANA_USER
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: username
            - name: GRAFANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: password
          resources:
            requests:
              memory: "16Mi"
              cpu: "50m"
            limits:
              memory: "32Mi"
              cpu: "100m"
          volumeMounts:
            - name: grafana-dashboard
              mountPath: /var/grafana-dashboard
      volumes:
        - name: grafana-dashboard
          configMap:
            name: jhipster-grafana-dashboard
      restartPolicy: OnFailure
",
    "stateCleared": "modified",
  },
  "monitoring-k8s/jhipster-grafana.yml": {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: jhipster-grafana-credentials
  namespace: mynamespace
data:
  username: amhpcHN0ZXI=
  password: amhpcHN0ZXI=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhipster-grafana
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhipster-grafana
  template:
    metadata:
      labels:
        app: jhipster-grafana
    spec:
      containers:
        - name: jhipster-grafana
          image: grafana-placeholder
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: username
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: password
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "250Mi"
              cpu: "200m"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/grafana-storage
      volumes:
        - name: grafana-storage
          emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-grafana
  namespace: mynamespace
  labels:
    app: jhipster-grafana
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
  type: LoadBalancer
  selector:
    app: jhipster-grafana
---

",
    "stateCleared": "modified",
  },
  "monitoring-k8s/jhipster-prometheus-cr.yml": {
    "contents": "apiVersion: v1
kind: ServiceAccount
metadata:
  name: jhipster-prometheus-sa
  namespace: mynamespace
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: jhipster-prometheus-role
  namespace: mynamespace
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources:
      - configmaps
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
# limit to the namespace
kind: RoleBinding
metadata:
  name: jhipster-prometheus-rb
  namespace: mynamespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jhipster-prometheus-role
subjects:
  - kind: ServiceAccount
    name: jhipster-prometheus-sa
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: jhipster-prometheus
  namespace: mynamespace
spec:
  replicas: 1
  serviceAccountName: jhipster-prometheus-sa
  serviceMonitorSelector:
    matchLabels:
      team: mynamespace
  resources:
    requests:
      memory: 400Mi
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-prometheus
  namespace: mynamespace
spec:
  ports:
    - name: web
      port: 9090
      protocol: TCP
      targetPort: web
  selector:
    prometheus: jhipster-prometheus
",
    "stateCleared": "modified",
  },
  "monitoring-k8s/jhipster-prometheus-crd.yml": {
    "contents": "apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: jhipster-prometheus-operator-cr
rules:
  - apiGroups:
      - extensions
    resources:
      - thirdpartyresources
    verbs:
      - "*"
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - "*"
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - alertmanagers
      - prometheuses
      - servicemonitors
      - prometheusrules
    verbs:
      - "*"
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs: ["*"]
  - apiGroups: [""]
    resources:
      - configmaps
      - secrets
    verbs: ["*"]
  - apiGroups: [""]
    resources:
      - pods
    verbs: ["list", "delete"]
  - apiGroups: [""]
    resources:
      - services
      - endpoints
    verbs: ["get", "create", "update"]
  - apiGroups: [""]
    resources:
      - nodes
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources:
      - namespaces
    verbs: ["list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jhipster-prometheus-operator-sa
  namespace: mynamespace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jhipster-prometheus-operator-rb
  namespace: mynamespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jhipster-prometheus-operator-cr
subjects:
  - kind: ServiceAccount
    name: jhipster-prometheus-operator-sa
    namespace: mynamespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: prometheus-operator
  name: jhipster-prometheus-operator
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: prometheus-operator
  template:
    metadata:
      labels:
        k8s-app: prometheus-operator
    spec:
      containers:
        - args:
            - --kubelet-service=kube-system/kubelet
            - --config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1
          image: prometheus-operator-placeholder
          name: prometheus-operator
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits:
              cpu: 200m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 50Mi
      serviceAccountName: jhipster-prometheus-operator-sa
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.mynamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED
              value: "true"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: mynamespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-prometheus-sm.yml": {
    "contents": "apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: msmysql-app
  namespace: mynamespace
  labels:
    team: mynamespace
spec:
  selector:
    matchLabels:
      app: msmysql
  endpoints:
    - port: web
      path: /prometheusMetrics
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.mynamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: mynamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - mynamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.mynamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes mysql microservice with custom namespace should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "mynamespace",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["02-mysql"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`

$ kubectl scale deployment <app-name> --replicas <replica-count> -n mynamespace

\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`

$ kubectl set image deployment/<app-name>-app <app-name>=<new-image> -n mynamespace

\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.




## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
\`\`\`
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f namespace.yml
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

namespace: mynamespace

resources:
  - namespace.yml
  # Individual apps
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.mynamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: mynamespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.mynamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: mynamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - mynamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.mynamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes mysql, psql, mongodb, mariadb, mssql microservices with dynamic storage provisioning should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": [
      "01-gateway",
      "02-mysql",
      "03-psql",
      "04-mongo",
      "07-mariadb",
      "11-mssql"
    ],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": [],
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": [
      "01-gateway",
      "02-mysql",
      "03-psql",
      "04-mongo",
      "07-mariadb",
      "11-mssql"
    ],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
$ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
$ docker image tag msmongodb jhipster/msmongodb
$ docker push jhipster/msmongodb
$ docker image tag msmariadb jhipster/msmariadb
$ docker push jhipster/msmariadb
$ docker image tag msmssqldb jhipster/msmssqldb
$ docker push jhipster/msmssqldb
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/
    kubectl apply -f mspsql-\${suffix}/
    kubectl apply -f msmongodb-\${suffix}/
    kubectl apply -f msmariadb-\${suffix}/
    kubectl apply -f msmssqldb-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  - mspsql-k8s/mspsql-deployment.yml
  - mspsql-k8s/mspsql-service.yml
  - mspsql-k8s/mspsql-postgresql.yml
  - mspsql-k8s/mspsql-elasticsearch.yml
  - msmongodb-k8s/msmongodb-deployment.yml
  - msmongodb-k8s/msmongodb-service.yml
  - msmongodb-k8s/msmongodb-mongodb.yml
  - msmariadb-k8s/msmariadb-deployment.yml
  - msmariadb-k8s/msmariadb-service.yml
  - msmariadb-k8s/msmariadb-mariadb.yml
  - msmssqldb-k8s/msmssqldb-deployment.yml
  - msmssqldb-k8s/msmssqldb-service.yml
  - msmssqldb-k8s/msmssqldb-mssql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmariadb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmariadb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmariadb-mariadb 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmariadb-app
          image: jhipster/msmariadb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false&serverTimezone=UTC
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false&serverTimezone=UTC
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-mariadb.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmariadb-mariadb-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: msmariadb-mariadb
  namespace: default
  labels:
    app: msmariadb-mariadb
type: Opaque
data:
  mariadb-root-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb-mariadb
  template:
    metadata:
      labels:
        app: msmariadb-mariadb
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmariadb-mariadb-pvc
      containers:
        - name: mariadb
          image: mariadb-placeholder
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MYSQL_DATABASE
              value: msmariadb
          #        command:
          #        - mysqld
          #        - --lower_case_table_names=1
          #        - --skip-ssl
          #        - --character_set_server=utf8mb4
          #        - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  selector:
    app: msmariadb-mariadb
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmariadb
  namespace: default
  labels:
    app: msmariadb
spec:
  selector:
    app: msmariadb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmongodb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmongodb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmongodb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmongodb-mongodb 27017)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmongodb-app
          image: jhipster/msmongodb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: msmongodb
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://msmongodb-mongodb-0.msmongodb-mongodb.default:27017"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-mongodb.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-config
data:
  mongod.conf: |
    net:
      port: 27017
    replication:
      replSetName: rs0
    storage:
      dbPath: /data/db
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-init
data:
  on-start.sh: |
    script_name=\${0##*/}

    log() {
        local msg="$1"
        local timestamp
        timestamp=$(date --iso-8601=ns)
        echo "[$timestamp] [$script_name] $msg" >> /work-dir/log.txt
    }

    shutdown_mongo() {
        if [[ $# -eq 1 ]]; then
            args="timeoutSecs: $1"
        else
            args='force: true'
        fi
        log "Shutting down MongoDB ($args)..."
        mongo admin "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "db.shutdownServer({$args})"
    }

    my_hostname=$(hostname)
    log "Bootstrapping MongoDB replica set member: $my_hostname"

    log "Reading standard input..."
    while read -ra line; do
        if [[ "\${line}" == *"\${my_hostname}"* ]]; then
            service_name="$line"
            continue
        fi
        peers=("\${peers[@]}" "$line")
    done

    # Generate the ca cert
    ca_crt=/data/configdb/tls.crt
    if [ -f "$ca_crt"  ]; then
        log "Generating certificate"
        ca_key=/data/configdb/tls.key
        pem=/work-dir/mongo.pem
        ssl_args=(--ssl --sslCAFile "$ca_crt" --sslPEMKeyFile "$pem")

    # Move into /work-dir
    pushd /work-dir

    cat >openssl.cnf <<EOL
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = $(echo -n "$my_hostname" | sed s/-[0-9]*$//)
    DNS.2 = $my_hostname
    DNS.3 = $service_name
    DNS.4 = localhost
    DNS.5 = 127.0.0.1
    EOL

        # Generate the certs
        openssl genrsa -out mongo.key 2048
        openssl req -new -key mongo.key -out mongo.csr -subj "/CN=$my_hostname" -config openssl.cnf
        openssl x509 -req -in mongo.csr \\
            -CA "$ca_crt" -CAkey "$ca_key" -CAcreateserial \\
            -out mongo.crt -days 3650 -extensions v3_req -extfile openssl.cnf

        rm mongo.csr
        cat mongo.crt mongo.key > $pem
        rm mongo.key mongo.crt
    fi


    log "Peers: \${peers[*]}"

    log "Starting a MongoDB instance..."
    mongod --config /data/configdb/mongod.conf --dbpath="$DATA_PATH" --replSet="$REPLICA_SET" --port=$PORT "\${auth_args[@]}" --bind_ip=0.0.0.0 >> /work-dir/log.txt 2>&1 &

    log "Waiting for MongoDB to be ready..."
    until mongo "\${ssl_args[@]}" --eval "db.adminCommand('ping')"; do
        log "Retrying..."
        sleep 2
    done

    log "Initialized."

    # try to find a master and add yourself to its replica set.
    for peer in "\${peers[@]}"; do
        if mongo admin --host "$peer" "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "rs.isMaster()" | grep '"ismaster" : true'; then
            log "Found master: $peer"
            log "Adding myself ($service_name) to replica set..."
            if mongo admin --host "$peer" "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "rs.add('$service_name')" | grep 'Quorum check failed'; then
                log 'Quorum check failed, unable to join replicaset. Exiting prematurely.'
                shutdown_mongo
                exit 1
            fi

            sleep 3

            log 'Waiting for replica to reach SECONDARY state...'
            until printf '.' && [[ $(mongo admin "\${admin_creds[@]}" "\${ssl_args[@]}" --quiet --eval "rs.status().myState") == '2' ]]; do
                sleep 1
            done

            log '✓ Replica reached SECONDARY state.'

            shutdown_mongo "60"
            log "Good bye."
            exit 0
        fi
    done

    # else initiate a replica set with yourself.
    if mongo "\${ssl_args[@]}" --eval "rs.status()" | grep "no replset config has been received"; then
        log "Initiating a new replica set with myself ($service_name)..."
        mongo "\${ssl_args[@]}" --eval "rs.initiate({'_id': '$REPLICA_SET', 'members': [{'_id': 0, 'host': '$service_name'}]})"

        sleep 3

        log 'Waiting for replica to reach PRIMARY state...'
        until printf '.' && [[ $(mongo "\${ssl_args[@]}" --quiet --eval "rs.status().myState") == '1' ]]; do
            sleep 1
        done

        log '✓ Replica reached PRIMARY state.'

        log "Done."
    fi

    shutdown_mongo
    log "Good bye."
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  serviceName: msmongodb-mongodb
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb-mongodb
  template:
    metadata:
      labels:
        app: msmongodb-mongodb
    spec:
      initContainers:
        - name: config
          image: busybox
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x
              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
        - name: install
          image: "k8s.gcr.io/mongodb-install:0.6"
          args:
            - --work-dir=/work-dir
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
        - name: boot
          image: mongodb-placeholder
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - "-service=msmongodb-mongodb"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: "27017"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: mongodb
          image: mongodb-placeholder
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: "27017"
          ports:
            - name: peer
              containerPort: 27017
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=$(DATA_PATH)
            - --replSet=$(REPLICA_SET)
            - --port=$(PORT)
            - --bind_ip=0.0.0.0
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
      volumes:
        - name: config
          configMap:
            name: msmongodb-mongodb-config
        - name: workdir
          emptyDir: {}
        - name: init
          configMap:
            defaultMode: 0755
            name: msmongodb-mongodb-init
        - name: configdir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Headless service for DNS record
apiVersion: v1
kind: Service
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: peer
      port: 27017
  selector:
    app: msmongodb-mongodb
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmongodb
  namespace: default
  labels:
    app: msmongodb
spec:
  selector:
    app: msmongodb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmssqldb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmssqldb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmssqldb-app
          image: jhipster/msmssqldb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-mssql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmssqldb-mssql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb-mssql
  template:
    metadata:
      labels:
        app: msmssqldb-mssql
    spec:
      volumes:
        - name: mssqldb
          persistentVolumeClaim:
            claimName: mssql-data
        - name: data
          persistentVolumeClaim:
            claimName: msmssqldb-mssql-pvc
      containers:
        - name: mysql
          image: mssql-placeholder
          env:
            - name: MSSQL_PID
              value: "Express"
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql
                  key: SA_PASSWORD
          ports:
            - containerPort: 1433
          volumeMounts:
            - name: mssqldb
              mountPath: /var/opt/mssql
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"

---
apiVersion: v1
kind: Service
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  selector:
    app: msmssqldb-mssql
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433
  type: LoadBalancer
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mssql-data
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 8Gi
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmssqldb
  namespace: default
  labels:
    app: msmssqldb
spec:
  selector:
    app: msmssqldb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql
      version: "v1"
  template:
    metadata:
      labels:
        app: mspsql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mspsql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 mspsql-postgresql 5432)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: mspsql-app
          image: jhipster/mspsql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_DATASOURCE_USERNAME
              value: mspsql
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-elasticsearch.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-elasticsearch-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-elasticsearch-pvc
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-postgresql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mspsql-postgresql
  namespace: default
  labels:
    app: mspsql-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-postgresql
  template:
    metadata:
      labels:
        app: mspsql-postgresql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-postgresql-pvc
      containers:
        - name: postgres
          image: postgresql-placeholder
          env:
            - name: POSTGRES_USER
              value: mspsql
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  selector:
    app: mspsql-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: mspsql
  namespace: default
  labels:
    app: mspsql
spec:
  selector:
    app: mspsql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
    - image: jhipster/mspsql
      context: ./03-psql
      jib: {}
    - image: jhipster/msmongodb
      context: ./04-mongo
      jib: {}
    - image: jhipster/msmariadb
      context: ./07-mariadb
      jib: {}
    - image: jhipster/msmssqldb
      context: ./11-mssql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes only gateway should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipsterrepository",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "jhipsternamespace",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["01-gateway"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipsterrepository/jhgate
$ docker push jhipsterrepository/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate -n jhipsternamespace
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count> -n jhipsternamespace
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>  -n jhipsternamespace
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipsterrepository/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.jhipsternamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: jhipsternamespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: jhipsternamespace
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f namespace.yml
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

namespace: jhipsternamespace

resources:
  - namespace.yml
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: jhipsternamespace
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: jhipsternamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.jhipsternamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: jhipsternamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - jhipsternamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.jhipsternamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipsterrepository/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes only gateway with eureka should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipsterrepository",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "jhipsternamespace",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "packages": ["01-gateway"],
    "serviceDiscoveryType": "eureka"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipsterrepository/jhgate
$ docker push jhipsterrepository/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate -n jhipsternamespace
\`\`\`

## Scaling your deployments

You can scale your apps using

\`\`\`
$ kubectl scale deployment <app-name> --replicas <replica-count> -n jhipsternamespace
\`\`\`

## zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using

\`\`\`
$ kubectl set image deployment/<app-name>-app <app-name>=<new-image>  -n jhipsternamespace
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availablity of your services. You will need minimum 2 replicas for every application deployment if you want to have zero-downtime deployed.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## JHipster registry

The registry is deployed using a headless service in kubernetes, so the primary service has no IP address, and cannot get a node port. You can create a secondary service for any type, using:

\`\`\`
$ kubectl expose service jhipster-registry --type=NodePort --name=exposed-registry -n jhipsternamespace
\`\`\`

and explore the details using

\`\`\`
$ kubectl get svc exposed-registry -n jhipsternamespace
\`\`\`

For scaling the JHipster registry, use

\`\`\`
$ kubectl scale statefulset jhipster-registry --replicas 3 -n jhipsternamespace
\`\`\`

## Troubleshooting

> my apps doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipsterrepository/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONFIG_URI
              value: http://admin:\${jhipster.registry.password}@jhipster-registry.jhipsternamespace.svc.cluster.local:8761/config
            - name: JHIPSTER_REGISTRY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: http://admin:\${jhipster.registry.password}@jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: jhipsternamespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: jhipsternamespace
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f namespace.yml
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

namespace: jhipsternamespace

resources:
  - namespace.yml
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  # service discovery eureka/consul
  - registry-k8s/jhipster-registry.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: jhipsternamespace
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: jhipsternamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-k8s/jhipster-registry.yml": {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: jhipsternamespace
type: Opaque
data:
  registry-admin-password: bWVldHVw # base64 encoded "meetup"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: jhipsternamespace
  labels:
    app: jhipster-registry
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: jhipsternamespace
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: "1.0"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: "1.0"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster-registry-placeholder
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: "15"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: "30"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: "15000"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: "15000"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: "3"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: "false"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: "2000"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: K8S_CONFIG_PATH
              value: "/central-config/"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipsterrepository/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator - Kubernetes Helm Kafka application should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["09-kafka"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "no",
    "packages": ["09-kafka"],
    "serviceDiscoveryType": false
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag samplekafka jhipster/samplekafka
$ docker push jhipster/samplekafka
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: kafka
  version: ^0.20.1
  repository: https://charts.helm.sh/incubator
  condition: kafka.enabled
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: kafka
    version: ^0.20.1
    repository: https://charts.helm.sh/incubator
    condition: kafka.enabled
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
Kafka and zookeeper customisation
*/}}
{{- define "kafka.name" -}}
{{- default "jhipster-kafka" -}}
{{- end -}}

{{- define "kafka.fullname" -}}
{{- default "jhipster-kafka" -}}
{{- end -}}

{{- define "zookeeper.name" -}}
{{- default "jhipster-zookeeper" -}}
{{- end -}}

{{- define "zookeeper.fullname" -}}
{{- default "jhipster-zookeeper" -}}
{{- end -}}

{{- define "kafka.zookeeper.fullname" -}}
{{- default "jhipster-zookeeper" -}}
{{- end -}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "kafka:
  enabled: true
  replicas: 3
  zookeeper:
    enabled: true
    replicas: 3
",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall samplekafka 2>/dev/null
  else
helm delete --purge samplekafka 2>/dev/null
  fi
helm dep up ./samplekafka-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install samplekafka  ./samplekafka-\${suffix} --replace --namespace default
  else
helm install --name samplekafka  ./samplekafka-\${suffix} --replace --namespace default
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./samplekafka-\${suffix}
helm upgrade --install samplekafka ./samplekafka-\${suffix} --namespace default


",
    "stateCleared": "modified",
  },
  "samplekafka-helm/Chart.yaml": {
    "contents": "name: samplekafka
version: 1.0.0
appVersion: 1.0.0
description: samplekafka is a JHipster based monolith application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- samplekafka
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "samplekafka-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "samplekafka-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "samplekafka-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "samplekafka-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "samplekafka-helm/templates/samplekafka-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplekafka
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplekafka
      version: "v1"
  template:
    metadata:
      labels:
        app: samplekafka
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - samplekafka
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 samplekafka-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: samplekafka-app
          image: jhipster/samplekafka
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://samplekafka-mysql.default.svc.cluster.local:3306/samplekafka?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://samplekafka-mysql.default.svc.cluster.local:3306/samplekafka?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: KAFKA_CONSUMER_KEY_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_CONSUMER_VALUE_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_CONSUMER_BOOTSTRAP_SERVERS
              value: "jhipster-kafka.default.svc.cluster.local:9092"
            - name: KAFKA_CONSUMER_GROUP_ID
              value: "samplekafka"
            - name: KAFKA_CONSUMER_AUTO_OFFSET_RESET
              value: "earliest"
            - name: KAFKA_PRODUCER_BOOTSTRAP_SERVERS
              value: "jhipster-kafka.default.svc.cluster.local:9092"
            - name: KAFKA_PRODUCER_KEY_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_PRODUCER_VALUE_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "samplekafka-helm/templates/samplekafka-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: samplekafka
  namespace: default
  labels:
    app: samplekafka
spec:
  selector:
    app: samplekafka
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
",
    "stateCleared": "modified",
  },
  "samplekafka-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: samplekafka
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm MySQL and PostgreSQL microservices without gateway should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql", "03-psql"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "no",
    "packages": ["02-mysql", "03-psql"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
$ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
  else
helm delete --purge msmysql 2>/dev/null
  fi
helm dep up ./msmysql-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace default
  else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace default
  fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall mspsql 2>/dev/null
  else
helm delete --purge mspsql 2>/dev/null
  fi
helm dep up ./mspsql-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install mspsql  ./mspsql-\${suffix} --replace --namespace default
  else
helm install --name mspsql  ./mspsql-\${suffix} --replace --namespace default
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace default
helm dep up ./mspsql-\${suffix}
helm upgrade --install mspsql ./mspsql-\${suffix} --namespace default


",
    "stateCleared": "modified",
  },
  "msmysql-helm/Chart.yaml": {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "mspsql-helm/Chart.yaml": {
    "contents": "name: mspsql
version: 1.0.0
appVersion: 1.0.0
description: mspsql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- mspsql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: postgresql
  version: ^6.5.3
  repository: https://charts.bitnami.com/bitnami
  condition: postgresql.enabled
",
    "stateCleared": "modified",
  },
  "mspsql-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: postgresql
    version: ^6.5.3
    repository: https://charts.bitnami.com/bitnami
    condition: postgresql.enabled
",
    "stateCleared": "modified",
  },
  "mspsql-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
postgresql customisation
*/}}
{{- define "postgresql.name" -}}
{{- default "mspsql-postgresql" -}}
{{- end -}}

{{- define "postgresql.fullname" -}}
{{- default "mspsql-postgresql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "mspsql-helm/templates/mspsql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql
      version: "v1"
  template:
    metadata:
      labels:
        app: mspsql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mspsql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 mspsql-postgresql 5432)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: mspsql-app
          image: jhipster/mspsql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_DATASOURCE_USERNAME
              value: mspsql
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "mspsql-helm/templates/mspsql-elasticsearch.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-helm/templates/mspsql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: mspsql
  namespace: default
  labels:
    app: mspsql
spec:
  selector:
    app: mspsql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "mspsql-helm/values.yaml": {
    "contents": "postgresql:
  enabled: true
  postgresqlUsername: mspsql
  postgresqlDatabase: mspsql
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm gateway and ingress should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "example.com",
    "ingressType": "gke",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "Ingress",
    "monitoring": "no",
    "packages": ["01-gateway"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
  else
helm delete --purge jhgate 2>/dev/null
  fi
helm dep up ./jhgate-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace default
  else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace default
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace default


",
    "stateCleared": "modified",
  },
  "jhgate-helm/Chart.yaml": {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-ingress.yml": {
    "contents": "apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jhgate
  namespace: default
spec:
  ingressClassName: gke
  rules:
    - host: jhgate.default.example.com
      http:
        paths:
          - path: /*
            pathType: Prefix
            backend:
              service:
                name: jhgate
                port:
                  name: http
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: NodePort
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "jhgate-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm gateway and mysql microservice should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway", "02-mysql"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "no",
    "packages": ["01-gateway", "02-mysql"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
  else
helm delete --purge jhgate 2>/dev/null
  fi
helm dep up ./jhgate-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace default
  else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace default
  fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
  else
helm delete --purge msmysql 2>/dev/null
  fi
helm dep up ./msmysql-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace default
  else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace default
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace default
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace default


",
    "stateCleared": "modified",
  },
  "jhgate-helm/Chart.yaml": {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "jhgate-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "msmysql-helm/Chart.yaml": {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm gateway with istio should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "example.com",
    "istio": true,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "no",
    "packages": ["01-gateway"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/grafana-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.example.com
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/kiali-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.example.com
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/zipkin-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.example.com
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
kubectl label namespace default istio-injection=enabled
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
  else
helm delete --purge jhgate 2>/dev/null
  fi
helm dep up ./jhgate-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace default
  else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace default
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace default


",
    "stateCleared": "modified",
  },
  "jhgate-helm/Chart.yaml": {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_PREFER_IP_ADDRESS
              value: "false"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME
              value: jhgate
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_SERVICE_NAME
              value: jhgate
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-destination-rule.yml": {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: "v1"
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.example.com
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type:
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-virtual-service.yml": {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  hosts:
    - jhgate
  http:
    - route:
        - destination:
            host: jhgate
            subset: "v1"
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "jhgate-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: "false"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm gateway, mysql, psql, mongodb, mariadb microservices should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": [
      "01-gateway",
      "02-mysql",
      "03-psql",
      "04-mongo",
      "07-mariadb"
    ],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": [],
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "no",
    "packages": ["01-gateway", "02-mysql", "03-psql", "04-mongo", "07-mariadb"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
$ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
$ docker image tag msmongodb jhipster/msmongodb
$ docker push jhipster/msmongodb
$ docker image tag msmariadb jhipster/msmariadb
$ docker push jhipster/msmariadb
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
  else
helm delete --purge jhgate 2>/dev/null
  fi
helm dep up ./jhgate-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace default
  else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace default
  fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
  else
helm delete --purge msmysql 2>/dev/null
  fi
helm dep up ./msmysql-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace default
  else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace default
  fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall mspsql 2>/dev/null
  else
helm delete --purge mspsql 2>/dev/null
  fi
helm dep up ./mspsql-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install mspsql  ./mspsql-\${suffix} --replace --namespace default
  else
helm install --name mspsql  ./mspsql-\${suffix} --replace --namespace default
  fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall msmongodb 2>/dev/null
  else
helm delete --purge msmongodb 2>/dev/null
  fi
helm dep up ./msmongodb-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install msmongodb  ./msmongodb-\${suffix} --replace --namespace default
  else
helm install --name msmongodb  ./msmongodb-\${suffix} --replace --namespace default
  fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall msmariadb 2>/dev/null
  else
helm delete --purge msmariadb 2>/dev/null
  fi
helm dep up ./msmariadb-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install msmariadb  ./msmariadb-\${suffix} --replace --namespace default
  else
helm install --name msmariadb  ./msmariadb-\${suffix} --replace --namespace default
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace default
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace default
helm dep up ./mspsql-\${suffix}
helm upgrade --install mspsql ./mspsql-\${suffix} --namespace default
helm dep up ./msmongodb-\${suffix}
helm upgrade --install msmongodb ./msmongodb-\${suffix} --namespace default
helm dep up ./msmariadb-\${suffix}
helm upgrade --install msmariadb ./msmariadb-\${suffix} --namespace default


",
    "stateCleared": "modified",
  },
  "jhgate-helm/Chart.yaml": {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "jhgate-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "msmariadb-helm/Chart.yaml": {
    "contents": "name: msmariadb
version: 1.0.0
appVersion: 1.0.0
description: msmariadb is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmariadb
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mariadb
  version: ^6.12.2
  repository: https://charts.bitnami.com/bitnami
  condition: mariadb.enabled
",
    "stateCleared": "modified",
  },
  "msmariadb-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mariadb
    version: ^6.12.2
    repository: https://charts.bitnami.com/bitnami
    condition: mariadb.enabled
",
    "stateCleared": "modified",
  },
  "msmariadb-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mariadb customisation
*/}}
{{- define "mariadb.name" -}}
{{- default "msmariadb-mariadb" -}}
{{- end -}}

{{- define "mariadb.fullname" -}}
{{- default "msmariadb-mariadb" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmariadb-helm/templates/msmariadb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmariadb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmariadb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmariadb-mariadb 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmariadb-app
          image: jhipster/msmariadb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false&serverTimezone=UTC
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false&serverTimezone=UTC
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmariadb-helm/templates/msmariadb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmariadb
  namespace: default
  labels:
    app: msmariadb
spec:
  selector:
    app: msmariadb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmariadb-helm/values.yaml": {
    "contents": "mariadb:
  enabled: true
  replication:
    enabled: false
  db:
    name: msmariadb
",
    "stateCleared": "modified",
  },
  "msmongodb-helm/Chart.yaml": {
    "contents": "name: msmongodb
version: 1.0.0
appVersion: 1.0.0
description: msmongodb is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmongodb
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mongodb-replicaset
  version: ^3.10.1
  repository: https://charts.helm.sh/stable
  condition: mongodb.enabled
",
    "stateCleared": "modified",
  },
  "msmongodb-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mongodb-replicaset
    version: ^3.10.1
    repository: https://charts.helm.sh/stable
    condition: mongodb.enabled
",
    "stateCleared": "modified",
  },
  "msmongodb-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mongodb customisation
*/}}
{{- define "mongodb-replicaset.name" -}}
{{- default "msmongodb-mongodb" -}}
{{- end -}}

{{- define "mongodb-replicaset.fullname" -}}
{{- default "msmongodb-mongodb" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmongodb-helm/templates/msmongodb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmongodb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmongodb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmongodb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmongodb-mongodb 27017)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmongodb-app
          image: jhipster/msmongodb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATA_MONGODB_DATABASE
              value: msmongodb
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://msmongodb-mongodb-0.msmongodb-mongodb.default:27017"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmongodb-helm/templates/msmongodb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmongodb
  namespace: default
  labels:
    app: msmongodb
spec:
  selector:
    app: msmongodb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmongodb-helm/values.yaml": {
    "contents": "mongodb:
  enabled: true
mongodb-replicaset:
  replicas: 3
",
    "stateCleared": "modified",
  },
  "msmysql-helm/Chart.yaml": {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "mspsql-helm/Chart.yaml": {
    "contents": "name: mspsql
version: 1.0.0
appVersion: 1.0.0
description: mspsql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- mspsql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: postgresql
  version: ^6.5.3
  repository: https://charts.bitnami.com/bitnami
  condition: postgresql.enabled
",
    "stateCleared": "modified",
  },
  "mspsql-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: postgresql
    version: ^6.5.3
    repository: https://charts.bitnami.com/bitnami
    condition: postgresql.enabled
",
    "stateCleared": "modified",
  },
  "mspsql-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
postgresql customisation
*/}}
{{- define "postgresql.name" -}}
{{- default "mspsql-postgresql" -}}
{{- end -}}

{{- define "postgresql.fullname" -}}
{{- default "mspsql-postgresql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "mspsql-helm/templates/mspsql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql
      version: "v1"
  template:
    metadata:
      labels:
        app: mspsql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mspsql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 mspsql-postgresql 5432)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: mspsql-app
          image: jhipster/mspsql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_DATASOURCE_USERNAME
              value: mspsql
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "mspsql-helm/templates/mspsql-elasticsearch.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-helm/templates/mspsql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: mspsql
  namespace: default
  labels:
    app: mspsql
spec:
  selector:
    app: mspsql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "mspsql-helm/values.yaml": {
    "contents": "postgresql:
  enabled: true
  postgresqlUsername: mspsql
  postgresqlDatabase: mspsql
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm monolith application should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["08-monolith"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "no",
    "packages": ["08-monolith"],
    "serviceDiscoveryType": false
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag samplemysql jhipster/samplemysql
$ docker push jhipster/samplemysql
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall samplemysql 2>/dev/null
  else
helm delete --purge samplemysql 2>/dev/null
  fi
helm dep up ./samplemysql-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install samplemysql  ./samplemysql-\${suffix} --replace --namespace default
  else
helm install --name samplemysql  ./samplemysql-\${suffix} --replace --namespace default
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./samplemysql-\${suffix}
helm upgrade --install samplemysql ./samplemysql-\${suffix} --namespace default


",
    "stateCleared": "modified",
  },
  "samplemysql-helm/Chart.yaml": {
    "contents": "name: samplemysql
version: 1.0.0
appVersion: 1.0.0
description: samplemysql is a JHipster based monolith application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- samplemysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "samplemysql-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "samplemysql-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "samplemysql-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "samplemysql-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "samplemysql-helm/templates/samplemysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplemysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplemysql
      version: "v1"
  template:
    metadata:
      labels:
        app: samplemysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - samplemysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 samplemysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: samplemysql-app
          image: jhipster/samplemysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://samplemysql-mysql.default.svc.cluster.local:3306/samplemysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://samplemysql-mysql.default.svc.cluster.local:3306/samplemysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://samplemysql-elasticsearch.default.svc.cluster.local:9200
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "samplemysql-helm/templates/samplemysql-elasticsearch.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplemysql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplemysql-elasticsearch
  template:
    metadata:
      labels:
        app: samplemysql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: samplemysql-elasticsearch
  namespace: default
spec:
  selector:
    app: samplemysql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "samplemysql-helm/templates/samplemysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: samplemysql
  namespace: default
  labels:
    app: samplemysql
spec:
  selector:
    app: samplemysql
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
",
    "stateCleared": "modified",
  },
  "samplemysql-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: samplemysql
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm mysql microservice with custom namespace and jhipster prometheus monitoring should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "mynamespace",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "prometheus",
    "packages": ["02-mysql"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: prometheus
  version: ^9.2.0
  repository: https://prometheus-community.github.io/helm-charts
  condition: prometheus.enabled
- name: grafana
  version: ^4.0.0
  repository: https://grafana.github.io/helm-charts
  condition: prometheus.enabled
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: prometheus
    version: ^9.2.0
    repository: https://prometheus-community.github.io/helm-charts
    condition: prometheus.enabled
  - name: grafana
    version: ^4.0.0
    repository: https://grafana.github.io/helm-charts
    condition: prometheus.enabled
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
prometheus/grafana customisation
*/}}
{{- define "prometheus.name" -}}
{{- default "jhipster-prometheus" -}}
{{- end -}}

{{- define "prometheus.fullname" -}}
{{- default "jhipster-prometheus" -}}
{{- end -}}

{{- define "prometheus.server.fullname" -}}
{{- default "jhipster-prometheus" -}}
{{- end -}}

{{- define "prometheus.pushgateway.fullname" -}}
{{- default "jhipster-prometheus-pushgateway" -}}
{{- end -}}

{{- define "prometheus.nodeExporter.fullname" -}}
{{- default "jhipster-prometheus-nodeexporter" -}}
{{- end -}}

{{- define "prometheus.alertmanager.fullname" -}}
{{- default "jhipster-prometheus-alertmanager" -}}
{{- end -}}

{{- define "grafana.name" -}}
{{- default "jhipster-grafana" -}}
{{- end -}}

{{- define "grafana.fullname" -}}
{{- default "jhipster-grafana" -}}
{{- end -}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.mynamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: mynamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - mynamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.mynamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "prometheus:
  enabled: true
  server:
    name: jhipster-prometheus
    service:
      servicePort: 9090
  nodeExporter:
    enabled: false
  kubeStateMetrics:
    enabled: false
  pushgateway:
    enabled: false
grafana:
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
      - name: prometheus
        type: prometheus
        url: http://jhipster-prometheus:9090
        access: proxy
        isDefault: true
        basicAuth: false
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
      - name: 'prometheus'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        editable: true
        options:
          path: /var/lib/grafana/dashboards/prometheus
  dashboards:
    prometheus:
      prometheus-dashboard:
        json: |-
            {
                "__inputs": [
                    {
                        "name": "DS_PROMETHEUS",
                        "label": "prometheus",
                        "description": "",
                        "type": "datasource",
                        "pluginId": "prometheus",
                        "pluginName": "Prometheus"
                    }
                ],
                "__requires": [
                    {
                        "type": "grafana",
                        "id": "grafana",
                        "name": "Grafana",
                        "version": "5.0.4"
                    },
                    {
                        "type": "panel",
                        "id": "graph",
                        "name": "Graph",
                        "version": ""
                    },
                    {
                        "type": "datasource",
                        "id": "prometheus",
                        "name": "Prometheus",
                        "version": "5.0.0"
                    },
                    {
                        "type": "panel",
                        "id": "singlestat",
                        "name": "Singlestat",
                        "version": ""
                    }
                ],
                "annotations": {
                    "list": [
                        {
                            "builtIn": 1,
                            "datasource": "-- Grafana --",
                            "enable": true,
                            "hide": true,
                            "iconColor": "rgba(0, 211, 255, 1)",
                            "name": "Annotations & Alerts",
                            "type": "dashboard"
                        }
                    ]
                },
                "description": "JHipster metrics",
                "editable": true,
                "gnetId": 3308,
                "graphTooltip": 0,
                "hideControls": false,
                "id": null,
                "links": [],
                "refresh": false,
                "rows": [
                    {
                        "collapse": false,
                        "height": "250px",
                        "panels": [
                            {
                                "cacheTimeout": null,
                                "colorBackground": false,
                                "colorValue": false,
                                "colors": [
                                    "rgba(245, 54, 54, 0.9)",
                                    "rgba(237, 129, 40, 0.89)",
                                    "rgba(50, 172, 45, 0.97)"
                                ],
                                "datasource": "prometheus",
                                "decimals": null,
                                "description": "Service status",
                                "format": "none",
                                "gauge": {
                                    "maxValue": 1,
                                    "minValue": 0,
                                    "show": true,
                                    "thresholdLabels": false,
                                    "thresholdMarkers": true
                                },
                                "height": "",
                                "id": 1,
                                "interval": null,
                                "links": [],
                                "mappingType": 1,
                                "mappingTypes": [
                                    {
                                        "name": "value to text",
                                        "value": 1
                                    },
                                    {
                                        "name": "range to text",
                                        "value": 2
                                    }
                                ],
                                "maxDataPoints": 100,
                                "nullPointMode": "connected",
                                "nullText": null,
                                "postfix": "",
                                "postfixFontSize": "50%",
                                "prefix": "",
                                "prefixFontSize": "100%",
                                "rangeMaps": [
                                    {
                                        "from": "null",
                                        "text": "N/A",
                                        "to": "null"
                                    }
                                ],
                                "span": 4,
                                "sparkline": {
                                    "fillColor": "rgba(31, 118, 189, 0.18)",
                                    "full": false,
                                    "lineColor": "rgb(31, 120, 193)",
                                    "show": false
                                },
                                "tableColumn": "Value",
                                "targets": [
                                    {
                                        "expr": "up{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "table",
                                        "intervalFactor": 2,
                                        "refId": "A",
                                        "step": 20,
                                        "metric": "up",
                                        "legendFormat": "service"
                                    }
                                ],
                                "thresholds": "0",
                                "title": "Service Status Now",
                                "type": "singlestat",
                                "valueFontSize": "120%",
                                "valueMaps": [
                                    {
                                        "op": "=",
                                        "text": "Down",
                                        "value": "0"
                                    },
                                    {
                                        "value": "1",
                                        "op": "=",
                                        "text": "Up"
                                    }
                                ],
                                "valueName": "current",
                                "hideTimeOverride": false,
                                "minSpan": null,
                                "repeat": null,
                                "transparent": false
                            },
                            {
                                "id": 29,
                                "title": "Service Uptime",
                                "span": 8,
                                "type": "graph",
                                "targets": [
                                    {
                                        "refId": "A",
                                        "expr": "up{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "step": 2,
                                        "legendFormat": "{{pod}}"
                                    }
                                ],
                                "datasource": "prometheus",
                                "renderer": "flot",
                                "yaxes": [
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": "1",
                                        "format": "short"
                                    },
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": "1",
                                        "format": "short"
                                    }
                                ],
                                "xaxis": {
                                    "show": true,
                                    "mode": "time",
                                    "name": null,
                                    "values": [],
                                    "buckets": null
                                },
                                "lines": true,
                                "fill": 1,
                                "linewidth": 1,
                                "dashes": false,
                                "dashLength": 10,
                                "spaceLength": 10,
                                "points": true,
                                "pointradius": 3,
                                "bars": false,
                                "stack": false,
                                "percentage": false,
                                "legend": {
                                    "show": true,
                                    "values": false,
                                    "min": false,
                                    "max": false,
                                    "current": false,
                                    "total": false,
                                    "avg": false,
                                    "alignAsTable": true
                                },
                                "nullPointMode": "null",
                                "steppedLine": true,
                                "tooltip": {
                                    "value_type": "individual",
                                    "shared": true,
                                    "sort": 0
                                },
                                "timeFrom": null,
                                "timeShift": null,
                                "aliasColors": {},
                                "seriesOverrides": [],
                                "thresholds": [],
                                "links": [],
                                "description": "The uptime of the service"
                            }
                        ],
                        "repeat": null,
                        "repeatIteration": null,
                        "repeatRowId": null,
                        "showTitle": true,
                        "title": "Uptime Metrics",
                        "titleSize": "h6"
                    },
                    {
                        "collapse": false,
                        "height": 250,
                        "panels": [
                            {
                                "cacheTimeout": null,
                                "colorBackground": false,
                                "colorValue": true,
                                "colors": [
                                    "rgba(32, 176, 9, 0.9)",
                                    "rgba(237, 129, 40, 0.89)",
                                    "rgba(50, 172, 45, 0.97)"
                                ],
                                "datasource": "prometheus",
                                "description": "Total requests count",
                                "format": "none",
                                "gauge": {
                                    "maxValue": 10000000000000,
                                    "minValue": 0,
                                    "show": true,
                                    "thresholdLabels": false,
                                    "thresholdMarkers": true
                                },
                                "id": 5,
                                "interval": null,
                                "links": [],
                                "mappingType": 1,
                                "mappingTypes": [
                                    {
                                        "name": "value to text",
                                        "value": 1
                                    },
                                    {
                                        "name": "range to text",
                                        "value": 2
                                    }
                                ],
                                "maxDataPoints": 100,
                                "nullPointMode": "connected",
                                "nullText": null,
                                "postfix": "",
                                "postfixFontSize": "50%",
                                "prefix": "",
                                "prefixFontSize": "50%",
                                "rangeMaps": [
                                    {
                                        "from": "null",
                                        "text": "N/A",
                                        "to": "null"
                                    }
                                ],
                                "span": 3,
                                "sparkline": {
                                    "fillColor": "rgba(31, 118, 189, 0.18)",
                                    "full": false,
                                    "lineColor": "rgb(31, 120, 193)",
                                    "show": false
                                },
                                "tableColumn": "Value",
                                "targets": [
                                    {
                                        "expr": "com_codahale_metrics_servlet_InstrumentedFilter_requests_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "table",
                                        "intervalFactor": 2,
                                        "refId": "A",
                                        "step": 20,
                                        "metric": "com_codahale_metrics_servlet_InstrumentedFilter_requests_count"
                                    }
                                ],
                                "thresholds": "",
                                "title": "Total Requests",
                                "type": "singlestat",
                                "valueFontSize": "70%",
                                "valueMaps": [
                                    {
                                        "op": "=",
                                        "text": "N/A",
                                        "value": "null"
                                    }
                                ],
                                "valueName": "total",
                                "transparent": false
                            },
                            {
                                "cacheTimeout": null,
                                "colorBackground": false,
                                "colorValue": false,
                                "colors": [
                                    "rgba(245, 54, 54, 0.9)",
                                    "rgba(237, 129, 40, 0.89)",
                                    "rgba(50, 172, 45, 0.97)"
                                ],
                                "datasource": "prometheus",
                                "description": "Number of 200 OK requests",
                                "format": "none",
                                "gauge": {
                                    "maxValue": 10000000000000000,
                                    "minValue": 0,
                                    "show": true,
                                    "thresholdLabels": false,
                                    "thresholdMarkers": true
                                },
                                "id": 6,
                                "interval": null,
                                "links": [],
                                "mappingType": 1,
                                "mappingTypes": [
                                    {
                                        "name": "value to text",
                                        "value": 1
                                    },
                                    {
                                        "name": "range to text",
                                        "value": 2
                                    }
                                ],
                                "maxDataPoints": 100,
                                "nullPointMode": "connected",
                                "nullText": null,
                                "postfix": "",
                                "postfixFontSize": "50%",
                                "prefix": "",
                                "prefixFontSize": "50%",
                                "rangeMaps": [
                                    {
                                        "from": "null",
                                        "text": "N/A",
                                        "to": "null"
                                    }
                                ],
                                "span": 3,
                                "sparkline": {
                                    "fillColor": "rgba(31, 118, 189, 0.78)",
                                    "full": false,
                                    "lineColor": "rgb(31, 120, 193)",
                                    "show": true
                                },
                                "tableColumn": "Value",
                                "targets": [
                                    {
                                        "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "table",
                                        "intervalFactor": 2,
                                        "legendFormat": "",
                                        "refId": "A",
                                        "step": 20,
                                        "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total"
                                    }
                                ],
                                "thresholds": "",
                                "title": "Total Successful hits",
                                "type": "singlestat",
                                "valueFontSize": "80%",
                                "valueMaps": [
                                    {
                                        "op": "=",
                                        "text": "N/A",
                                        "value": "null"
                                    }
                                ],
                                "valueName": "total"
                            },
                            {
                                "cacheTimeout": null,
                                "colorBackground": false,
                                "colorValue": false,
                                "colors": [
                                    "rgba(245, 54, 54, 0.9)",
                                    "rgba(237, 129, 40, 0.89)",
                                    "rgba(50, 172, 45, 0.97)"
                                ],
                                "datasource": "prometheus",
                                "description": "Number of server errors and bad requests",
                                "format": "none",
                                "gauge": {
                                    "maxValue": 1,
                                    "minValue": 0,
                                    "show": true,
                                    "thresholdLabels": false,
                                    "thresholdMarkers": true
                                },
                                "id": 7,
                                "interval": null,
                                "links": [],
                                "mappingType": 1,
                                "mappingTypes": [
                                    {
                                        "name": "value to text",
                                        "value": 1
                                    },
                                    {
                                        "name": "range to text",
                                        "value": 2
                                    }
                                ],
                                "maxDataPoints": 100,
                                "nullPointMode": "connected",
                                "nullText": null,
                                "postfix": "",
                                "postfixFontSize": "50%",
                                "prefix": "",
                                "prefixFontSize": "50%",
                                "rangeMaps": [
                                    {
                                        "from": "null",
                                        "text": "N/A",
                                        "to": "null"
                                    }
                                ],
                                "span": 3,
                                "sparkline": {
                                    "fillColor": "rgba(31, 118, 189, 0.18)",
                                    "full": false,
                                    "lineColor": "rgb(31, 120, 193)",
                                    "show": false
                                },
                                "tableColumn": "Value",
                                "targets": [
                                    {
                                        "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total{namespace =\\"$namespace\\", service =\\"$service_name\\"} + com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_badRequest_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "refId": "A",
                                        "step": 20,
                                        "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total"
                                    }
                                ],
                                "thresholds": "1",
                                "title": "Total Bad hits",
                                "type": "singlestat",
                                "valueFontSize": "70%",
                                "valueMaps": [
                                    {
                                        "op": "=",
                                        "text": "N/A",
                                        "value": "null"
                                    }
                                ],
                                "valueName": "total"
                            },
                            {
                                "cacheTimeout": null,
                                "colorBackground": false,
                                "colorValue": false,
                                "colors": [
                                    "rgba(245, 54, 54, 0.9)",
                                    "rgba(237, 129, 40, 0.89)",
                                    "rgba(50, 172, 45, 0.97)"
                                ],
                                "datasource": "prometheus",
                                "description": "Number of 404 not found requests",
                                "format": "none",
                                "gauge": {
                                    "maxValue": 1,
                                    "minValue": 0,
                                    "show": true,
                                    "thresholdLabels": false,
                                    "thresholdMarkers": true
                                },
                                "id": 8,
                                "interval": null,
                                "links": [],
                                "mappingType": 1,
                                "mappingTypes": [
                                    {
                                        "name": "value to text",
                                        "value": 1
                                    },
                                    {
                                        "name": "range to text",
                                        "value": 2
                                    }
                                ],
                                "maxDataPoints": 100,
                                "nullPointMode": "connected",
                                "nullText": null,
                                "postfix": "",
                                "postfixFontSize": "50%",
                                "prefix": "",
                                "prefixFontSize": "50%",
                                "rangeMaps": [
                                    {
                                        "from": "null",
                                        "text": "N/A",
                                        "to": "null"
                                    }
                                ],
                                "span": 3,
                                "sparkline": {
                                    "fillColor": "rgba(31, 118, 189, 0.18)",
                                    "full": false,
                                    "lineColor": "rgb(31, 120, 193)",
                                    "show": false
                                },
                                "tableColumn": "",
                                "targets": [
                                    {
                                        "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "refId": "A",
                                        "step": 20,
                                        "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total"
                                    }
                                ],
                                "thresholds": "1",
                                "title": "Trace 404 hits",
                                "type": "singlestat",
                                "valueFontSize": "80%",
                                "valueMaps": [
                                    {
                                        "op": "=",
                                        "text": "N/A",
                                        "value": "null"
                                    }
                                ],
                                "valueName": "total"
                            },
                            {
                                "id": 30,
                                "title": "Active Requests",
                                "span": 12,
                                "type": "graph",
                                "targets": [
                                    {
                                        "refId": "A",
                                        "expr": "com_codahale_metrics_servlet_InstrumentedFilter_activeRequests{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "metric": "com_codahale_metrics_servlet_InstrumentedFilter_activeRequests",
                                        "step": 2,
                                        "legendFormat": "{{service}}"
                                    }
                                ],
                                "datasource": "prometheus",
                                "renderer": "flot",
                                "yaxes": [
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": null,
                                        "max": null,
                                        "format": "short"
                                    },
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": null,
                                        "max": null,
                                        "format": "short"
                                    }
                                ],
                                "xaxis": {
                                    "show": true,
                                    "mode": "time",
                                    "name": null,
                                    "values": [
                                        "total"
                                    ],
                                    "buckets": null
                                },
                                "lines": true,
                                "fill": 1,
                                "linewidth": 2,
                                "dashes": false,
                                "dashLength": 10,
                                "spaceLength": 10,
                                "points": false,
                                "pointradius": 5,
                                "bars": false,
                                "stack": false,
                                "percentage": false,
                                "legend": {
                                    "show": true,
                                    "values": true,
                                    "min": true,
                                    "max": true,
                                    "current": true,
                                    "total": false,
                                    "avg": true,
                                    "alignAsTable": true
                                },
                                "nullPointMode": "null",
                                "steppedLine": false,
                                "tooltip": {
                                    "value_type": "individual",
                                    "shared": false,
                                    "sort": 0
                                },
                                "timeFrom": null,
                                "timeShift": null,
                                "aliasColors": {},
                                "seriesOverrides": [],
                                "thresholds": [],
                                "links": []
                            }
                        ],
                        "repeat": null,
                        "repeatIteration": null,
                        "repeatRowId": null,
                        "showTitle": true,
                        "title": "Requests Metrics",
                        "titleSize": "h6"
                    },
                    {
                        "collapse": false,
                        "height": 250,
                        "panels": [
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "The current number of live threads including daemon and non-daemon and runnable threads",
                                "fill": 4,
                                "id": 10,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true,
                                    "rightSide": false,
                                    "hideEmpty": false
                                },
                                "lines": true,
                                "linewidth": 2,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": true,
                                "targets": [
                                    {
                                        "expr": "jvm_threads_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Total threads",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_threads_count"
                                    },
                                    {
                                        "expr": "jvm_threads_daemon_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "B",
                                        "metric": "jvm_threads_daemon_count",
                                        "step": 4,
                                        "legendFormat": "Daemon threads"
                                    },
                                    {
                                        "expr": "jvm_threads_runnable_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "C",
                                        "metric": "jvm_threads_runnable_count",
                                        "step": 4,
                                        "legendFormat": "Runnable threads"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Live Threads",
                                "tooltip": {
                                    "shared": false,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": [
                                        "total"
                                    ]
                                },
                                "yaxes": [
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    },
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    }
                                ],
                                "transparent": false
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "The current number of blocked and deadlock threads",
                                "fill": 1,
                                "id": 11,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_threads_blocked_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Blocked threads",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_threads_blocked_count"
                                    },
                                    {
                                        "expr": "jvm_threads_deadlock_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "B",
                                        "metric": "jvm_threads_deadlock_count",
                                        "step": 4,
                                        "legendFormat": "Deadlock threads"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Blocked and Deadlock Threads",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    },
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    }
                                ]
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "The current number of waiting threads",
                                "fill": 1,
                                "id": 12,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_threads_waiting_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Waiting threads",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_threads_waiting_count"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Waiting Threads",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    },
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    }
                                ]
                            }
                        ],
                        "repeat": null,
                        "repeatIteration": null,
                        "repeatRowId": null,
                        "showTitle": true,
                        "title": "Thread Metrics",
                        "titleSize": "h6"
                    },
                    {
                        "collapse": false,
                        "height": 250,
                        "panels": [
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "An estimate of the number of buffers in the pool",
                                "fill": 1,
                                "id": 13,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_buffers_direct_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "{{service}}",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_buffers_direct_count"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Buffer Count",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    },
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    }
                                ]
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "An estimate of the memory that the Java virtual machine is using for this buffer pool",
                                "fill": 1,
                                "id": 14,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_buffers_direct_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "{{service}}",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_buffers_direct_used"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Buffer Mem Used",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    },
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    }
                                ]
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "An estimate of the total capacity of the buffers in this pool",
                                "fill": 1,
                                "id": 15,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": false,
                                    "current": true,
                                    "max": false,
                                    "min": false,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_buffers_direct_capacity{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "{{service}}",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_buffers_direct_capacity"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Buffer Capacity",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    },
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    }
                                ]
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "The total amount of heap memory",
                                "fill": 1,
                                "id": 18,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_memory_heap_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Used",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_memory_heap_used"
                                    },
                                    {
                                        "expr": "jvm_memory_heap_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "B",
                                        "metric": "jvm_memory_heap_max",
                                        "step": 4,
                                        "legendFormat": "Maximum"
                                    },
                                    {
                                        "expr": "jvm_memory_heap_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "C",
                                        "metric": "jvm_memory_heap_committed",
                                        "step": 4,
                                        "legendFormat": "Committed"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Heap Memory",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    },
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    }
                                ]
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "The amount of used, committed and max memory",
                                "fill": 1,
                                "id": 16,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_memory_total_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Used",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_memory_total_used"
                                    },
                                    {
                                        "expr": "jvm_memory_total_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "B",
                                        "metric": "jvm_memory_total_max",
                                        "step": 4,
                                        "legendFormat": "Max"
                                    },
                                    {
                                        "expr": "jvm_memory_total_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "C",
                                        "metric": "jvm_memory_total_committed",
                                        "step": 4,
                                        "legendFormat": "Committed"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Total Memory",
                                "tooltip": {
                                    "shared": false,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": [
                                        "total"
                                    ]
                                },
                                "yaxes": [
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    },
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    }
                                ]
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "The total amount of  non heap memory",
                                "fill": 1,
                                "id": 17,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 4,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_memory_non_heap_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Non Heap Used",
                                        "refId": "A",
                                        "step": 4,
                                        "metric": "jvm_memory_non_heap_used"
                                    },
                                    {
                                        "expr": "jvm_memory_non_heap_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "B",
                                        "metric": "jvm_memory_non_heap_max",
                                        "step": 4,
                                        "legendFormat": "Non Heap Committed"
                                    },
                                    {
                                        "expr": "jvm_memory_pools_Metaspace_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "C",
                                        "metric": "jvm_memory_pools_Metaspace_used",
                                        "step": 4,
                                        "legendFormat": "Metaspace Used"
                                    },
                                    {
                                        "expr": "jvm_memory_pools_Code_Cache_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "D",
                                        "metric": "jvm_memory_pools_Code_Cache_used",
                                        "step": 4,
                                        "legendFormat": "Code Cache Used"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Other Memory",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    },
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    }
                                ]
                            }
                        ],
                        "repeat": null,
                        "repeatIteration": null,
                        "repeatRowId": null,
                        "showTitle": true,
                        "title": "Memory Metrics",
                        "titleSize": "h6"
                    },
                    {
                        "collapse": false,
                        "height": 250,
                        "panels": [
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "Memory space of new generation",
                                "fill": 2,
                                "id": 19,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 2,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 6,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_memory_pools_PS_Eden_Space_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Used",
                                        "refId": "A",
                                        "step": 2,
                                        "metric": "jvm_memory_pools_PS_Eden_Space_used"
                                    },
                                    {
                                        "expr": "jvm_memory_pools_PS_Eden_Space_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "B",
                                        "metric": "jvm_memory_pools_PS_Eden_Space_max",
                                        "step": 2,
                                        "legendFormat": "Max"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Eden Space",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    },
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    }
                                ]
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "Memory space of new generation",
                                "fill": 1,
                                "id": 20,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 6,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_memory_pools_PS_Survivor_Space_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Used",
                                        "refId": "A",
                                        "step": 2,
                                        "metric": "jvm_memory_pools_PS_Old_Gen_used"
                                    },
                                    {
                                        "expr": "jvm_memory_pools_PS_Survivor_Space_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "B",
                                        "metric": "",
                                        "step": 2,
                                        "legendFormat": "Max"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Survivor Space",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    },
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    }
                                ]
                            },
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "Memory space of old generation",
                                "fill": 1,
                                "id": 24,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 12,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "jvm_memory_pools_PS_Old_Gen_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "Used",
                                        "refId": "A",
                                        "step": 2,
                                        "metric": "jvm_memory_pools_PS_Old_Gen_used"
                                    },
                                    {
                                        "expr": "jvm_memory_pools_PS_Old_Gen_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "refId": "B",
                                        "step": 2,
                                        "legendFormat": "Max"
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "Old Generation",
                                "tooltip": {
                                    "shared": true,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": []
                                },
                                "yaxes": [
                                    {
                                        "format": "decbytes",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    },
                                    {
                                        "format": "s",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": null,
                                        "show": true
                                    }
                                ]
                            }
                        ],
                        "repeat": null,
                        "repeatIteration": null,
                        "repeatRowId": null,
                        "showTitle": true,
                        "title": "Memory Space Metrics",
                        "titleSize": "h6"
                    },
                    {
                        "collapse": false,
                        "height": 250,
                        "panels": [
                            {
                                "id": 31,
                                "title": "Cache Hits",
                                "span": 6,
                                "type": "graph",
                                "targets": [
                                    {
                                        "refId": "A",
                                        "expr": "{__name__=~\\"^jcache_statistics.*cache_hits\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "step": 2,
                                        "legendFormat": "{{__name__}}"
                                    }
                                ],
                                "datasource": "prometheus",
                                "renderer": "flot",
                                "yaxes": [
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": null,
                                        "format": "none"
                                    },
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": null,
                                        "format": "short"
                                    }
                                ],
                                "xaxis": {
                                    "show": true,
                                    "mode": "time",
                                    "name": null,
                                    "values": [
                                        "total"
                                    ],
                                    "buckets": null
                                },
                                "lines": true,
                                "fill": 1,
                                "linewidth": 1,
                                "dashes": false,
                                "dashLength": 10,
                                "spaceLength": 10,
                                "points": false,
                                "pointradius": 5,
                                "bars": false,
                                "stack": false,
                                "percentage": false,
                                "legend": {
                                    "show": true,
                                    "values": true,
                                    "min": true,
                                    "max": true,
                                    "current": true,
                                    "total": true,
                                    "avg": true,
                                    "alignAsTable": true
                                },
                                "nullPointMode": "null",
                                "steppedLine": false,
                                "tooltip": {
                                    "value_type": "individual",
                                    "shared": false,
                                    "sort": 0
                                },
                                "timeFrom": null,
                                "timeShift": null,
                                "aliasColors": {},
                                "seriesOverrides": [],
                                "thresholds": [],
                                "links": [],
                                "description": "The total number of cache hits"
                            },
                            {
                                "id": 32,
                                "title": "Cache Misses",
                                "span": 6,
                                "type": "graph",
                                "targets": [
                                    {
                                        "refId": "A",
                                        "expr": "{__name__=~\\"^jcache_statistics.*cache_misses\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "step": 2,
                                        "legendFormat": "{{__name__}}"
                                    }
                                ],
                                "datasource": "prometheus",
                                "renderer": "flot",
                                "yaxes": [
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": null,
                                        "format": "short"
                                    },
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": null,
                                        "format": "short"
                                    }
                                ],
                                "xaxis": {
                                    "show": true,
                                    "mode": "time",
                                    "name": null,
                                    "values": [],
                                    "buckets": null
                                },
                                "lines": true,
                                "fill": 1,
                                "linewidth": 1,
                                "dashes": false,
                                "dashLength": 10,
                                "spaceLength": 10,
                                "points": false,
                                "pointradius": 5,
                                "bars": false,
                                "stack": false,
                                "percentage": false,
                                "legend": {
                                    "show": true,
                                    "values": true,
                                    "min": true,
                                    "max": true,
                                    "current": true,
                                    "total": true,
                                    "avg": true,
                                    "alignAsTable": true
                                },
                                "nullPointMode": "null",
                                "steppedLine": false,
                                "tooltip": {
                                    "value_type": "individual",
                                    "shared": true,
                                    "sort": 0
                                },
                                "timeFrom": null,
                                "timeShift": null,
                                "aliasColors": {},
                                "seriesOverrides": [],
                                "thresholds": [],
                                "links": [],
                                "description": "The total number of cache misses"
                            },
                            {
                                "id": 33,
                                "title": "Cache Gets",
                                "span": 6,
                                "type": "graph",
                                "targets": [
                                    {
                                        "refId": "A",
                                        "expr": "{__name__=~\\"^jcache_statistics.*cache_gets\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "step": 2,
                                        "legendFormat": "{{__name__}}"
                                    }
                                ],
                                "datasource": "prometheus",
                                "renderer": "flot",
                                "yaxes": [
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": null,
                                        "format": "short"
                                    },
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": null,
                                        "format": "short"
                                    }
                                ],
                                "xaxis": {
                                    "show": true,
                                    "mode": "time",
                                    "name": null,
                                    "values": [],
                                    "buckets": null
                                },
                                "lines": true,
                                "fill": 1,
                                "linewidth": 1,
                                "dashes": false,
                                "dashLength": 10,
                                "spaceLength": 10,
                                "points": false,
                                "pointradius": 5,
                                "bars": false,
                                "stack": false,
                                "percentage": false,
                                "legend": {
                                    "show": true,
                                    "values": true,
                                    "min": true,
                                    "max": true,
                                    "current": true,
                                    "total": true,
                                    "avg": true,
                                    "alignAsTable": true
                                },
                                "nullPointMode": "null",
                                "steppedLine": false,
                                "tooltip": {
                                    "value_type": "individual",
                                    "shared": true,
                                    "sort": 0
                                },
                                "timeFrom": null,
                                "timeShift": null,
                                "aliasColors": {},
                                "seriesOverrides": [],
                                "thresholds": [],
                                "links": [],
                                "description": "The total number of cache gets"
                            },
                            {
                                "id": 34,
                                "title": "Cache Puts",
                                "span": 6,
                                "type": "graph",
                                "targets": [
                                    {
                                        "refId": "A",
                                        "expr": "{__name__=~\\"^jcache_statistics.*cache_puts\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                        "intervalFactor": 2,
                                        "format": "time_series",
                                        "step": 2,
                                        "legendFormat": "{{__name__}}"
                                    }
                                ],
                                "datasource": "prometheus",
                                "renderer": "flot",
                                "yaxes": [
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": null,
                                        "format": "short"
                                    },
                                    {
                                        "label": null,
                                        "show": true,
                                        "logBase": 1,
                                        "min": "0",
                                        "max": null,
                                        "format": "short"
                                    }
                                ],
                                "xaxis": {
                                    "show": true,
                                    "mode": "time",
                                    "name": null,
                                    "values": [],
                                    "buckets": null
                                },
                                "lines": true,
                                "fill": 1,
                                "linewidth": 1,
                                "dashes": false,
                                "dashLength": 10,
                                "spaceLength": 10,
                                "points": false,
                                "pointradius": 5,
                                "bars": false,
                                "stack": false,
                                "percentage": false,
                                "legend": {
                                    "show": true,
                                    "values": true,
                                    "min": true,
                                    "max": true,
                                    "current": true,
                                    "total": true,
                                    "avg": true,
                                    "alignAsTable": true
                                },
                                "nullPointMode": "null",
                                "steppedLine": false,
                                "tooltip": {
                                    "value_type": "individual",
                                    "shared": true,
                                    "sort": 0
                                },
                                "timeFrom": null,
                                "timeShift": null,
                                "aliasColors": {},
                                "seriesOverrides": [],
                                "thresholds": [],
                                "links": [],
                                "description": "The total number of cache puts"
                            }
                        ],
                        "repeat": null,
                        "repeatIteration": null,
                        "repeatRowId": null,
                        "showTitle": true,
                        "title": "Cache Metrics",
                        "titleSize": "h6"
                    },
                    {
                        "collapse": false,
                        "height": 250,
                        "panels": [
                            {
                                "aliasColors": {},
                                "bars": false,
                                "dashLength": 10,
                                "dashes": false,
                                "datasource": "prometheus",
                                "description": "Count of REST requests",
                                "fill": 1,
                                "id": 27,
                                "legend": {
                                    "alignAsTable": true,
                                    "avg": true,
                                    "current": true,
                                    "max": true,
                                    "min": true,
                                    "show": true,
                                    "total": false,
                                    "values": true
                                },
                                "lines": true,
                                "linewidth": 1,
                                "links": [],
                                "nullPointMode": "null",
                                "percentage": false,
                                "pointradius": 5,
                                "points": false,
                                "renderer": "flot",
                                "seriesOverrides": [],
                                "spaceLength": 10,
                                "span": 12,
                                "stack": false,
                                "steppedLine": false,
                                "targets": [
                                    {
                                        "expr": "{__name__=~\\".*rest.*_count\\", namespace=\\"$namespace\\", service=\\"$service_name\\"} ",
                                        "format": "time_series",
                                        "intervalFactor": 2,
                                        "legendFormat": "{{__name__}}",
                                        "refId": "A",
                                        "step": 2
                                    }
                                ],
                                "thresholds": [],
                                "timeFrom": null,
                                "timeShift": null,
                                "title": "REST Requests Metrics",
                                "tooltip": {
                                    "shared": false,
                                    "sort": 0,
                                    "value_type": "individual"
                                },
                                "type": "graph",
                                "xaxis": {
                                    "buckets": null,
                                    "mode": "time",
                                    "name": null,
                                    "show": true,
                                    "values": [
                                        "total"
                                    ]
                                },
                                "yaxes": [
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    },
                                    {
                                        "format": "short",
                                        "label": null,
                                        "logBase": 1,
                                        "max": null,
                                        "min": "0",
                                        "show": true
                                    }
                                ],
                                "decimals": 0
                            }
                        ],
                        "repeat": null,
                        "repeatIteration": null,
                        "repeatRowId": null,
                        "showTitle": true,
                        "title": "REST Metrics",
                        "titleSize": "h6"
                    }
                ],
                "schemaVersion": 14,
                "style": "dark",
                "tags": [
                    "java",
                    "jhipster",
                    "spring-boot"
                ],
                "templating": {
                    "list": [
                        {
                            "allValue": null,
                            "current": {},
                            "datasource": "prometheus",
                            "hide": 0,
                            "includeAll": false,
                            "label": "Namespace",
                            "multi": false,
                            "name": "namespace",
                            "options": [],
                            "query": "label_values(jvm_files, namespace)",
                            "refresh": 2,
                            "regex": "",
                            "sort": 1,
                            "tagValuesQuery": "",
                            "tags": [],
                            "tagsQuery": "",
                            "type": "query",
                            "useTags": false
                        },
                        {
                            "allValue": null,
                            "current": {},
                            "datasource": "prometheus",
                            "hide": 0,
                            "includeAll": false,
                            "label": "Service Name",
                            "multi": false,
                            "name": "service_name",
                            "options": [],
                            "query": "label_values(jvm_files, service)",
                            "refresh": 2,
                            "regex": "",
                            "sort": 1,
                            "tagValuesQuery": "",
                            "tags": [],
                            "tagsQuery": "",
                            "type": "query",
                            "useTags": false
                        }
                    ]
                },
                "time": {
                    "from": "now-15m",
                    "to": "now"
                },
                "timepicker": {
                    "refresh_intervals": [
                        "5s",
                        "10s",
                        "30s",
                        "1m",
                        "5m",
                        "15m",
                        "30m",
                        "1h",
                        "2h",
                        "1d"
                    ],
                    "time_options": [
                        "5m",
                        "15m",
                        "1h",
                        "6h",
                        "12h",
                        "24h",
                        "2d",
                        "7d",
                        "30d"
                    ]
                },
                "timezone": "",
                "title": "JHipster Metrics",
                "version": 3
            }
",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
kubectl apply -f namespace.yml
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace mynamespace
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace mynamespace
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
  else
helm delete --purge msmysql 2>/dev/null
  fi
helm dep up ./msmysql-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace mynamespace
  else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace mynamespace
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace mynamespace
fi
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace mynamespace


",
    "stateCleared": "modified",
  },
  "msmysql-helm/Chart.yaml": {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.mynamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED
              value: "true"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm mysql microservice with custom namespace should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "mynamespace",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "no",
    "packages": ["02-mysql"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.mynamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: mynamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - mynamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.mynamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
kubectl apply -f namespace.yml
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace mynamespace
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace mynamespace
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
  else
helm delete --purge msmysql 2>/dev/null
  fi
helm dep up ./msmysql-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace mynamespace
  else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace mynamespace
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace mynamespace
fi
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace mynamespace


",
    "stateCleared": "modified",
  },
  "msmysql-helm/Chart.yaml": {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "msmysql-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.mynamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-helm/templates/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Helm only gateway should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "clientPackageManager": "npm",
    "clusteredDbApps": {},
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipsterrepository",
    "ingressDomain": "",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "jhipsternamespace",
    "kubernetesServiceType": "LoadBalancer",
    "monitoring": "no",
    "packages": ["01-gateway"],
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "HELM-README.md": {
    "contents": "# JHipster generated helm package manager

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipsterrepository/jhgate
$ docker push jhipsterrepository/jhgate
\`\`\`

## Prerequisites

To use the templates generated by this sub-generator \`helm cli and tiller\` should be installed. Instructions on installing \`helm\` can be referred
at [https://github.com/helm/helm](https://github.com/helm/helm)

Once Helm is installed you need to add the below repositories:

\`\`\`
helm repo add stable https://charts.helm.sh/stable
helm repo add incubator https://charts.helm.sh/incubator
\`\`\`

These repositories should be added to the local cache, because this sub-generator will pull some charts from them.

This repository in turn uses the \`kubernetes\` sub-generator for the microservices manifests and few service like database, Elasticsearch, Prometheus etc. that are referred from the above repositories.

## Deployment

You can deploy all your applications by running the following bash command:

\`\`\`
bash helm-apply.sh (or) ./helm-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-upgrade.sh (or) ./helm-upgrade.sh
\`\`\`

For Kubernetes specific information, refer to the \`kubernetes\` sub-generator Readme instructions.

### Backlogs to be covered

- helm upgrade - to be tested
- Istio - to be tested
",
    "stateCleared": "modified",
  },
  "csvc-helm/Chart.yaml": {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/requirements.yaml": {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: jhipsternamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.jhipsternamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-helm/templates/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: jhipsternamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - jhipsternamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.jhipsternamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "csvc-helm/values.yaml": {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
kubectl apply -f namespace.yml
helmVersion=$(helm version --client | grep -E "v3\\\\.[0-9]{1,3}\\\\.[0-9]{1,3}" | wc -l)
if [ -d "\${cs}-\${suffix}" ]; then
  if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
  else
helm delete --purge \${cs} 2>/dev/null
  fi
helm dep up ./\${cs}-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace jhipsternamespace
  else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace jhipsternamespace
  fi
fi
  if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
  else
helm delete --purge jhgate 2>/dev/null
  fi
helm dep up ./jhgate-\${suffix}
  if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace jhipsternamespace
  else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace jhipsternamespace
  fi


",
    "stateCleared": "modified",
  },
  "helm-upgrade.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=helm
if [ -d "\${cs}-\${suffix}" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace jhipsternamespace
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace jhipsternamespace


",
    "stateCleared": "modified",
  },
  "jhgate-helm/Chart.yaml": {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/requirements.yaml": {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/_helpers.tpl": {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define "mysql.name" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}

{{- define "mysql.fullname" -}}
{{- default "jhgate-mysql" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipsterrepository/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.jhipsternamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mariadb://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-helm/templates/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: jhipsternamespace
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "jhgate-helm/values.yaml": {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: jhipsternamespace
",
    "stateCleared": "modified",
  },
}
`;

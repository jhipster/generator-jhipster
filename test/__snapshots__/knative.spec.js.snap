// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`JHipster Knative Sub Generator Using Helm generator type MySQL and PostgreSQL microservices without gateway should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"02-mysql\\", \\"03-psql\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"helm\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
    $ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash helm-knative-apply.sh (or) ./helm-knative-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-knative-upgrade.sh (or) ./helm-knative-upgrade.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "csvc-knative/Chart.yaml": Object {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/requirements.yml": Object {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-knative/values.yml": Object {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
kubectl label namespace default istio-injection=enabled
helmVersion=$(helm version --client | grep -E \\"v3\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\" | wc -l)
if [ -d \\"\${cs}-\${suffix}\\" ]; then
    if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
    else
helm delete --purge \${cs} 2>/dev/null
    fi
helm dep up ./\${cs}-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
    else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
    fi
fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
    else
helm delete --purge msmysql 2>/dev/null
    fi
helm dep up ./msmysql-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace default
    else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace default
    fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall mspsql 2>/dev/null
    else
helm delete --purge mspsql 2>/dev/null
    fi
helm dep up ./mspsql-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install mspsql  ./mspsql-\${suffix} --replace --namespace default
    else
helm install --name mspsql  ./mspsql-\${suffix} --replace --namespace default
    fi
",
    "stateCleared": "modified",
  },
  "helm-knative-upgrade.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
if [ -d \\"\${cs}-\${suffix}\\" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace default
helm dep up ./mspsql-\${suffix}
helm upgrade --install mspsql ./mspsql-\${suffix} --namespace default
",
    "stateCleared": "modified",
  },
  "msmysql-knative/Chart.yaml": Object {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: default
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmysql-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "mspsql-knative/Chart.yaml": Object {
    "contents": "name: mspsql
version: 1.0.0
appVersion: 1.0.0
description: mspsql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- mspsql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: postgresql
  version: ^6.5.3
  repository: https://charts.bitnami.com/bitnami
  condition: postgresql.enabled
",
    "stateCleared": "modified",
  },
  "mspsql-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: postgresql
    version: ^6.5.3
    repository: https://charts.bitnami.com/bitnami
    condition: postgresql.enabled
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
postgresql customisation
*/}}
{{- define \\"postgresql.name\\" -}}
{{- default \\"mspsql-postgresql\\" -}}
{{- end -}}

{{- define \\"postgresql.fullname\\" -}}
{{- default \\"mspsql-postgresql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/mspsql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: mspsql-destinationrule
  namespace: default
spec:
  host: mspsql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/mspsql-elasticsearch.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.13.3
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"2Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/mspsql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: mspsql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: mspsql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: mspsql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: mspsql
            version: \\"v1\\"
        spec:
          containers:
            - name: mspsql-app
              image: jhipster/mspsql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: mspsql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
                - name: SPRING_DATASOURCE_USERNAME
                  value: mspsql
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mspsql-postgresql
                      key: postgresql-password
                - name: SPRING_ELASTICSEARCH_REST_URIS
                  value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/mspsql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: mspsql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - mspsql-knative
  http:
    - route:
        - destination:
            host: mspsql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: mspsql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "mspsql-knative/values.yml": Object {
    "contents": "postgresql:
  enabled: true
  postgresqlUsername: mspsql
  postgresqlDatabase: mspsql
  master:
    podAnnotations:
      sidecar.istio.io/inject: \\"false\\"
  slave:
    podAnnotations:
      sidecar.istio.io/inject: \\"false\\"
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using Helm generator type gateway and ingress should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"01-gateway\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"helm\\",
    \\"ingressDomain\\": \\"example.com\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash helm-knative-apply.sh (or) ./helm-knative-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-knative-upgrade.sh (or) ./helm-knative-upgrade.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "csvc-knative/Chart.yaml": Object {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/requirements.yml": Object {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.example.com
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.example.com
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.example.com
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-knative/values.yml": Object {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
kubectl label namespace default istio-injection=enabled
helmVersion=$(helm version --client | grep -E \\"v3\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\" | wc -l)
if [ -d \\"\${cs}-\${suffix}\\" ]; then
    if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
    else
helm delete --purge \${cs} 2>/dev/null
    fi
helm dep up ./\${cs}-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
    else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
    fi
fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
    else
helm delete --purge jhgate 2>/dev/null
    fi
helm dep up ./jhgate-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace default
    else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace default
    fi
",
    "stateCleared": "modified",
  },
  "helm-knative-upgrade.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
if [ -d \\"\${cs}-\${suffix}\\" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace default
",
    "stateCleared": "modified",
  },
  "jhgate-knative/Chart.yaml": Object {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.example.com
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipster/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "jhgate-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using Helm generator type gateway and mysql microservice should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"01-gateway\\", \\"02-mysql\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"helm\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash helm-knative-apply.sh (or) ./helm-knative-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-knative-upgrade.sh (or) ./helm-knative-upgrade.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "csvc-knative/Chart.yaml": Object {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/requirements.yml": Object {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-knative/values.yml": Object {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
kubectl label namespace default istio-injection=enabled
helmVersion=$(helm version --client | grep -E \\"v3\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\" | wc -l)
if [ -d \\"\${cs}-\${suffix}\\" ]; then
    if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
    else
helm delete --purge \${cs} 2>/dev/null
    fi
helm dep up ./\${cs}-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
    else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
    fi
fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
    else
helm delete --purge jhgate 2>/dev/null
    fi
helm dep up ./jhgate-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace default
    else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace default
    fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
    else
helm delete --purge msmysql 2>/dev/null
    fi
helm dep up ./msmysql-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace default
    else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace default
    fi
",
    "stateCleared": "modified",
  },
  "helm-knative-upgrade.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
if [ -d \\"\${cs}-\${suffix}\\" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace default
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace default
",
    "stateCleared": "modified",
  },
  "jhgate-knative/Chart.yaml": Object {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipster/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "jhgate-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "msmysql-knative/Chart.yaml": Object {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: default
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmysql-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using Helm generator type gateway with istio routing files should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"01-gateway\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"helm\\",
    \\"ingressDomain\\": \\"example.com\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash helm-knative-apply.sh (or) ./helm-knative-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-knative-upgrade.sh (or) ./helm-knative-upgrade.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "csvc-knative/Chart.yaml": Object {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/requirements.yml": Object {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.example.com
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.example.com
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.example.com
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-knative/values.yml": Object {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
kubectl label namespace default istio-injection=enabled
helmVersion=$(helm version --client | grep -E \\"v3\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\" | wc -l)
if [ -d \\"\${cs}-\${suffix}\\" ]; then
    if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
    else
helm delete --purge \${cs} 2>/dev/null
    fi
helm dep up ./\${cs}-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
    else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
    fi
fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
    else
helm delete --purge jhgate 2>/dev/null
    fi
helm dep up ./jhgate-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace default
    else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace default
    fi
",
    "stateCleared": "modified",
  },
  "helm-knative-upgrade.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
if [ -d \\"\${cs}-\${suffix}\\" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace default
",
    "stateCleared": "modified",
  },
  "jhgate-knative/Chart.yaml": Object {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.example.com
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipster/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "jhgate-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using Helm generator type gateway, mysql, psql, mongodb, mariadb microservices should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [
      \\"01-gateway\\",
      \\"02-mysql\\",
      \\"03-psql\\",
      \\"04-mongo\\",
      \\"07-mariadb\\"
    ],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": [],
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"helm\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
    $ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
    $ docker image tag msmongodb jhipster/msmongodb
$ docker push jhipster/msmongodb
    $ docker image tag msmariadb jhipster/msmariadb
$ docker push jhipster/msmariadb
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash helm-knative-apply.sh (or) ./helm-knative-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-knative-upgrade.sh (or) ./helm-knative-upgrade.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "csvc-knative/Chart.yaml": Object {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/requirements.yml": Object {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-knative/values.yml": Object {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
kubectl label namespace default istio-injection=enabled
helmVersion=$(helm version --client | grep -E \\"v3\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\" | wc -l)
if [ -d \\"\${cs}-\${suffix}\\" ]; then
    if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
    else
helm delete --purge \${cs} 2>/dev/null
    fi
helm dep up ./\${cs}-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace default
    else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace default
    fi
fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
    else
helm delete --purge jhgate 2>/dev/null
    fi
helm dep up ./jhgate-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace default
    else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace default
    fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
    else
helm delete --purge msmysql 2>/dev/null
    fi
helm dep up ./msmysql-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace default
    else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace default
    fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall mspsql 2>/dev/null
    else
helm delete --purge mspsql 2>/dev/null
    fi
helm dep up ./mspsql-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install mspsql  ./mspsql-\${suffix} --replace --namespace default
    else
helm install --name mspsql  ./mspsql-\${suffix} --replace --namespace default
    fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall msmongodb 2>/dev/null
    else
helm delete --purge msmongodb 2>/dev/null
    fi
helm dep up ./msmongodb-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install msmongodb  ./msmongodb-\${suffix} --replace --namespace default
    else
helm install --name msmongodb  ./msmongodb-\${suffix} --replace --namespace default
    fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall msmariadb 2>/dev/null
    else
helm delete --purge msmariadb 2>/dev/null
    fi
helm dep up ./msmariadb-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install msmariadb  ./msmariadb-\${suffix} --replace --namespace default
    else
helm install --name msmariadb  ./msmariadb-\${suffix} --replace --namespace default
    fi
",
    "stateCleared": "modified",
  },
  "helm-knative-upgrade.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
if [ -d \\"\${cs}-\${suffix}\\" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace default
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace default
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace default
helm dep up ./mspsql-\${suffix}
helm upgrade --install mspsql ./mspsql-\${suffix} --namespace default
helm dep up ./msmongodb-\${suffix}
helm upgrade --install msmongodb ./msmongodb-\${suffix} --namespace default
helm dep up ./msmariadb-\${suffix}
helm upgrade --install msmariadb ./msmariadb-\${suffix} --namespace default
",
    "stateCleared": "modified",
  },
  "jhgate-knative/Chart.yaml": Object {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipster/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "jhgate-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/Chart.yaml": Object {
    "contents": "name: msmariadb
version: 1.0.0
appVersion: 1.0.0
description: msmariadb is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmariadb
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mariadb
  version: ^6.12.2
  repository: https://charts.bitnami.com/bitnami
  condition: mariadb.enabled
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mariadb
    version: ^6.12.2
    repository: https://charts.bitnami.com/bitnami
    condition: mariadb.enabled
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mariadb customisation
*/}}
{{- define \\"mariadb.name\\" -}}
{{- default \\"msmariadb-mariadb\\" -}}
{{- end -}}

{{- define \\"mariadb.fullname\\" -}}
{{- default \\"msmariadb-mariadb\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/templates/jwt-secret.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: default
type: Opaque
data:
  secret: U0VDUkVULS01MA==
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/templates/msmariadb-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmariadb-destinationrule
  namespace: default
spec:
  host: msmariadb-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/templates/msmariadb-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmariadb
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmariadb
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmariadb-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmariadb
            version: \\"v1\\"
        spec:
          containers:
            - name: msmariadb-app
              image: jhipster/msmariadb
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: jwt-secret
                      key: secret
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false&serverTimezone=UTC
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: msmariadb-mariadb
                      key: mariadb-root-password
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /services/msmariadb/management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /services/msmariadb/management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/templates/msmariadb-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmariadb-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmariadb-knative
  http:
    - route:
        - destination:
            host: msmariadb-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmariadb-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/values.yml": Object {
    "contents": "mariadb:
  enabled: true
  replication:
    enabled: false
  db:
    name: msmariadb
  master:
    annotations:
      sidecar.istio.io/inject: \\"false\\"
  slave:
    annotations:
      sidecar.istio.io/inject: \\"false\\"
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/Chart.yaml": Object {
    "contents": "name: msmongodb
version: 1.0.0
appVersion: 1.0.0
description: msmongodb is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmongodb
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mongodb-replicaset
  version: ^3.10.1
  repository: https://charts.helm.sh/stable
  condition: mongodb.enabled
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mongodb-replicaset
    version: ^3.10.1
    repository: https://charts.helm.sh/stable
    condition: mongodb.enabled
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mongodb customisation
*/}}
{{- define \\"mongodb-replicaset.name\\" -}}
{{- default \\"msmongodb-mongodb\\" -}}
{{- end -}}

{{- define \\"mongodb-replicaset.fullname\\" -}}
{{- default \\"msmongodb-mongodb\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/templates/jwt-secret.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: default
type: Opaque
data:
  secret: U0VDUkVULS01MA==
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/templates/msmongodb-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmongodb-destinationrule
  namespace: default
spec:
  host: msmongodb-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/templates/msmongodb-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmongodb
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmongodb
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmongodb-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmongodb
            version: \\"v1\\"
        spec:
          containers:
            - name: msmongodb-app
              image: jhipster/msmongodb
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: jwt-secret
                      key: secret
                - name: SPRING_DATA_MONGODB_DATABASE
                  value: msmongodb
                - name: SPRING_DATA_MONGODB_URI
                  value: \\"mongodb://msmongodb-mongodb-0.msmongodb-mongodb.default:27017\\"
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /services/msmongodb/management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /services/msmongodb/management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/templates/msmongodb-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmongodb-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmongodb-knative
  http:
    - route:
        - destination:
            host: msmongodb-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmongodb-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/values.yml": Object {
    "contents": "mongodb:
  enabled: true
mongodb-replicaset:
  replicas: 3
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/Chart.yaml": Object {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: default
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmysql-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "mspsql-knative/Chart.yaml": Object {
    "contents": "name: mspsql
version: 1.0.0
appVersion: 1.0.0
description: mspsql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- mspsql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: postgresql
  version: ^6.5.3
  repository: https://charts.bitnami.com/bitnami
  condition: postgresql.enabled
",
    "stateCleared": "modified",
  },
  "mspsql-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: postgresql
    version: ^6.5.3
    repository: https://charts.bitnami.com/bitnami
    condition: postgresql.enabled
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
postgresql customisation
*/}}
{{- define \\"postgresql.name\\" -}}
{{- default \\"mspsql-postgresql\\" -}}
{{- end -}}

{{- define \\"postgresql.fullname\\" -}}
{{- default \\"mspsql-postgresql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/mspsql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: mspsql-destinationrule
  namespace: default
spec:
  host: mspsql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/mspsql-elasticsearch.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.13.3
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"2Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/mspsql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: mspsql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: mspsql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: mspsql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: mspsql
            version: \\"v1\\"
        spec:
          containers:
            - name: mspsql-app
              image: jhipster/mspsql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: mspsql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
                - name: SPRING_DATASOURCE_USERNAME
                  value: mspsql
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mspsql-postgresql
                      key: postgresql-password
                - name: SPRING_ELASTICSEARCH_REST_URIS
                  value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "mspsql-knative/templates/mspsql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: mspsql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - mspsql-knative
  http:
    - route:
        - destination:
            host: mspsql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: mspsql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "mspsql-knative/values.yml": Object {
    "contents": "postgresql:
  enabled: true
  postgresqlUsername: mspsql
  postgresqlDatabase: mspsql
  master:
    podAnnotations:
      sidecar.istio.io/inject: \\"false\\"
  slave:
    podAnnotations:
      sidecar.istio.io/inject: \\"false\\"
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using Helm generator type mysql microservice with custom namespace and jhipster prometheus monitoring should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"02-mysql\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"mynamespace\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"helm\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"prometheus\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash helm-knative-apply.sh (or) ./helm-knative-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-knative-upgrade.sh (or) ./helm-knative-upgrade.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "csvc-knative/Chart.yaml": Object {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: prometheus
  version: ^9.2.0
  repository: https://prometheus-community.github.io/helm-charts
  condition: prometheus.enabled
- name: grafana
  version: ^4.0.0
  repository: https://grafana.github.io/helm-charts
  condition: prometheus.enabled
",
    "stateCleared": "modified",
  },
  "csvc-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: prometheus
    version: ^9.2.0
    repository: https://prometheus-community.github.io/helm-charts
    condition: prometheus.enabled
  - name: grafana
    version: ^4.0.0
    repository: https://grafana.github.io/helm-charts
    condition: prometheus.enabled
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
prometheus/grafana customisation
*/}}
{{- define \\"prometheus.name\\" -}}
{{- default \\"jhipster-prometheus\\" -}}
{{- end -}}

{{- define \\"prometheus.fullname\\" -}}
{{- default \\"jhipster-prometheus\\" -}}
{{- end -}}

{{- define \\"prometheus.server.fullname\\" -}}
{{- default \\"jhipster-prometheus\\" -}}
{{- end -}}

{{- define \\"prometheus.pushgateway.fullname\\" -}}
{{- default \\"jhipster-prometheus-pushgateway\\" -}}
{{- end -}}

{{- define \\"prometheus.nodeExporter.fullname\\" -}}
{{- default \\"jhipster-prometheus-nodeexporter\\" -}}
{{- end -}}

{{- define \\"prometheus.alertmanager.fullname\\" -}}
{{- default \\"jhipster-prometheus-alertmanager\\" -}}
{{- end -}}

{{- define \\"grafana.name\\" -}}
{{- default \\"jhipster-grafana\\" -}}
{{- end -}}

{{- define \\"grafana.fullname\\" -}}
{{- default \\"jhipster-grafana\\" -}}
{{- end -}}

",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhipster-grafana-gateway
  namespace: mynamespace
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhipster-grafana.mynamespace.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhipster-grafana.mynamespace.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhipster-grafana-gw-virtualservice
  namespace: mynamespace
spec:
  hosts:
    - jhipster-grafana.mynamespace.
  gateways:
    - jhipster-grafana-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: jhipster-grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: mynamespace
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: mynamespace
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: mynamespace
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-knative/values.yml": Object {
    "contents": "prometheus:
  enabled: true
  server:
    name: jhipster-prometheus
    podAnnotations:
      sidecar.istio.io/inject: \\"false\\"
    service:
      servicePort: 9090
  nodeExporter:
    enabled: false
  kubeStateMetrics:
    enabled: false
  pushgateway:
    enabled: false
grafana:
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  datasources:
    datasources.yaml:
      apiVersion: 1
      datasources:
        - name: prometheus
          type: prometheus
          url: http://jhipster-prometheus:9090
          access: proxy
          isDefault: true
          basicAuth: false
  dashboardProviders:
    dashboardproviders.yaml:
      apiVersion: 1
      providers:
        - name: \\"prometheus\\"
          orgId: 1
          folder: \\"\\"
          type: file
          disableDeletion: false
          editable: true
          options:
            path: /var/lib/grafana/dashboards/prometheus
  dashboards:
    prometheus:
      prometheus-dashboard:
        json: |-
          {
              \\"__inputs\\": [
                  {
                      \\"name\\": \\"DS_PROMETHEUS\\",
                      \\"label\\": \\"prometheus\\",
                      \\"description\\": \\"\\",
                      \\"type\\": \\"datasource\\",
                      \\"pluginId\\": \\"prometheus\\",
                      \\"pluginName\\": \\"Prometheus\\"
                  }
              ],
              \\"__requires\\": [
                  {
                      \\"type\\": \\"grafana\\",
                      \\"id\\": \\"grafana\\",
                      \\"name\\": \\"Grafana\\",
                      \\"version\\": \\"5.0.4\\"
                  },
                  {
                      \\"type\\": \\"panel\\",
                      \\"id\\": \\"graph\\",
                      \\"name\\": \\"Graph\\",
                      \\"version\\": \\"\\"
                  },
                  {
                      \\"type\\": \\"datasource\\",
                      \\"id\\": \\"prometheus\\",
                      \\"name\\": \\"Prometheus\\",
                      \\"version\\": \\"5.0.0\\"
                  },
                  {
                      \\"type\\": \\"panel\\",
                      \\"id\\": \\"singlestat\\",
                      \\"name\\": \\"Singlestat\\",
                      \\"version\\": \\"\\"
                  }
              ],
              \\"annotations\\": {
                  \\"list\\": [
                      {
                          \\"builtIn\\": 1,
                          \\"datasource\\": \\"-- Grafana --\\",
                          \\"enable\\": true,
                          \\"hide\\": true,
                          \\"iconColor\\": \\"rgba(0, 211, 255, 1)\\",
                          \\"name\\": \\"Annotations & Alerts\\",
                          \\"type\\": \\"dashboard\\"
                      }
                  ]
              },
              \\"description\\": \\"JHipster metrics\\",
              \\"editable\\": true,
              \\"gnetId\\": 3308,
              \\"graphTooltip\\": 0,
              \\"hideControls\\": false,
              \\"id\\": null,
              \\"links\\": [],
              \\"refresh\\": false,
              \\"rows\\": [
                  {
                      \\"collapse\\": false,
                      \\"height\\": \\"250px\\",
                      \\"panels\\": [
                          {
                              \\"cacheTimeout\\": null,
                              \\"colorBackground\\": false,
                              \\"colorValue\\": false,
                              \\"colors\\": [
                                  \\"rgba(245, 54, 54, 0.9)\\",
                                  \\"rgba(237, 129, 40, 0.89)\\",
                                  \\"rgba(50, 172, 45, 0.97)\\"
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"decimals\\": null,
                              \\"description\\": \\"Service status\\",
                              \\"format\\": \\"none\\",
                              \\"gauge\\": {
                                  \\"maxValue\\": 1,
                                  \\"minValue\\": 0,
                                  \\"show\\": true,
                                  \\"thresholdLabels\\": false,
                                  \\"thresholdMarkers\\": true
                              },
                              \\"height\\": \\"\\",
                              \\"id\\": 1,
                              \\"interval\\": null,
                              \\"links\\": [],
                              \\"mappingType\\": 1,
                              \\"mappingTypes\\": [
                                  {
                                      \\"name\\": \\"value to text\\",
                                      \\"value\\": 1
                                  },
                                  {
                                      \\"name\\": \\"range to text\\",
                                      \\"value\\": 2
                                  }
                              ],
                              \\"maxDataPoints\\": 100,
                              \\"nullPointMode\\": \\"connected\\",
                              \\"nullText\\": null,
                              \\"postfix\\": \\"\\",
                              \\"postfixFontSize\\": \\"50%\\",
                              \\"prefix\\": \\"\\",
                              \\"prefixFontSize\\": \\"100%\\",
                              \\"rangeMaps\\": [
                                  {
                                      \\"from\\": \\"null\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"to\\": \\"null\\"
                                  }
                              ],
                              \\"span\\": 4,
                              \\"sparkline\\": {
                                  \\"fillColor\\": \\"rgba(31, 118, 189, 0.18)\\",
                                  \\"full\\": false,
                                  \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                  \\"show\\": false
                              },
                              \\"tableColumn\\": \\"Value\\",
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"up{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"table\\",
                                      \\"intervalFactor\\": 2,
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 20,
                                      \\"metric\\": \\"up\\",
                                      \\"legendFormat\\": \\"service\\"
                                  }
                              ],
                              \\"thresholds\\": \\"0\\",
                              \\"title\\": \\"Service Status Now\\",
                              \\"type\\": \\"singlestat\\",
                              \\"valueFontSize\\": \\"120%\\",
                              \\"valueMaps\\": [
                                  {
                                      \\"op\\": \\"=\\",
                                      \\"text\\": \\"Down\\",
                                      \\"value\\": \\"0\\"
                                  },
                                  {
                                      \\"value\\": \\"1\\",
                                      \\"op\\": \\"=\\",
                                      \\"text\\": \\"Up\\"
                                  }
                              ],
                              \\"valueName\\": \\"current\\",
                              \\"hideTimeOverride\\": false,
                              \\"minSpan\\": null,
                              \\"repeat\\": null,
                              \\"transparent\\": false
                          },
                          {
                              \\"id\\": 29,
                              \\"title\\": \\"Service Uptime\\",
                              \\"span\\": 8,
                              \\"type\\": \\"graph\\",
                              \\"targets\\": [
                                  {
                                      \\"refId\\": \\"A\\",
                                      \\"expr\\": \\"up{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"{{pod}}\\"
                                  }
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"renderer\\": \\"flot\\",
                              \\"yaxes\\": [
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": \\"1\\",
                                      \\"format\\": \\"short\\"
                                  },
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": \\"1\\",
                                      \\"format\\": \\"short\\"
                                  }
                              ],
                              \\"xaxis\\": {
                                  \\"show\\": true,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"values\\": [],
                                  \\"buckets\\": null
                              },
                              \\"lines\\": true,
                              \\"fill\\": 1,
                              \\"linewidth\\": 1,
                              \\"dashes\\": false,
                              \\"dashLength\\": 10,
                              \\"spaceLength\\": 10,
                              \\"points\\": true,
                              \\"pointradius\\": 3,
                              \\"bars\\": false,
                              \\"stack\\": false,
                              \\"percentage\\": false,
                              \\"legend\\": {
                                  \\"show\\": true,
                                  \\"values\\": false,
                                  \\"min\\": false,
                                  \\"max\\": false,
                                  \\"current\\": false,
                                  \\"total\\": false,
                                  \\"avg\\": false,
                                  \\"alignAsTable\\": true
                              },
                              \\"nullPointMode\\": \\"null\\",
                              \\"steppedLine\\": true,
                              \\"tooltip\\": {
                                  \\"value_type\\": \\"individual\\",
                                  \\"shared\\": true,
                                  \\"sort\\": 0
                              },
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"aliasColors\\": {},
                              \\"seriesOverrides\\": [],
                              \\"thresholds\\": [],
                              \\"links\\": [],
                              \\"description\\": \\"The uptime of the service\\"
                          }
                      ],
                      \\"repeat\\": null,
                      \\"repeatIteration\\": null,
                      \\"repeatRowId\\": null,
                      \\"showTitle\\": true,
                      \\"title\\": \\"Uptime Metrics\\",
                      \\"titleSize\\": \\"h6\\"
                  },
                  {
                      \\"collapse\\": false,
                      \\"height\\": 250,
                      \\"panels\\": [
                          {
                              \\"cacheTimeout\\": null,
                              \\"colorBackground\\": false,
                              \\"colorValue\\": true,
                              \\"colors\\": [
                                  \\"rgba(32, 176, 9, 0.9)\\",
                                  \\"rgba(237, 129, 40, 0.89)\\",
                                  \\"rgba(50, 172, 45, 0.97)\\"
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"Total requests count\\",
                              \\"format\\": \\"none\\",
                              \\"gauge\\": {
                                  \\"maxValue\\": 10000000000000,
                                  \\"minValue\\": 0,
                                  \\"show\\": true,
                                  \\"thresholdLabels\\": false,
                                  \\"thresholdMarkers\\": true
                              },
                              \\"id\\": 5,
                              \\"interval\\": null,
                              \\"links\\": [],
                              \\"mappingType\\": 1,
                              \\"mappingTypes\\": [
                                  {
                                      \\"name\\": \\"value to text\\",
                                      \\"value\\": 1
                                  },
                                  {
                                      \\"name\\": \\"range to text\\",
                                      \\"value\\": 2
                                  }
                              ],
                              \\"maxDataPoints\\": 100,
                              \\"nullPointMode\\": \\"connected\\",
                              \\"nullText\\": null,
                              \\"postfix\\": \\"\\",
                              \\"postfixFontSize\\": \\"50%\\",
                              \\"prefix\\": \\"\\",
                              \\"prefixFontSize\\": \\"50%\\",
                              \\"rangeMaps\\": [
                                  {
                                      \\"from\\": \\"null\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"to\\": \\"null\\"
                                  }
                              ],
                              \\"span\\": 3,
                              \\"sparkline\\": {
                                  \\"fillColor\\": \\"rgba(31, 118, 189, 0.18)\\",
                                  \\"full\\": false,
                                  \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                  \\"show\\": false
                              },
                              \\"tableColumn\\": \\"Value\\",
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_requests_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"table\\",
                                      \\"intervalFactor\\": 2,
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 20,
                                      \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_requests_count\\"
                                  }
                              ],
                              \\"thresholds\\": \\"\\",
                              \\"title\\": \\"Total Requests\\",
                              \\"type\\": \\"singlestat\\",
                              \\"valueFontSize\\": \\"70%\\",
                              \\"valueMaps\\": [
                                  {
                                      \\"op\\": \\"=\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"value\\": \\"null\\"
                                  }
                              ],
                              \\"valueName\\": \\"total\\",
                              \\"transparent\\": false
                          },
                          {
                              \\"cacheTimeout\\": null,
                              \\"colorBackground\\": false,
                              \\"colorValue\\": false,
                              \\"colors\\": [
                                  \\"rgba(245, 54, 54, 0.9)\\",
                                  \\"rgba(237, 129, 40, 0.89)\\",
                                  \\"rgba(50, 172, 45, 0.97)\\"
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"Number of 200 OK requests\\",
                              \\"format\\": \\"none\\",
                              \\"gauge\\": {
                                  \\"maxValue\\": 10000000000000000,
                                  \\"minValue\\": 0,
                                  \\"show\\": true,
                                  \\"thresholdLabels\\": false,
                                  \\"thresholdMarkers\\": true
                              },
                              \\"id\\": 6,
                              \\"interval\\": null,
                              \\"links\\": [],
                              \\"mappingType\\": 1,
                              \\"mappingTypes\\": [
                                  {
                                      \\"name\\": \\"value to text\\",
                                      \\"value\\": 1
                                  },
                                  {
                                      \\"name\\": \\"range to text\\",
                                      \\"value\\": 2
                                  }
                              ],
                              \\"maxDataPoints\\": 100,
                              \\"nullPointMode\\": \\"connected\\",
                              \\"nullText\\": null,
                              \\"postfix\\": \\"\\",
                              \\"postfixFontSize\\": \\"50%\\",
                              \\"prefix\\": \\"\\",
                              \\"prefixFontSize\\": \\"50%\\",
                              \\"rangeMaps\\": [
                                  {
                                      \\"from\\": \\"null\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"to\\": \\"null\\"
                                  }
                              ],
                              \\"span\\": 3,
                              \\"sparkline\\": {
                                  \\"fillColor\\": \\"rgba(31, 118, 189, 0.78)\\",
                                  \\"full\\": false,
                                  \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                  \\"show\\": true
                              },
                              \\"tableColumn\\": \\"Value\\",
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"table\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 20,
                                      \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total\\"
                                  }
                              ],
                              \\"thresholds\\": \\"\\",
                              \\"title\\": \\"Total Successful hits\\",
                              \\"type\\": \\"singlestat\\",
                              \\"valueFontSize\\": \\"80%\\",
                              \\"valueMaps\\": [
                                  {
                                      \\"op\\": \\"=\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"value\\": \\"null\\"
                                  }
                              ],
                              \\"valueName\\": \\"total\\"
                          },
                          {
                              \\"cacheTimeout\\": null,
                              \\"colorBackground\\": false,
                              \\"colorValue\\": false,
                              \\"colors\\": [
                                  \\"rgba(245, 54, 54, 0.9)\\",
                                  \\"rgba(237, 129, 40, 0.89)\\",
                                  \\"rgba(50, 172, 45, 0.97)\\"
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"Number of server errors and bad requests\\",
                              \\"format\\": \\"none\\",
                              \\"gauge\\": {
                                  \\"maxValue\\": 1,
                                  \\"minValue\\": 0,
                                  \\"show\\": true,
                                  \\"thresholdLabels\\": false,
                                  \\"thresholdMarkers\\": true
                              },
                              \\"id\\": 7,
                              \\"interval\\": null,
                              \\"links\\": [],
                              \\"mappingType\\": 1,
                              \\"mappingTypes\\": [
                                  {
                                      \\"name\\": \\"value to text\\",
                                      \\"value\\": 1
                                  },
                                  {
                                      \\"name\\": \\"range to text\\",
                                      \\"value\\": 2
                                  }
                              ],
                              \\"maxDataPoints\\": 100,
                              \\"nullPointMode\\": \\"connected\\",
                              \\"nullText\\": null,
                              \\"postfix\\": \\"\\",
                              \\"postfixFontSize\\": \\"50%\\",
                              \\"prefix\\": \\"\\",
                              \\"prefixFontSize\\": \\"50%\\",
                              \\"rangeMaps\\": [
                                  {
                                      \\"from\\": \\"null\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"to\\": \\"null\\"
                                  }
                              ],
                              \\"span\\": 3,
                              \\"sparkline\\": {
                                  \\"fillColor\\": \\"rgba(31, 118, 189, 0.18)\\",
                                  \\"full\\": false,
                                  \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                  \\"show\\": false
                              },
                              \\"tableColumn\\": \\"Value\\",
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"} + com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_badRequest_total{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 20,
                                      \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total\\"
                                  }
                              ],
                              \\"thresholds\\": \\"1\\",
                              \\"title\\": \\"Total Bad hits\\",
                              \\"type\\": \\"singlestat\\",
                              \\"valueFontSize\\": \\"70%\\",
                              \\"valueMaps\\": [
                                  {
                                      \\"op\\": \\"=\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"value\\": \\"null\\"
                                  }
                              ],
                              \\"valueName\\": \\"total\\"
                          },
                          {
                              \\"cacheTimeout\\": null,
                              \\"colorBackground\\": false,
                              \\"colorValue\\": false,
                              \\"colors\\": [
                                  \\"rgba(245, 54, 54, 0.9)\\",
                                  \\"rgba(237, 129, 40, 0.89)\\",
                                  \\"rgba(50, 172, 45, 0.97)\\"
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"Number of 404 not found requests\\",
                              \\"format\\": \\"none\\",
                              \\"gauge\\": {
                                  \\"maxValue\\": 1,
                                  \\"minValue\\": 0,
                                  \\"show\\": true,
                                  \\"thresholdLabels\\": false,
                                  \\"thresholdMarkers\\": true
                              },
                              \\"id\\": 8,
                              \\"interval\\": null,
                              \\"links\\": [],
                              \\"mappingType\\": 1,
                              \\"mappingTypes\\": [
                                  {
                                      \\"name\\": \\"value to text\\",
                                      \\"value\\": 1
                                  },
                                  {
                                      \\"name\\": \\"range to text\\",
                                      \\"value\\": 2
                                  }
                              ],
                              \\"maxDataPoints\\": 100,
                              \\"nullPointMode\\": \\"connected\\",
                              \\"nullText\\": null,
                              \\"postfix\\": \\"\\",
                              \\"postfixFontSize\\": \\"50%\\",
                              \\"prefix\\": \\"\\",
                              \\"prefixFontSize\\": \\"50%\\",
                              \\"rangeMaps\\": [
                                  {
                                      \\"from\\": \\"null\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"to\\": \\"null\\"
                                  }
                              ],
                              \\"span\\": 3,
                              \\"sparkline\\": {
                                  \\"fillColor\\": \\"rgba(31, 118, 189, 0.18)\\",
                                  \\"full\\": false,
                                  \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                  \\"show\\": false
                              },
                              \\"tableColumn\\": \\"\\",
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 20,
                                      \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total\\"
                                  }
                              ],
                              \\"thresholds\\": \\"1\\",
                              \\"title\\": \\"Trace 404 hits\\",
                              \\"type\\": \\"singlestat\\",
                              \\"valueFontSize\\": \\"80%\\",
                              \\"valueMaps\\": [
                                  {
                                      \\"op\\": \\"=\\",
                                      \\"text\\": \\"N/A\\",
                                      \\"value\\": \\"null\\"
                                  }
                              ],
                              \\"valueName\\": \\"total\\"
                          },
                          {
                              \\"id\\": 30,
                              \\"title\\": \\"Active Requests\\",
                              \\"span\\": 12,
                              \\"type\\": \\"graph\\",
                              \\"targets\\": [
                                  {
                                      \\"refId\\": \\"A\\",
                                      \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_activeRequests{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_activeRequests\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"{{service}}\\"
                                  }
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"renderer\\": \\"flot\\",
                              \\"yaxes\\": [
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": null,
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  },
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": null,
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  }
                              ],
                              \\"xaxis\\": {
                                  \\"show\\": true,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"values\\": [
                                      \\"total\\"
                                  ],
                                  \\"buckets\\": null
                              },
                              \\"lines\\": true,
                              \\"fill\\": 1,
                              \\"linewidth\\": 2,
                              \\"dashes\\": false,
                              \\"dashLength\\": 10,
                              \\"spaceLength\\": 10,
                              \\"points\\": false,
                              \\"pointradius\\": 5,
                              \\"bars\\": false,
                              \\"stack\\": false,
                              \\"percentage\\": false,
                              \\"legend\\": {
                                  \\"show\\": true,
                                  \\"values\\": true,
                                  \\"min\\": true,
                                  \\"max\\": true,
                                  \\"current\\": true,
                                  \\"total\\": false,
                                  \\"avg\\": true,
                                  \\"alignAsTable\\": true
                              },
                              \\"nullPointMode\\": \\"null\\",
                              \\"steppedLine\\": false,
                              \\"tooltip\\": {
                                  \\"value_type\\": \\"individual\\",
                                  \\"shared\\": false,
                                  \\"sort\\": 0
                              },
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"aliasColors\\": {},
                              \\"seriesOverrides\\": [],
                              \\"thresholds\\": [],
                              \\"links\\": []
                          }
                      ],
                      \\"repeat\\": null,
                      \\"repeatIteration\\": null,
                      \\"repeatRowId\\": null,
                      \\"showTitle\\": true,
                      \\"title\\": \\"Requests Metrics\\",
                      \\"titleSize\\": \\"h6\\"
                  },
                  {
                      \\"collapse\\": false,
                      \\"height\\": 250,
                      \\"panels\\": [
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"The current number of live threads including daemon and non-daemon and runnable threads\\",
                              \\"fill\\": 4,
                              \\"id\\": 10,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true,
                                  \\"rightSide\\": false,
                                  \\"hideEmpty\\": false
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 2,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": true,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_threads_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Total threads\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_threads_count\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_threads_daemon_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"B\\",
                                      \\"metric\\": \\"jvm_threads_daemon_count\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Daemon threads\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_threads_runnable_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"C\\",
                                      \\"metric\\": \\"jvm_threads_runnable_count\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Runnable threads\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Live Threads\\",
                              \\"tooltip\\": {
                                  \\"shared\\": false,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": [
                                      \\"total\\"
                                  ]
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  }
                              ],
                              \\"transparent\\": false
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"The current number of blocked and deadlock threads\\",
                              \\"fill\\": 1,
                              \\"id\\": 11,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_threads_blocked_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Blocked threads\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_threads_blocked_count\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_threads_deadlock_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"B\\",
                                      \\"metric\\": \\"jvm_threads_deadlock_count\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Deadlock threads\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Blocked and Deadlock Threads\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  }
                              ]
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"The current number of waiting threads\\",
                              \\"fill\\": 1,
                              \\"id\\": 12,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_threads_waiting_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Waiting threads\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_threads_waiting_count\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Waiting Threads\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  }
                              ]
                          }
                      ],
                      \\"repeat\\": null,
                      \\"repeatIteration\\": null,
                      \\"repeatRowId\\": null,
                      \\"showTitle\\": true,
                      \\"title\\": \\"Thread Metrics\\",
                      \\"titleSize\\": \\"h6\\"
                  },
                  {
                      \\"collapse\\": false,
                      \\"height\\": 250,
                      \\"panels\\": [
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"An estimate of the number of buffers in the pool\\",
                              \\"fill\\": 1,
                              \\"id\\": 13,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_buffers_direct_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"{{service}}\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_buffers_direct_count\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Buffer Count\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  }
                              ]
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"An estimate of the memory that the Java virtual machine is using for this buffer pool\\",
                              \\"fill\\": 1,
                              \\"id\\": 14,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_buffers_direct_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"{{service}}\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_buffers_direct_used\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Buffer Mem Used\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  }
                              ]
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"An estimate of the total capacity of the buffers in this pool\\",
                              \\"fill\\": 1,
                              \\"id\\": 15,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": false,
                                  \\"current\\": true,
                                  \\"max\\": false,
                                  \\"min\\": false,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_buffers_direct_capacity{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"{{service}}\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_buffers_direct_capacity\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Buffer Capacity\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  }
                              ]
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"The total amount of heap memory\\",
                              \\"fill\\": 1,
                              \\"id\\": 18,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_memory_heap_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Used\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_memory_heap_used\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_heap_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"B\\",
                                      \\"metric\\": \\"jvm_memory_heap_max\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Maximum\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_heap_committed{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"C\\",
                                      \\"metric\\": \\"jvm_memory_heap_committed\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Committed\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Heap Memory\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  }
                              ]
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"The amount of used, committed and max memory\\",
                              \\"fill\\": 1,
                              \\"id\\": 16,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_memory_total_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Used\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_memory_total_used\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_total_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"B\\",
                                      \\"metric\\": \\"jvm_memory_total_max\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Max\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_total_committed{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"C\\",
                                      \\"metric\\": \\"jvm_memory_total_committed\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Committed\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Total Memory\\",
                              \\"tooltip\\": {
                                  \\"shared\\": false,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": [
                                      \\"total\\"
                                  ]
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  }
                              ]
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"The total amount of  non heap memory\\",
                              \\"fill\\": 1,
                              \\"id\\": 17,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 4,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_memory_non_heap_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Non Heap Used\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 4,
                                      \\"metric\\": \\"jvm_memory_non_heap_used\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_non_heap_committed{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"B\\",
                                      \\"metric\\": \\"jvm_memory_non_heap_max\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Non Heap Committed\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_pools_Metaspace_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"C\\",
                                      \\"metric\\": \\"jvm_memory_pools_Metaspace_used\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Metaspace Used\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_pools_Code_Cache_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"D\\",
                                      \\"metric\\": \\"jvm_memory_pools_Code_Cache_used\\",
                                      \\"step\\": 4,
                                      \\"legendFormat\\": \\"Code Cache Used\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Other Memory\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  }
                              ]
                          }
                      ],
                      \\"repeat\\": null,
                      \\"repeatIteration\\": null,
                      \\"repeatRowId\\": null,
                      \\"showTitle\\": true,
                      \\"title\\": \\"Memory Metrics\\",
                      \\"titleSize\\": \\"h6\\"
                  },
                  {
                      \\"collapse\\": false,
                      \\"height\\": 250,
                      \\"panels\\": [
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"Memory space of new generation\\",
                              \\"fill\\": 2,
                              \\"id\\": 19,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 2,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 6,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_memory_pools_PS_Eden_Space_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Used\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 2,
                                      \\"metric\\": \\"jvm_memory_pools_PS_Eden_Space_used\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_pools_PS_Eden_Space_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"B\\",
                                      \\"metric\\": \\"jvm_memory_pools_PS_Eden_Space_max\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"Max\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Eden Space\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  }
                              ]
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"Memory space of new generation\\",
                              \\"fill\\": 1,
                              \\"id\\": 20,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 6,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_memory_pools_PS_Survivor_Space_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Used\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 2,
                                      \\"metric\\": \\"jvm_memory_pools_PS_Old_Gen_used\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_pools_PS_Survivor_Space_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"B\\",
                                      \\"metric\\": \\"\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"Max\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Survivor Space\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  }
                              ]
                          },
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"Memory space of old generation\\",
                              \\"fill\\": 1,
                              \\"id\\": 24,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 12,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"jvm_memory_pools_PS_Old_Gen_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"Used\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 2,
                                      \\"metric\\": \\"jvm_memory_pools_PS_Old_Gen_used\\"
                                  },
                                  {
                                      \\"expr\\": \\"jvm_memory_pools_PS_Old_Gen_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"refId\\": \\"B\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"Max\\"
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"Old Generation\\",
                              \\"tooltip\\": {
                                  \\"shared\\": true,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": []
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"decbytes\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"s\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": null,
                                      \\"show\\": true
                                  }
                              ]
                          }
                      ],
                      \\"repeat\\": null,
                      \\"repeatIteration\\": null,
                      \\"repeatRowId\\": null,
                      \\"showTitle\\": true,
                      \\"title\\": \\"Memory Space Metrics\\",
                      \\"titleSize\\": \\"h6\\"
                  },
                  {
                      \\"collapse\\": false,
                      \\"height\\": 250,
                      \\"panels\\": [
                          {
                              \\"id\\": 31,
                              \\"title\\": \\"Cache Hits\\",
                              \\"span\\": 6,
                              \\"type\\": \\"graph\\",
                              \\"targets\\": [
                                  {
                                      \\"refId\\": \\"A\\",
                                      \\"expr\\": \\"{__name__=~\\\\\\"^jcache_statistics.*cache_hits\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"{{__name__}}\\"
                                  }
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"renderer\\": \\"flot\\",
                              \\"yaxes\\": [
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": null,
                                      \\"format\\": \\"none\\"
                                  },
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  }
                              ],
                              \\"xaxis\\": {
                                  \\"show\\": true,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"values\\": [
                                      \\"total\\"
                                  ],
                                  \\"buckets\\": null
                              },
                              \\"lines\\": true,
                              \\"fill\\": 1,
                              \\"linewidth\\": 1,
                              \\"dashes\\": false,
                              \\"dashLength\\": 10,
                              \\"spaceLength\\": 10,
                              \\"points\\": false,
                              \\"pointradius\\": 5,
                              \\"bars\\": false,
                              \\"stack\\": false,
                              \\"percentage\\": false,
                              \\"legend\\": {
                                  \\"show\\": true,
                                  \\"values\\": true,
                                  \\"min\\": true,
                                  \\"max\\": true,
                                  \\"current\\": true,
                                  \\"total\\": true,
                                  \\"avg\\": true,
                                  \\"alignAsTable\\": true
                              },
                              \\"nullPointMode\\": \\"null\\",
                              \\"steppedLine\\": false,
                              \\"tooltip\\": {
                                  \\"value_type\\": \\"individual\\",
                                  \\"shared\\": false,
                                  \\"sort\\": 0
                              },
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"aliasColors\\": {},
                              \\"seriesOverrides\\": [],
                              \\"thresholds\\": [],
                              \\"links\\": [],
                              \\"description\\": \\"The total number of cache hits\\"
                          },
                          {
                              \\"id\\": 32,
                              \\"title\\": \\"Cache Misses\\",
                              \\"span\\": 6,
                              \\"type\\": \\"graph\\",
                              \\"targets\\": [
                                  {
                                      \\"refId\\": \\"A\\",
                                      \\"expr\\": \\"{__name__=~\\\\\\"^jcache_statistics.*cache_misses\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"{{__name__}}\\"
                                  }
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"renderer\\": \\"flot\\",
                              \\"yaxes\\": [
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  },
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  }
                              ],
                              \\"xaxis\\": {
                                  \\"show\\": true,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"values\\": [],
                                  \\"buckets\\": null
                              },
                              \\"lines\\": true,
                              \\"fill\\": 1,
                              \\"linewidth\\": 1,
                              \\"dashes\\": false,
                              \\"dashLength\\": 10,
                              \\"spaceLength\\": 10,
                              \\"points\\": false,
                              \\"pointradius\\": 5,
                              \\"bars\\": false,
                              \\"stack\\": false,
                              \\"percentage\\": false,
                              \\"legend\\": {
                                  \\"show\\": true,
                                  \\"values\\": true,
                                  \\"min\\": true,
                                  \\"max\\": true,
                                  \\"current\\": true,
                                  \\"total\\": true,
                                  \\"avg\\": true,
                                  \\"alignAsTable\\": true
                              },
                              \\"nullPointMode\\": \\"null\\",
                              \\"steppedLine\\": false,
                              \\"tooltip\\": {
                                  \\"value_type\\": \\"individual\\",
                                  \\"shared\\": true,
                                  \\"sort\\": 0
                              },
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"aliasColors\\": {},
                              \\"seriesOverrides\\": [],
                              \\"thresholds\\": [],
                              \\"links\\": [],
                              \\"description\\": \\"The total number of cache misses\\"
                          },
                          {
                              \\"id\\": 33,
                              \\"title\\": \\"Cache Gets\\",
                              \\"span\\": 6,
                              \\"type\\": \\"graph\\",
                              \\"targets\\": [
                                  {
                                      \\"refId\\": \\"A\\",
                                      \\"expr\\": \\"{__name__=~\\\\\\"^jcache_statistics.*cache_gets\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"{{__name__}}\\"
                                  }
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"renderer\\": \\"flot\\",
                              \\"yaxes\\": [
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  },
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  }
                              ],
                              \\"xaxis\\": {
                                  \\"show\\": true,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"values\\": [],
                                  \\"buckets\\": null
                              },
                              \\"lines\\": true,
                              \\"fill\\": 1,
                              \\"linewidth\\": 1,
                              \\"dashes\\": false,
                              \\"dashLength\\": 10,
                              \\"spaceLength\\": 10,
                              \\"points\\": false,
                              \\"pointradius\\": 5,
                              \\"bars\\": false,
                              \\"stack\\": false,
                              \\"percentage\\": false,
                              \\"legend\\": {
                                  \\"show\\": true,
                                  \\"values\\": true,
                                  \\"min\\": true,
                                  \\"max\\": true,
                                  \\"current\\": true,
                                  \\"total\\": true,
                                  \\"avg\\": true,
                                  \\"alignAsTable\\": true
                              },
                              \\"nullPointMode\\": \\"null\\",
                              \\"steppedLine\\": false,
                              \\"tooltip\\": {
                                  \\"value_type\\": \\"individual\\",
                                  \\"shared\\": true,
                                  \\"sort\\": 0
                              },
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"aliasColors\\": {},
                              \\"seriesOverrides\\": [],
                              \\"thresholds\\": [],
                              \\"links\\": [],
                              \\"description\\": \\"The total number of cache gets\\"
                          },
                          {
                              \\"id\\": 34,
                              \\"title\\": \\"Cache Puts\\",
                              \\"span\\": 6,
                              \\"type\\": \\"graph\\",
                              \\"targets\\": [
                                  {
                                      \\"refId\\": \\"A\\",
                                      \\"expr\\": \\"{__name__=~\\\\\\"^jcache_statistics.*cache_puts\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"}\\",
                                      \\"intervalFactor\\": 2,
                                      \\"format\\": \\"time_series\\",
                                      \\"step\\": 2,
                                      \\"legendFormat\\": \\"{{__name__}}\\"
                                  }
                              ],
                              \\"datasource\\": \\"prometheus\\",
                              \\"renderer\\": \\"flot\\",
                              \\"yaxes\\": [
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  },
                                  {
                                      \\"label\\": null,
                                      \\"show\\": true,
                                      \\"logBase\\": 1,
                                      \\"min\\": \\"0\\",
                                      \\"max\\": null,
                                      \\"format\\": \\"short\\"
                                  }
                              ],
                              \\"xaxis\\": {
                                  \\"show\\": true,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"values\\": [],
                                  \\"buckets\\": null
                              },
                              \\"lines\\": true,
                              \\"fill\\": 1,
                              \\"linewidth\\": 1,
                              \\"dashes\\": false,
                              \\"dashLength\\": 10,
                              \\"spaceLength\\": 10,
                              \\"points\\": false,
                              \\"pointradius\\": 5,
                              \\"bars\\": false,
                              \\"stack\\": false,
                              \\"percentage\\": false,
                              \\"legend\\": {
                                  \\"show\\": true,
                                  \\"values\\": true,
                                  \\"min\\": true,
                                  \\"max\\": true,
                                  \\"current\\": true,
                                  \\"total\\": true,
                                  \\"avg\\": true,
                                  \\"alignAsTable\\": true
                              },
                              \\"nullPointMode\\": \\"null\\",
                              \\"steppedLine\\": false,
                              \\"tooltip\\": {
                                  \\"value_type\\": \\"individual\\",
                                  \\"shared\\": true,
                                  \\"sort\\": 0
                              },
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"aliasColors\\": {},
                              \\"seriesOverrides\\": [],
                              \\"thresholds\\": [],
                              \\"links\\": [],
                              \\"description\\": \\"The total number of cache puts\\"
                          }
                      ],
                      \\"repeat\\": null,
                      \\"repeatIteration\\": null,
                      \\"repeatRowId\\": null,
                      \\"showTitle\\": true,
                      \\"title\\": \\"Cache Metrics\\",
                      \\"titleSize\\": \\"h6\\"
                  },
                  {
                      \\"collapse\\": false,
                      \\"height\\": 250,
                      \\"panels\\": [
                          {
                              \\"aliasColors\\": {},
                              \\"bars\\": false,
                              \\"dashLength\\": 10,
                              \\"dashes\\": false,
                              \\"datasource\\": \\"prometheus\\",
                              \\"description\\": \\"Count of REST requests\\",
                              \\"fill\\": 1,
                              \\"id\\": 27,
                              \\"legend\\": {
                                  \\"alignAsTable\\": true,
                                  \\"avg\\": true,
                                  \\"current\\": true,
                                  \\"max\\": true,
                                  \\"min\\": true,
                                  \\"show\\": true,
                                  \\"total\\": false,
                                  \\"values\\": true
                              },
                              \\"lines\\": true,
                              \\"linewidth\\": 1,
                              \\"links\\": [],
                              \\"nullPointMode\\": \\"null\\",
                              \\"percentage\\": false,
                              \\"pointradius\\": 5,
                              \\"points\\": false,
                              \\"renderer\\": \\"flot\\",
                              \\"seriesOverrides\\": [],
                              \\"spaceLength\\": 10,
                              \\"span\\": 12,
                              \\"stack\\": false,
                              \\"steppedLine\\": false,
                              \\"targets\\": [
                                  {
                                      \\"expr\\": \\"{__name__=~\\\\\\".*rest.*_count\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"} \\",
                                      \\"format\\": \\"time_series\\",
                                      \\"intervalFactor\\": 2,
                                      \\"legendFormat\\": \\"{{__name__}}\\",
                                      \\"refId\\": \\"A\\",
                                      \\"step\\": 2
                                  }
                              ],
                              \\"thresholds\\": [],
                              \\"timeFrom\\": null,
                              \\"timeShift\\": null,
                              \\"title\\": \\"REST Requests Metrics\\",
                              \\"tooltip\\": {
                                  \\"shared\\": false,
                                  \\"sort\\": 0,
                                  \\"value_type\\": \\"individual\\"
                              },
                              \\"type\\": \\"graph\\",
                              \\"xaxis\\": {
                                  \\"buckets\\": null,
                                  \\"mode\\": \\"time\\",
                                  \\"name\\": null,
                                  \\"show\\": true,
                                  \\"values\\": [
                                      \\"total\\"
                                  ]
                              },
                              \\"yaxes\\": [
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  },
                                  {
                                      \\"format\\": \\"short\\",
                                      \\"label\\": null,
                                      \\"logBase\\": 1,
                                      \\"max\\": null,
                                      \\"min\\": \\"0\\",
                                      \\"show\\": true
                                  }
                              ],
                              \\"decimals\\": 0
                          }
                      ],
                      \\"repeat\\": null,
                      \\"repeatIteration\\": null,
                      \\"repeatRowId\\": null,
                      \\"showTitle\\": true,
                      \\"title\\": \\"REST Metrics\\",
                      \\"titleSize\\": \\"h6\\"
                  }
              ],
              \\"schemaVersion\\": 14,
              \\"style\\": \\"dark\\",
              \\"tags\\": [
                  \\"java\\",
                  \\"jhipster\\",
                  \\"spring-boot\\"
              ],
              \\"templating\\": {
                  \\"list\\": [
                      {
                          \\"allValue\\": null,
                          \\"current\\": {},
                          \\"datasource\\": \\"prometheus\\",
                          \\"hide\\": 0,
                          \\"includeAll\\": false,
                          \\"label\\": \\"Namespace\\",
                          \\"multi\\": false,
                          \\"name\\": \\"namespace\\",
                          \\"options\\": [],
                          \\"query\\": \\"label_values(jvm_files, namespace)\\",
                          \\"refresh\\": 2,
                          \\"regex\\": \\"\\",
                          \\"sort\\": 1,
                          \\"tagValuesQuery\\": \\"\\",
                          \\"tags\\": [],
                          \\"tagsQuery\\": \\"\\",
                          \\"type\\": \\"query\\",
                          \\"useTags\\": false
                      },
                      {
                          \\"allValue\\": null,
                          \\"current\\": {},
                          \\"datasource\\": \\"prometheus\\",
                          \\"hide\\": 0,
                          \\"includeAll\\": false,
                          \\"label\\": \\"Service Name\\",
                          \\"multi\\": false,
                          \\"name\\": \\"service_name\\",
                          \\"options\\": [],
                          \\"query\\": \\"label_values(jvm_files, service)\\",
                          \\"refresh\\": 2,
                          \\"regex\\": \\"\\",
                          \\"sort\\": 1,
                          \\"tagValuesQuery\\": \\"\\",
                          \\"tags\\": [],
                          \\"tagsQuery\\": \\"\\",
                          \\"type\\": \\"query\\",
                          \\"useTags\\": false
                      }
                  ]
              },
              \\"time\\": {
                  \\"from\\": \\"now-15m\\",
                  \\"to\\": \\"now\\"
              },
              \\"timepicker\\": {
                  \\"refresh_intervals\\": [
                      \\"5s\\",
                      \\"10s\\",
                      \\"30s\\",
                      \\"1m\\",
                      \\"5m\\",
                      \\"15m\\",
                      \\"30m\\",
                      \\"1h\\",
                      \\"2h\\",
                      \\"1d\\"
                  ],
                  \\"time_options\\": [
                      \\"5m\\",
                      \\"15m\\",
                      \\"1h\\",
                      \\"6h\\",
                      \\"12h\\",
                      \\"24h\\",
                      \\"2d\\",
                      \\"7d\\",
                      \\"30d\\"
                  ]
              },
              \\"timezone\\": \\"\\",
              \\"title\\": \\"JHipster Metrics\\",
              \\"version\\": 3
          }
",
    "stateCleared": "modified",
  },
  "helm-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
kubectl apply -f namespace.yml
kubectl label namespace mynamespace istio-injection=enabled
helmVersion=$(helm version --client | grep -E \\"v3\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\" | wc -l)
if [ -d \\"\${cs}-\${suffix}\\" ]; then
    if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
    else
helm delete --purge \${cs} 2>/dev/null
    fi
helm dep up ./\${cs}-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace mynamespace
    else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace mynamespace
    fi
fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
    else
helm delete --purge msmysql 2>/dev/null
    fi
helm dep up ./msmysql-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace mynamespace
    else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace mynamespace
    fi
",
    "stateCleared": "modified",
  },
  "helm-knative-upgrade.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
if [ -d \\"\${cs}-\${suffix}\\" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace mynamespace
fi
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace mynamespace
",
    "stateCleared": "modified",
  },
  "msmysql-knative/Chart.yaml": Object {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: mynamespace
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.mynamespace.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
                  value: \\"true\\"
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: mynamespace
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: mynamespace
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmysql-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "namespace.yml": Object {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using Helm generator type mysql microservice with custom namespace should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"02-mysql\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"mynamespace\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"helm\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash helm-knative-apply.sh (or) ./helm-knative-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-knative-upgrade.sh (or) ./helm-knative-upgrade.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "csvc-knative/Chart.yaml": Object {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/requirements.yml": Object {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: mynamespace
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: mynamespace
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: mynamespace
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-knative/values.yml": Object {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
kubectl apply -f namespace.yml
kubectl label namespace mynamespace istio-injection=enabled
helmVersion=$(helm version --client | grep -E \\"v3\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\" | wc -l)
if [ -d \\"\${cs}-\${suffix}\\" ]; then
    if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
    else
helm delete --purge \${cs} 2>/dev/null
    fi
helm dep up ./\${cs}-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace mynamespace
    else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace mynamespace
    fi
fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall msmysql 2>/dev/null
    else
helm delete --purge msmysql 2>/dev/null
    fi
helm dep up ./msmysql-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install msmysql  ./msmysql-\${suffix} --replace --namespace mynamespace
    else
helm install --name msmysql  ./msmysql-\${suffix} --replace --namespace mynamespace
    fi
",
    "stateCleared": "modified",
  },
  "helm-knative-upgrade.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
if [ -d \\"\${cs}-\${suffix}\\" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace mynamespace
fi
helm dep up ./msmysql-\${suffix}
helm upgrade --install msmysql ./msmysql-\${suffix} --namespace mynamespace
",
    "stateCleared": "modified",
  },
  "msmysql-knative/Chart.yaml": Object {
    "contents": "name: msmysql
version: 1.0.0
appVersion: 1.0.0
description: msmysql is a JHipster based microservice application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- msmysql
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"msmysql-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: mynamespace
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.mynamespace.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/templates/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: mynamespace
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: mynamespace
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmysql-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: msmysql
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "namespace.yml": Object {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using Helm generator type only gateway should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"01-gateway\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipsterrepository\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"jhipsternamespace\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"helm\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipsterrepository/jhgate
$ docker push jhipsterrepository/jhgate
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash helm-knative-apply.sh (or) ./helm-knative-apply.sh
\`\`\`

\`helm-apply.sh\` will always do a clean install. Any of the existing charts with the same identity gets removed first and then it does a clean install.

You can upgrade all your apps (if you have made any changes to the generated manifests) by running the following bash command:

\`\`\`
bash helm-knative-upgrade.sh (or) ./helm-knative-upgrade.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "csvc-knative/Chart.yaml": Object {
    "contents": "name: common-service
version: 1.0.0
appVersion: 1.0.0
description: JHipster common cross cutting services
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- search
- messaging
- monitor
- telemetry
- tracing
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/requirements.yml": Object {
    "contents": "dependencies:
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}

",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: jhipsternamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: jhipsternamespace
type: Opaque
data:
  registry-admin-password: SECRET-meetup-50 # base64 encoded \\"meetup\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: jhipsternamespace
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: jhipsternamespace
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "csvc-knative/templates/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "csvc-knative/values.yml": Object {
    "contents": "",
    "stateCleared": "modified",
  },
  "helm-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
kubectl apply -f namespace.yml
kubectl label namespace jhipsternamespace istio-injection=enabled
helmVersion=$(helm version --client | grep -E \\"v3\\\\\\\\.[0-9]{1,3}\\\\\\\\.[0-9]{1,3}\\" | wc -l)
if [ -d \\"\${cs}-\${suffix}\\" ]; then
    if [ $helmVersion -eq 1 ]; then
helm uninstall \${cs} 2>/dev/null
    else
helm delete --purge \${cs} 2>/dev/null
    fi
helm dep up ./\${cs}-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install \${cs} ./\${cs}-\${suffix} --replace --namespace jhipsternamespace
    else
helm install --name \${cs} ./\${cs}-\${suffix} --replace --namespace jhipsternamespace
    fi
fi
    if [ $helmVersion -eq 1 ]; then
helm uninstall jhgate 2>/dev/null
    else
helm delete --purge jhgate 2>/dev/null
    fi
helm dep up ./jhgate-\${suffix}
    if [ $helmVersion -eq 1 ]; then
helm install jhgate  ./jhgate-\${suffix} --replace --namespace jhipsternamespace
    else
helm install --name jhgate  ./jhgate-\${suffix} --replace --namespace jhipsternamespace
    fi
",
    "stateCleared": "modified",
  },
  "helm-knative-upgrade.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash helm-apply.sh
cs=csvc
suffix=knative
if [ -d \\"\${cs}-\${suffix}\\" ]; then
helm dep up ./\${cs}-\${suffix}
helm upgrade --install \${cs} ./\${cs}-\${suffix} --namespace jhipsternamespace
fi
helm dep up ./jhgate-\${suffix}
helm upgrade --install jhgate ./jhgate-\${suffix} --namespace jhipsternamespace
",
    "stateCleared": "modified",
  },
  "jhgate-knative/Chart.yaml": Object {
    "contents": "name: jhgate
version: 1.0.0
appVersion: 1.0.0
description: jhgate is a JHipster based gateway application
icon: https://www.jhipster.tech/images/logo/logo-jhipster-drink-coffee.svg
keywords:
- spring
- angular
- react
- JHipster
- jhgate
home: https://www.jhipster.tech/
sources:
- https://github.com/jhipster/generator-jhipster.git
maintainers:
- name: Team JHipster
  email:
dependencies:
- name: mysql
  version: ^1.4.0
  repository: https://charts.helm.sh/stable
  condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/requirements.yml": Object {
    "contents": "dependencies:
  - name: mysql
    version: ^1.4.0
    repository: https://charts.helm.sh/stable
    condition: mysql.enabled
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/_helpers.tpl": Object {
    "contents": "{{/* vim: set filetype=mustache: */}}
{{/*
mysql customisation
*/}}
{{- define \\"mysql.name\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}

{{- define \\"mysql.fullname\\" -}}
{{- default \\"jhgate-mysql\\" -}}
{{- end -}}
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: jhipsternamespace
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: jhipsternamespace
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.jhipsternamespace.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.jhipsternamespace.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: jhipsternamespace
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.jhipsternamespace.
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: jhipsternamespace
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: jhipsternamespace
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipsterrepository/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.jhipsternamespace.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/templates/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: jhipsternamespace
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: jhipsternamespace
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "jhgate-knative/values.yml": Object {
    "contents": "mysql:
  enabled: true
  mysqlDatabase: jhgate
  mysqlAllowEmptyPassword: true
  podAnnotations:
    sidecar.istio.io/inject: \\"false\\"
  initializationFiles:
    grant.sql: |-
      grant all privileges on *.* to root@'%' identified by '' with grant option;
",
    "stateCleared": "modified",
  },
  "namespace.yml": Object {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: jhipsternamespace
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using K8s generator type MySQL and PostgreSQL microservices without gateway should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"02-mysql\\", \\"03-psql\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"k8s\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
    $ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash kubectl-knative-apply.sh (or) ./kubectl-knative-apply.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "istio-knative/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-knative/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-knative/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "kubectl-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-knative-apply.sh

logSummary(){
    echo \\"\\"
        echo \\"#####################################################\\"
        echo \\"Please find the below useful endpoints,\\"
        echo \\"Jaeger - http://jaeger.istio-system.\\"
        echo \\"Grafana - http://grafana.istio-system.\\"
        echo \\"Kiali - http://kiali.istio-system.\\"
        echo \\"#####################################################\\"
}

suffix=knative
kubectl apply -f registry-\${suffix}/
kubectl label namespace default istio-injection=enabled --overwrite=true
kubectl apply -f msmysql-\${suffix}/
kubectl apply -f mspsql-\${suffix}/

kubectl apply -f istio-\${suffix}/

logSummary
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: default
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: mspsql-destinationrule
  namespace: default
spec:
  host: mspsql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-elasticsearch.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.13.3
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"2Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-postgresql.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: mspsql-postgresql
  namespace: default
  labels:
    app: mspsql-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-postgresql
  template:
    metadata:
      labels:
        app: mspsql-postgresql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: postgres
          image: postgres:13.5
          env:
            - name: POSTGRES_USER
              value: mspsql
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  selector:
    app: mspsql-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: mspsql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: mspsql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: mspsql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: mspsql
            version: \\"v1\\"
        spec:
          containers:
            - name: mspsql-app
              image: jhipster/mspsql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: mspsql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
                - name: SPRING_DATASOURCE_USERNAME
                  value: mspsql
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mspsql-postgresql
                      key: postgresql-password
                - name: SPRING_ELASTICSEARCH_REST_URIS
                  value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: mspsql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - mspsql-knative
  http:
    - route:
        - destination:
            host: mspsql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: mspsql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "registry-knative/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-knative/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using K8s generator type gateway and ingress should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"01-gateway\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"k8s\\",
    \\"ingressDomain\\": \\"example.com\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash kubectl-knative-apply.sh (or) ./kubectl-knative-apply.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "istio-knative/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.example.com
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-knative/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.example.com
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-knative/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.example.com
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.example.com
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipster/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "kubectl-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-knative-apply.sh

logSummary(){
    echo \\"\\"
        echo \\"#####################################################\\"
        echo \\"Please find the below useful endpoints,\\"
        echo \\"Gateway - http://jhgate.default.example.com\\"
        echo \\"Jaeger - http://jaeger.istio-system.example.com\\"
        echo \\"Grafana - http://grafana.istio-system.example.com\\"
        echo \\"Kiali - http://kiali.istio-system.example.com\\"
        echo \\"#####################################################\\"
}

suffix=knative
kubectl apply -f registry-\${suffix}/
kubectl label namespace default istio-injection=enabled --overwrite=true
kubectl apply -f jhgate-\${suffix}/

kubectl apply -f istio-\${suffix}/

logSummary
",
    "stateCleared": "modified",
  },
  "registry-knative/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-knative/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using K8s generator type gateway and mysql microservice should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"01-gateway\\", \\"02-mysql\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"k8s\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash kubectl-knative-apply.sh (or) ./kubectl-knative-apply.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "istio-knative/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-knative/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-knative/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipster/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "kubectl-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-knative-apply.sh

logSummary(){
    echo \\"\\"
        echo \\"#####################################################\\"
        echo \\"Please find the below useful endpoints,\\"
        echo \\"Gateway - http://jhgate.default.\\"
        echo \\"Jaeger - http://jaeger.istio-system.\\"
        echo \\"Grafana - http://grafana.istio-system.\\"
        echo \\"Kiali - http://kiali.istio-system.\\"
        echo \\"#####################################################\\"
}

suffix=knative
kubectl apply -f registry-\${suffix}/
kubectl label namespace default istio-injection=enabled --overwrite=true
kubectl apply -f jhgate-\${suffix}/
kubectl apply -f msmysql-\${suffix}/

kubectl apply -f istio-\${suffix}/

logSummary
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: default
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "registry-knative/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-knative/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using K8s generator type gateway with istio routing files should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"01-gateway\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"k8s\\",
    \\"ingressDomain\\": \\"example.com\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash kubectl-knative-apply.sh (or) ./kubectl-knative-apply.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "istio-knative/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.example.com
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-knative/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.example.com
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-knative/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.example.com
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.example.com
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipster/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "kubectl-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-knative-apply.sh

logSummary(){
    echo \\"\\"
        echo \\"#####################################################\\"
        echo \\"Please find the below useful endpoints,\\"
        echo \\"Gateway - http://jhgate.default.example.com\\"
        echo \\"Jaeger - http://jaeger.istio-system.example.com\\"
        echo \\"Grafana - http://grafana.istio-system.example.com\\"
        echo \\"Kiali - http://kiali.istio-system.example.com\\"
        echo \\"#####################################################\\"
}

suffix=knative
kubectl apply -f registry-\${suffix}/
kubectl label namespace default istio-injection=enabled --overwrite=true
kubectl apply -f jhgate-\${suffix}/

kubectl apply -f istio-\${suffix}/

logSummary
",
    "stateCleared": "modified",
  },
  "registry-knative/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-knative/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using K8s generator type gateway, mysql, psql, mongodb, mariadb, mssql microservices should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [
      \\"01-gateway\\",
      \\"02-mysql\\",
      \\"03-psql\\",
      \\"04-mongo\\",
      \\"07-mariadb\\",
      \\"11-mssql\\"
    ],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": [],
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"default\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"k8s\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
    $ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
    $ docker image tag msmongodb jhipster/msmongodb
$ docker push jhipster/msmongodb
    $ docker image tag msmariadb jhipster/msmariadb
$ docker push jhipster/msmariadb
    $ docker image tag msmssqldb jhipster/msmssqldb
$ docker push jhipster/msmssqldb
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash kubectl-knative-apply.sh (or) ./kubectl-knative-apply.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "istio-knative/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-knative/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-knative/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipster/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "kubectl-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-knative-apply.sh

logSummary(){
    echo \\"\\"
        echo \\"#####################################################\\"
        echo \\"Please find the below useful endpoints,\\"
        echo \\"Gateway - http://jhgate.default.\\"
        echo \\"Jaeger - http://jaeger.istio-system.\\"
        echo \\"Grafana - http://grafana.istio-system.\\"
        echo \\"Kiali - http://kiali.istio-system.\\"
        echo \\"#####################################################\\"
}

suffix=knative
kubectl apply -f registry-\${suffix}/
kubectl label namespace default istio-injection=enabled --overwrite=true
kubectl apply -f jhgate-\${suffix}/
kubectl apply -f msmysql-\${suffix}/
kubectl apply -f mspsql-\${suffix}/
kubectl apply -f msmongodb-\${suffix}/
kubectl apply -f msmariadb-\${suffix}/
kubectl apply -f msmssqldb-\${suffix}/

kubectl apply -f istio-\${suffix}/

logSummary
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/jwt-secret.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: default
type: Opaque
data:
  secret: U0VDUkVULS01MA==
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/msmariadb-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmariadb-destinationrule
  namespace: default
spec:
  host: msmariadb-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/msmariadb-mariadb.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: msmariadb-mariadb
  namespace: default
  labels:
    app: msmariadb-mariadb
type: Opaque
data:
  mariadb-root-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb-mariadb
  template:
    metadata:
      labels:
        app: msmariadb-mariadb
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mariadb
          image: mariadb:10.7.1
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MYSQL_DATABASE
              value: msmariadb
          #        command:
          #        - mysqld
          #        - --lower_case_table_names=1
          #        - --skip-ssl
          #        - --character_set_server=utf8mb4
          #        - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  selector:
    app: msmariadb-mariadb
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/msmariadb-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmariadb
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmariadb
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmariadb-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmariadb
            version: \\"v1\\"
        spec:
          containers:
            - name: msmariadb-app
              image: jhipster/msmariadb
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: jwt-secret
                      key: secret
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false&serverTimezone=UTC
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: msmariadb-mariadb
                      key: mariadb-root-password
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /services/msmariadb/management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /services/msmariadb/management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmariadb-knative/msmariadb-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmariadb-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmariadb-knative
  http:
    - route:
        - destination:
            host: msmariadb-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmariadb-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/jwt-secret.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: default
type: Opaque
data:
  secret: U0VDUkVULS01MA==
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/msmongodb-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmongodb-destinationrule
  namespace: default
spec:
  host: msmongodb-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/msmongodb-mongodb.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-config
data:
  mongod.conf: |
    net:
      port: 27017
    replication:
      replSetName: rs0
    storage:
      dbPath: /data/db
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-init
data:
  on-start.sh: |
    script_name=\${0##*/}

    log() {
        local msg=\\"$1\\"
        local timestamp
        timestamp=$(date --iso-8601=ns)
        echo \\"[$timestamp] [$script_name] $msg\\" >> /work-dir/log.txt
    }

    shutdown_mongo() {
        if [[ $# -eq 1 ]]; then
            args=\\"timeoutSecs: $1\\"
        else
            args='force: true'
        fi
        log \\"Shutting down MongoDB ($args)...\\"
        mongo admin \\"\${admin_creds[@]}\\" \\"\${ssl_args[@]}\\" --eval \\"db.shutdownServer({$args})\\"
    }

    my_hostname=$(hostname)
    log \\"Bootstrapping MongoDB replica set member: $my_hostname\\"

    log \\"Reading standard input...\\"
    while read -ra line; do
        if [[ \\"\${line}\\" == *\\"\${my_hostname}\\"* ]]; then
            service_name=\\"$line\\"
            continue
        fi
        peers=(\\"\${peers[@]}\\" \\"$line\\")
    done

    # Generate the ca cert
    ca_crt=/data/configdb/tls.crt
    if [ -f \\"$ca_crt\\"  ]; then
        log \\"Generating certificate\\"
        ca_key=/data/configdb/tls.key
        pem=/work-dir/mongo.pem
        ssl_args=(--ssl --sslCAFile \\"$ca_crt\\" --sslPEMKeyFile \\"$pem\\")

    # Move into /work-dir
    pushd /work-dir

    cat >openssl.cnf <<EOL
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = $(echo -n \\"$my_hostname\\" | sed s/-[0-9]*$//)
    DNS.2 = $my_hostname
    DNS.3 = $service_name
    DNS.4 = localhost
    DNS.5 = 127.0.0.1
    EOL

        # Generate the certs
        openssl genrsa -out mongo.key 2048
        openssl req -new -key mongo.key -out mongo.csr -subj \\"/CN=$my_hostname\\" -config openssl.cnf
        openssl x509 -req -in mongo.csr \\\\
            -CA \\"$ca_crt\\" -CAkey \\"$ca_key\\" -CAcreateserial \\\\
            -out mongo.crt -days 3650 -extensions v3_req -extfile openssl.cnf

        rm mongo.csr
        cat mongo.crt mongo.key > $pem
        rm mongo.key mongo.crt
    fi


    log \\"Peers: \${peers[*]}\\"

    log \\"Starting a MongoDB instance...\\"
    mongod --config /data/configdb/mongod.conf --dbpath=\\"$DATA_PATH\\" --replSet=\\"$REPLICA_SET\\" --port=$PORT \\"\${auth_args[@]}\\" --bind_ip=0.0.0.0 >> /work-dir/log.txt 2>&1 &

    log \\"Waiting for MongoDB to be ready...\\"
    until mongo \\"\${ssl_args[@]}\\" --eval \\"db.adminCommand('ping')\\"; do
        log \\"Retrying...\\"
        sleep 2
    done

    log \\"Initialized.\\"

    # try to find a master and add yourself to its replica set.
    for peer in \\"\${peers[@]}\\"; do
        if mongo admin --host \\"$peer\\" \\"\${admin_creds[@]}\\" \\"\${ssl_args[@]}\\" --eval \\"rs.isMaster()\\" | grep '\\"ismaster\\" : true'; then
            log \\"Found master: $peer\\"
            log \\"Adding myself ($service_name) to replica set...\\"
            if mongo admin --host \\"$peer\\" \\"\${admin_creds[@]}\\" \\"\${ssl_args[@]}\\" --eval \\"rs.add('$service_name')\\" | grep 'Quorum check failed'; then
                log 'Quorum check failed, unable to join replicaset. Exiting prematurely.'
                shutdown_mongo
                exit 1
            fi

            sleep 3

            log 'Waiting for replica to reach SECONDARY state...'
            until printf '.' && [[ $(mongo admin \\"\${admin_creds[@]}\\" \\"\${ssl_args[@]}\\" --quiet --eval \\"rs.status().myState\\") == '2' ]]; do
                sleep 1
            done

            log '✓ Replica reached SECONDARY state.'

            shutdown_mongo \\"60\\"
            log \\"Good bye.\\"
            exit 0
        fi
    done

    # else initiate a replica set with yourself.
    if mongo \\"\${ssl_args[@]}\\" --eval \\"rs.status()\\" | grep \\"no replset config has been received\\"; then
        log \\"Initiating a new replica set with myself ($service_name)...\\"
        mongo \\"\${ssl_args[@]}\\" --eval \\"rs.initiate({'_id': '$REPLICA_SET', 'members': [{'_id': 0, 'host': '$service_name'}]})\\"

        sleep 3

        log 'Waiting for replica to reach PRIMARY state...'
        until printf '.' && [[ $(mongo \\"\${ssl_args[@]}\\" --quiet --eval \\"rs.status().myState\\") == '1' ]]; do
            sleep 1
        done

        log '✓ Replica reached PRIMARY state.'

        log \\"Done.\\"
    fi

    shutdown_mongo
    log \\"Good bye.\\"
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  serviceName: msmongodb-mongodb
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb-mongodb
  template:
    metadata:
      labels:
        app: msmongodb-mongodb
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      initContainers:
        - name: config
          image: busybox
          command:
            - \\"sh\\"
          args:
            - \\"-c\\"
            - |
              set -e
              set -x
              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
        - name: install
          image: \\"k8s.gcr.io/mongodb-install:0.6\\"
          args:
            - --work-dir=/work-dir
          imagePullPolicy: \\"IfNotPresent\\"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
        - name: boot
          image: mongo:4.4.10
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - \\"-service=msmongodb-mongodb\\"
          imagePullPolicy: \\"IfNotPresent\\"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: \\"27017\\"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: mongodb
          image: mongo:4.4.10
          imagePullPolicy: \\"IfNotPresent\\"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: \\"27017\\"
          ports:
            - name: peer
              containerPort: 27017
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=$(DATA_PATH)
            - --replSet=$(REPLICA_SET)
            - --port=$(PORT)
            - --bind_ip=0.0.0.0
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - \\"db.adminCommand('ping')\\"
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - \\"db.adminCommand('ping')\\"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
      volumes:
        - name: config
          configMap:
            name: msmongodb-mongodb-config
        - name: workdir
          emptyDir: {}
        - name: init
          configMap:
            defaultMode: 0755
            name: msmongodb-mongodb-init
        - name: configdir
          emptyDir: {}
        - name: datadir
          emptyDir: {}
---
# Headless service for DNS record
apiVersion: v1
kind: Service
metadata:
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
  name: msmongodb-mongodb
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: peer
      port: 27017
  selector:
    app: msmongodb-mongodb
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/msmongodb-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmongodb
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmongodb
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmongodb-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmongodb
            version: \\"v1\\"
        spec:
          containers:
            - name: msmongodb-app
              image: jhipster/msmongodb
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: jwt-secret
                      key: secret
                - name: SPRING_DATA_MONGODB_DATABASE
                  value: msmongodb
                - name: SPRING_DATA_MONGODB_URI
                  value: \\"mongodb://msmongodb-mongodb-0.msmongodb-mongodb.default:27017\\"
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /services/msmongodb/management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /services/msmongodb/management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmongodb-knative/msmongodb-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmongodb-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmongodb-knative
  http:
    - route:
        - destination:
            host: msmongodb-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmongodb-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmssqldb-knative/jwt-secret.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: jwt-secret
  namespace: default
type: Opaque
data:
  secret: U0VDUkVULS01MA==
",
    "stateCleared": "modified",
  },
  "msmssqldb-knative/msmssqldb-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmssqldb-destinationrule
  namespace: default
spec:
  host: msmssqldb-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmssqldb-knative/msmssqldb-mssql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb-mssql
  template:
    metadata:
      labels:
        app: msmssqldb-mssql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: mssqldb
          persistentVolumeClaim:
            claimName: mssql-data
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mcr.microsoft.com/mssql/server:2019-CU13-ubuntu-20.04
          env:
            - name: MSSQL_PID
              value: \\"Express\\"
            - name: ACCEPT_EULA
              value: \\"Y\\"
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql
                  key: SA_PASSWORD
          ports:
            - containerPort: 1433
          volumeMounts:
            - name: mssqldb
              mountPath: /var/opt/mssql
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"

---
apiVersion: v1
kind: Service
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  selector:
    app: msmssqldb-mssql
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433
  type: LoadBalancer
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mssql-data
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 8Gi
",
    "stateCleared": "modified",
  },
  "msmssqldb-knative/msmssqldb-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmssqldb
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmssqldb
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmssqldb-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmssqldb
            version: \\"v1\\"
        spec:
          containers:
            - name: msmssqldb-app
              image: jhipster/msmssqldb
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: jwt-secret
                      key: secret
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /services/msmssqldb/management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /services/msmssqldb/management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmssqldb-knative/msmssqldb-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmssqldb-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmssqldb-knative
  http:
    - route:
        - destination:
            host: msmssqldb-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmssqldb-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: default
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: mspsql-destinationrule
  namespace: default
spec:
  host: mspsql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-elasticsearch.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          emptyDir: {}
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: docker.elastic.co/elasticsearch/elasticsearch:7.13.3
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"2Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-postgresql.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: mspsql-postgresql
  namespace: default
  labels:
    app: mspsql-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-postgresql
  template:
    metadata:
      labels:
        app: mspsql-postgresql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: postgres
          image: postgres:13.5
          env:
            - name: POSTGRES_USER
              value: mspsql
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  selector:
    app: mspsql-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: mspsql
  namespace: default
spec:
  template:
    metadata:
      labels:
        app: mspsql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: mspsql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: mspsql
            version: \\"v1\\"
        spec:
          containers:
            - name: mspsql-app
              image: jhipster/mspsql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.default.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: mspsql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
                - name: SPRING_DATASOURCE_USERNAME
                  value: mspsql
                - name: SPRING_DATASOURCE_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: mspsql-postgresql
                      key: postgresql-password
                - name: SPRING_ELASTICSEARCH_REST_URIS
                  value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "mspsql-knative/mspsql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: mspsql-virtualservice
  namespace: default
spec:
  gateways:
    - mesh
  hosts:
    - mspsql-knative
  http:
    - route:
        - destination:
            host: mspsql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: default
                Knative-Serving-Revision: mspsql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "registry-knative/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.default.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.default.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-knative/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: default
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: default
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: default
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using K8s generator type mysql microservice with custom namespace and jhipster prometheus monitoring should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"02-mysql\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"mynamespace\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"k8s\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"prometheus\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash kubectl-knative-apply.sh (or) ./kubectl-knative-apply.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "istio-knative/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-knative/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-knative/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "kubectl-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-knative-apply.sh

logSummary(){
    echo \\"\\"
        echo \\"#####################################################\\"
        echo \\"Please find the below useful endpoints,\\"
        echo \\"JHipster Grafana - http://jhipster-grafana.mynamespace.\\"
        echo \\"Jaeger - http://jaeger.istio-system.\\"
        echo \\"Grafana - http://grafana.istio-system.\\"
        echo \\"Kiali - http://kiali.istio-system.\\"
        echo \\"#####################################################\\"
}

suffix=knative
kubectl apply -f namespace.yml
kubectl apply -f registry-\${suffix}/
kubectl label namespace mynamespace istio-injection=enabled --overwrite=true
kubectl apply -f msmysql-\${suffix}/
kubectl apply -f monitoring-\${suffix}/jhipster-prometheus-crd.yml
until [ $(kubectl get crd prometheuses.monitoring.coreos.com 2>>/dev/null | wc -l) -ge 2 ]; do
    echo \\"Waiting for the custom resource prometheus operator to get initialised\\";
    sleep 5;
done
kubectl apply -f monitoring-\${suffix}/jhipster-prometheus-cr.yml
kubectl apply -f monitoring-\${suffix}/jhipster-grafana.yml
kubectl apply -f monitoring-\${suffix}/jhipster-grafana-dashboard.yml

kubectl apply -f istio-\${suffix}/

logSummary
",
    "stateCleared": "modified",
  },
  "monitoring-knative/jhipster-grafana-dashboard.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: jhipster-grafana-dashboard
  namespace: mynamespace
data:
  deployment-dashboard.json: |
    {
        \\"dashboard\\": {
            \\"__inputs\\": [
                {
                    \\"name\\": \\"DS_PROMETHEUS\\",
                    \\"label\\": \\"prometheus\\",
                    \\"description\\": \\"\\",
                    \\"type\\": \\"datasource\\",
                    \\"pluginId\\": \\"prometheus\\",
                    \\"pluginName\\": \\"Prometheus\\"
                }
            ],
            \\"__requires\\": [
                {
                    \\"type\\": \\"grafana\\",
                    \\"id\\": \\"grafana\\",
                    \\"name\\": \\"Grafana\\",
                    \\"version\\": \\"4.6.0\\"
                },
                {
                    \\"type\\": \\"panel\\",
                    \\"id\\": \\"graph\\",
                    \\"name\\": \\"Graph\\",
                    \\"version\\": \\"\\"
                },
                {
                    \\"type\\": \\"datasource\\",
                    \\"id\\": \\"prometheus\\",
                    \\"name\\": \\"Prometheus\\",
                    \\"version\\": \\"1.0.0\\"
                },
                {
                    \\"type\\": \\"panel\\",
                    \\"id\\": \\"singlestat\\",
                    \\"name\\": \\"Singlestat\\",
                    \\"version\\": \\"\\"
                }
            ],
            \\"annotations\\": {
                \\"list\\": [
                    {
                        \\"builtIn\\": 1,
                        \\"datasource\\": \\"-- Grafana --\\",
                        \\"enable\\": true,
                        \\"hide\\": true,
                        \\"iconColor\\": \\"rgba(0, 211, 255, 1)\\",
                        \\"name\\": \\"Annotations & Alerts\\",
                        \\"type\\": \\"dashboard\\"
                    }
                ]
            },
            \\"description\\": \\"JHipster metrics\\",
            \\"editable\\": true,
            \\"gnetId\\": 3308,
            \\"graphTooltip\\": 0,
            \\"hideControls\\": false,
            \\"id\\": null,
            \\"links\\": [],
            \\"refresh\\": false,
            \\"rows\\": [
                {
                    \\"collapse\\": false,
                    \\"height\\": \\"250px\\",
                    \\"panels\\": [
                        {
                            \\"cacheTimeout\\": null,
                            \\"colorBackground\\": false,
                            \\"colorValue\\": false,
                            \\"colors\\": [
                                \\"rgba(245, 54, 54, 0.9)\\",
                                \\"rgba(237, 129, 40, 0.89)\\",
                                \\"rgba(50, 172, 45, 0.97)\\"
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"decimals\\": null,
                            \\"description\\": \\"Service status\\",
                            \\"format\\": \\"none\\",
                            \\"gauge\\": {
                                \\"maxValue\\": 1,
                                \\"minValue\\": 0,
                                \\"show\\": true,
                                \\"thresholdLabels\\": false,
                                \\"thresholdMarkers\\": true
                            },
                            \\"height\\": \\"\\",
                            \\"id\\": 1,
                            \\"interval\\": null,
                            \\"links\\": [],
                            \\"mappingType\\": 1,
                            \\"mappingTypes\\": [
                                {
                                    \\"name\\": \\"value to text\\",
                                    \\"value\\": 1
                                },
                                {
                                    \\"name\\": \\"range to text\\",
                                    \\"value\\": 2
                                }
                            ],
                            \\"maxDataPoints\\": 100,
                            \\"nullPointMode\\": \\"connected\\",
                            \\"nullText\\": null,
                            \\"postfix\\": \\"\\",
                            \\"postfixFontSize\\": \\"50%\\",
                            \\"prefix\\": \\"\\",
                            \\"prefixFontSize\\": \\"100%\\",
                            \\"rangeMaps\\": [
                                {
                                    \\"from\\": \\"null\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"to\\": \\"null\\"
                                }
                            ],
                            \\"span\\": 4,
                            \\"sparkline\\": {
                                \\"fillColor\\": \\"rgba(31, 118, 189, 0.18)\\",
                                \\"full\\": false,
                                \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                \\"show\\": false
                            },
                            \\"tableColumn\\": \\"Value\\",
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"up{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"table\\",
                                    \\"intervalFactor\\": 2,
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 20,
                                    \\"metric\\": \\"up\\",
                                    \\"legendFormat\\": \\"service\\"
                                }
                            ],
                            \\"thresholds\\": \\"0\\",
                            \\"title\\": \\"Service Status Now\\",
                            \\"type\\": \\"singlestat\\",
                            \\"valueFontSize\\": \\"120%\\",
                            \\"valueMaps\\": [
                                {
                                    \\"op\\": \\"=\\",
                                    \\"text\\": \\"Down\\",
                                    \\"value\\": \\"0\\"
                                },
                                {
                                    \\"value\\": \\"1\\",
                                    \\"op\\": \\"=\\",
                                    \\"text\\": \\"Up\\"
                                }
                            ],
                            \\"valueName\\": \\"current\\",
                            \\"hideTimeOverride\\": false,
                            \\"minSpan\\": null,
                            \\"repeat\\": null,
                            \\"transparent\\": false
                        },
                        {
                            \\"id\\": 29,
                            \\"title\\": \\"Service Uptime\\",
                            \\"span\\": 8,
                            \\"type\\": \\"graph\\",
                            \\"targets\\": [
                                {
                                    \\"refId\\": \\"A\\",
                                    \\"expr\\": \\"up{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"{{pod}}\\"
                                }
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"renderer\\": \\"flot\\",
                            \\"yaxes\\": [
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": \\"1\\",
                                    \\"format\\": \\"short\\"
                                },
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": \\"1\\",
                                    \\"format\\": \\"short\\"
                                }
                            ],
                            \\"xaxis\\": {
                                \\"show\\": true,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"values\\": [],
                                \\"buckets\\": null
                            },
                            \\"lines\\": true,
                            \\"fill\\": 1,
                            \\"linewidth\\": 1,
                            \\"dashes\\": false,
                            \\"dashLength\\": 10,
                            \\"spaceLength\\": 10,
                            \\"points\\": true,
                            \\"pointradius\\": 3,
                            \\"bars\\": false,
                            \\"stack\\": false,
                            \\"percentage\\": false,
                            \\"legend\\": {
                                \\"show\\": true,
                                \\"values\\": false,
                                \\"min\\": false,
                                \\"max\\": false,
                                \\"current\\": false,
                                \\"total\\": false,
                                \\"avg\\": false,
                                \\"alignAsTable\\": true
                            },
                            \\"nullPointMode\\": \\"null\\",
                            \\"steppedLine\\": true,
                            \\"tooltip\\": {
                                \\"value_type\\": \\"individual\\",
                                \\"shared\\": true,
                                \\"sort\\": 0
                            },
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"aliasColors\\": {},
                            \\"seriesOverrides\\": [],
                            \\"thresholds\\": [],
                            \\"links\\": [],
                            \\"description\\": \\"The uptime of the service\\"
                        }
                    ],
                    \\"repeat\\": null,
                    \\"repeatIteration\\": null,
                    \\"repeatRowId\\": null,
                    \\"showTitle\\": true,
                    \\"title\\": \\"Uptime Metrics\\",
                    \\"titleSize\\": \\"h6\\"
                },
                {
                    \\"collapse\\": false,
                    \\"height\\": 250,
                    \\"panels\\": [
                        {
                            \\"cacheTimeout\\": null,
                            \\"colorBackground\\": false,
                            \\"colorValue\\": true,
                            \\"colors\\": [
                                \\"rgba(32, 176, 9, 0.9)\\",
                                \\"rgba(237, 129, 40, 0.89)\\",
                                \\"rgba(50, 172, 45, 0.97)\\"
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"Total requests count\\",
                            \\"format\\": \\"none\\",
                            \\"gauge\\": {
                                \\"maxValue\\": 10000000000000,
                                \\"minValue\\": 0,
                                \\"show\\": true,
                                \\"thresholdLabels\\": false,
                                \\"thresholdMarkers\\": true
                            },
                            \\"id\\": 5,
                            \\"interval\\": null,
                            \\"links\\": [],
                            \\"mappingType\\": 1,
                            \\"mappingTypes\\": [
                                {
                                    \\"name\\": \\"value to text\\",
                                    \\"value\\": 1
                                },
                                {
                                    \\"name\\": \\"range to text\\",
                                    \\"value\\": 2
                                }
                            ],
                            \\"maxDataPoints\\": 100,
                            \\"nullPointMode\\": \\"connected\\",
                            \\"nullText\\": null,
                            \\"postfix\\": \\"\\",
                            \\"postfixFontSize\\": \\"50%\\",
                            \\"prefix\\": \\"\\",
                            \\"prefixFontSize\\": \\"50%\\",
                            \\"rangeMaps\\": [
                                {
                                    \\"from\\": \\"null\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"to\\": \\"null\\"
                                }
                            ],
                            \\"span\\": 3,
                            \\"sparkline\\": {
                                \\"fillColor\\": \\"rgba(31, 118, 189, 0.18)\\",
                                \\"full\\": false,
                                \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                \\"show\\": false
                            },
                            \\"tableColumn\\": \\"Value\\",
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_requests_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"table\\",
                                    \\"intervalFactor\\": 2,
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 20,
                                    \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_requests_count\\"
                                }
                            ],
                            \\"thresholds\\": \\"\\",
                            \\"title\\": \\"Total Requests\\",
                            \\"type\\": \\"singlestat\\",
                            \\"valueFontSize\\": \\"70%\\",
                            \\"valueMaps\\": [
                                {
                                    \\"op\\": \\"=\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"value\\": \\"null\\"
                                }
                            ],
                            \\"valueName\\": \\"total\\",
                            \\"transparent\\": false
                        },
                        {
                            \\"cacheTimeout\\": null,
                            \\"colorBackground\\": false,
                            \\"colorValue\\": false,
                            \\"colors\\": [
                                \\"rgba(245, 54, 54, 0.9)\\",
                                \\"rgba(237, 129, 40, 0.89)\\",
                                \\"rgba(50, 172, 45, 0.97)\\"
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"Number of 200 OK requests\\",
                            \\"format\\": \\"none\\",
                            \\"gauge\\": {
                                \\"maxValue\\": 10000000000000000,
                                \\"minValue\\": 0,
                                \\"show\\": true,
                                \\"thresholdLabels\\": false,
                                \\"thresholdMarkers\\": true
                            },
                            \\"id\\": 6,
                            \\"interval\\": null,
                            \\"links\\": [],
                            \\"mappingType\\": 1,
                            \\"mappingTypes\\": [
                                {
                                    \\"name\\": \\"value to text\\",
                                    \\"value\\": 1
                                },
                                {
                                    \\"name\\": \\"range to text\\",
                                    \\"value\\": 2
                                }
                            ],
                            \\"maxDataPoints\\": 100,
                            \\"nullPointMode\\": \\"connected\\",
                            \\"nullText\\": null,
                            \\"postfix\\": \\"\\",
                            \\"postfixFontSize\\": \\"50%\\",
                            \\"prefix\\": \\"\\",
                            \\"prefixFontSize\\": \\"50%\\",
                            \\"rangeMaps\\": [
                                {
                                    \\"from\\": \\"null\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"to\\": \\"null\\"
                                }
                            ],
                            \\"span\\": 3,
                            \\"sparkline\\": {
                                \\"fillColor\\": \\"rgba(31, 118, 189, 0.78)\\",
                                \\"full\\": false,
                                \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                \\"show\\": true
                            },
                            \\"tableColumn\\": \\"Value\\",
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"table\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 20,
                                    \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total\\"
                                }
                            ],
                            \\"thresholds\\": \\"\\",
                            \\"title\\": \\"Total Successful hits\\",
                            \\"type\\": \\"singlestat\\",
                            \\"valueFontSize\\": \\"80%\\",
                            \\"valueMaps\\": [
                                {
                                    \\"op\\": \\"=\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"value\\": \\"null\\"
                                }
                            ],
                            \\"valueName\\": \\"total\\"
                        },
                        {
                            \\"cacheTimeout\\": null,
                            \\"colorBackground\\": false,
                            \\"colorValue\\": false,
                            \\"colors\\": [
                                \\"rgba(245, 54, 54, 0.9)\\",
                                \\"rgba(237, 129, 40, 0.89)\\",
                                \\"rgba(50, 172, 45, 0.97)\\"
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"Number of server errors and bad requests\\",
                            \\"format\\": \\"none\\",
                            \\"gauge\\": {
                                \\"maxValue\\": 1,
                                \\"minValue\\": 0,
                                \\"show\\": true,
                                \\"thresholdLabels\\": false,
                                \\"thresholdMarkers\\": true
                            },
                            \\"id\\": 7,
                            \\"interval\\": null,
                            \\"links\\": [],
                            \\"mappingType\\": 1,
                            \\"mappingTypes\\": [
                                {
                                    \\"name\\": \\"value to text\\",
                                    \\"value\\": 1
                                },
                                {
                                    \\"name\\": \\"range to text\\",
                                    \\"value\\": 2
                                }
                            ],
                            \\"maxDataPoints\\": 100,
                            \\"nullPointMode\\": \\"connected\\",
                            \\"nullText\\": null,
                            \\"postfix\\": \\"\\",
                            \\"postfixFontSize\\": \\"50%\\",
                            \\"prefix\\": \\"\\",
                            \\"prefixFontSize\\": \\"50%\\",
                            \\"rangeMaps\\": [
                                {
                                    \\"from\\": \\"null\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"to\\": \\"null\\"
                                }
                            ],
                            \\"span\\": 3,
                            \\"sparkline\\": {
                                \\"fillColor\\": \\"rgba(31, 118, 189, 0.18)\\",
                                \\"full\\": false,
                                \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                \\"show\\": false
                            },
                            \\"tableColumn\\": \\"Value\\",
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"} + com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_badRequest_total{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 20,
                                    \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total\\"
                                }
                            ],
                            \\"thresholds\\": \\"1\\",
                            \\"title\\": \\"Total Bad hits\\",
                            \\"type\\": \\"singlestat\\",
                            \\"valueFontSize\\": \\"70%\\",
                            \\"valueMaps\\": [
                                {
                                    \\"op\\": \\"=\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"value\\": \\"null\\"
                                }
                            ],
                            \\"valueName\\": \\"total\\"
                        },
                        {
                            \\"cacheTimeout\\": null,
                            \\"colorBackground\\": false,
                            \\"colorValue\\": false,
                            \\"colors\\": [
                                \\"rgba(245, 54, 54, 0.9)\\",
                                \\"rgba(237, 129, 40, 0.89)\\",
                                \\"rgba(50, 172, 45, 0.97)\\"
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"Number of 404 not found requests\\",
                            \\"format\\": \\"none\\",
                            \\"gauge\\": {
                                \\"maxValue\\": 1,
                                \\"minValue\\": 0,
                                \\"show\\": true,
                                \\"thresholdLabels\\": false,
                                \\"thresholdMarkers\\": true
                            },
                            \\"id\\": 8,
                            \\"interval\\": null,
                            \\"links\\": [],
                            \\"mappingType\\": 1,
                            \\"mappingTypes\\": [
                                {
                                    \\"name\\": \\"value to text\\",
                                    \\"value\\": 1
                                },
                                {
                                    \\"name\\": \\"range to text\\",
                                    \\"value\\": 2
                                }
                            ],
                            \\"maxDataPoints\\": 100,
                            \\"nullPointMode\\": \\"connected\\",
                            \\"nullText\\": null,
                            \\"postfix\\": \\"\\",
                            \\"postfixFontSize\\": \\"50%\\",
                            \\"prefix\\": \\"\\",
                            \\"prefixFontSize\\": \\"50%\\",
                            \\"rangeMaps\\": [
                                {
                                    \\"from\\": \\"null\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"to\\": \\"null\\"
                                }
                            ],
                            \\"span\\": 3,
                            \\"sparkline\\": {
                                \\"fillColor\\": \\"rgba(31, 118, 189, 0.18)\\",
                                \\"full\\": false,
                                \\"lineColor\\": \\"rgb(31, 120, 193)\\",
                                \\"show\\": false
                            },
                            \\"tableColumn\\": \\"\\",
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 20,
                                    \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total\\"
                                }
                            ],
                            \\"thresholds\\": \\"1\\",
                            \\"title\\": \\"Trace 404 hits\\",
                            \\"type\\": \\"singlestat\\",
                            \\"valueFontSize\\": \\"80%\\",
                            \\"valueMaps\\": [
                                {
                                    \\"op\\": \\"=\\",
                                    \\"text\\": \\"N/A\\",
                                    \\"value\\": \\"null\\"
                                }
                            ],
                            \\"valueName\\": \\"total\\"
                        },
                        {
                            \\"id\\": 30,
                            \\"title\\": \\"Active Requests\\",
                            \\"span\\": 12,
                            \\"type\\": \\"graph\\",
                            \\"targets\\": [
                                {
                                    \\"refId\\": \\"A\\",
                                    \\"expr\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_activeRequests{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"metric\\": \\"com_codahale_metrics_servlet_InstrumentedFilter_activeRequests\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"{{service}}\\"
                                }
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"renderer\\": \\"flot\\",
                            \\"yaxes\\": [
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": null,
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                },
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": null,
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                }
                            ],
                            \\"xaxis\\": {
                                \\"show\\": true,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"values\\": [
                                    \\"total\\"
                                ],
                                \\"buckets\\": null
                            },
                            \\"lines\\": true,
                            \\"fill\\": 1,
                            \\"linewidth\\": 2,
                            \\"dashes\\": false,
                            \\"dashLength\\": 10,
                            \\"spaceLength\\": 10,
                            \\"points\\": false,
                            \\"pointradius\\": 5,
                            \\"bars\\": false,
                            \\"stack\\": false,
                            \\"percentage\\": false,
                            \\"legend\\": {
                                \\"show\\": true,
                                \\"values\\": true,
                                \\"min\\": true,
                                \\"max\\": true,
                                \\"current\\": true,
                                \\"total\\": false,
                                \\"avg\\": true,
                                \\"alignAsTable\\": true
                            },
                            \\"nullPointMode\\": \\"null\\",
                            \\"steppedLine\\": false,
                            \\"tooltip\\": {
                                \\"value_type\\": \\"individual\\",
                                \\"shared\\": false,
                                \\"sort\\": 0
                            },
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"aliasColors\\": {},
                            \\"seriesOverrides\\": [],
                            \\"thresholds\\": [],
                            \\"links\\": []
                        }
                    ],
                    \\"repeat\\": null,
                    \\"repeatIteration\\": null,
                    \\"repeatRowId\\": null,
                    \\"showTitle\\": true,
                    \\"title\\": \\"Requests Metrics\\",
                    \\"titleSize\\": \\"h6\\"
                },
                {
                    \\"collapse\\": false,
                    \\"height\\": 250,
                    \\"panels\\": [
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"The current number of live threads including daemon and non-daemon and runnable threads\\",
                            \\"fill\\": 4,
                            \\"id\\": 10,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true,
                                \\"rightSide\\": false,
                                \\"hideEmpty\\": false
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 2,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": true,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_threads_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Total threads\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_threads_count\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_threads_daemon_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"B\\",
                                    \\"metric\\": \\"jvm_threads_daemon_count\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Daemon threads\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_threads_runnable_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"C\\",
                                    \\"metric\\": \\"jvm_threads_runnable_count\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Runnable threads\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Live Threads\\",
                            \\"tooltip\\": {
                                \\"shared\\": false,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": [
                                    \\"total\\"
                                ]
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                }
                            ],
                            \\"transparent\\": false
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"The current number of blocked and deadlock threads\\",
                            \\"fill\\": 1,
                            \\"id\\": 11,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_threads_blocked_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Blocked threads\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_threads_blocked_count\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_threads_deadlock_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"B\\",
                                    \\"metric\\": \\"jvm_threads_deadlock_count\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Deadlock threads\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Blocked and Deadlock Threads\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                }
                            ]
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"The current number of waiting threads\\",
                            \\"fill\\": 1,
                            \\"id\\": 12,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_threads_waiting_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Waiting threads\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_threads_waiting_count\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Waiting Threads\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                }
                            ]
                        }
                    ],
                    \\"repeat\\": null,
                    \\"repeatIteration\\": null,
                    \\"repeatRowId\\": null,
                    \\"showTitle\\": true,
                    \\"title\\": \\"Thread Metrics\\",
                    \\"titleSize\\": \\"h6\\"
                },
                {
                    \\"collapse\\": false,
                    \\"height\\": 250,
                    \\"panels\\": [
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"An estimate of the number of buffers in the pool\\",
                            \\"fill\\": 1,
                            \\"id\\": 13,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_buffers_direct_count{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"{{service}}\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_buffers_direct_count\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Buffer Count\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                }
                            ]
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"An estimate of the memory that the Java virtual machine is using for this buffer pool\\",
                            \\"fill\\": 1,
                            \\"id\\": 14,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_buffers_direct_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"{{service}}\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_buffers_direct_used\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Buffer Mem Used\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                }
                            ]
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"An estimate of the total capacity of the buffers in this pool\\",
                            \\"fill\\": 1,
                            \\"id\\": 15,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": false,
                                \\"current\\": true,
                                \\"max\\": false,
                                \\"min\\": false,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_buffers_direct_capacity{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"{{service}}\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_buffers_direct_capacity\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Buffer Capacity\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                }
                            ]
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"The total amount of heap memory\\",
                            \\"fill\\": 1,
                            \\"id\\": 18,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_memory_heap_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Used\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_memory_heap_used\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_heap_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"B\\",
                                    \\"metric\\": \\"jvm_memory_heap_max\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Maximum\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_heap_committed{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"C\\",
                                    \\"metric\\": \\"jvm_memory_heap_committed\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Committed\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Heap Memory\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                }
                            ]
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"The amount of used, committed and max memory\\",
                            \\"fill\\": 1,
                            \\"id\\": 16,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_memory_total_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Used\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_memory_total_used\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_total_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"B\\",
                                    \\"metric\\": \\"jvm_memory_total_max\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Max\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_total_committed{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"C\\",
                                    \\"metric\\": \\"jvm_memory_total_committed\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Committed\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Total Memory\\",
                            \\"tooltip\\": {
                                \\"shared\\": false,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": [
                                    \\"total\\"
                                ]
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                }
                            ]
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"The total amount of  non heap memory\\",
                            \\"fill\\": 1,
                            \\"id\\": 17,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 4,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_memory_non_heap_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Non Heap Used\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 4,
                                    \\"metric\\": \\"jvm_memory_non_heap_used\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_non_heap_committed{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"B\\",
                                    \\"metric\\": \\"jvm_memory_non_heap_max\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Non Heap Committed\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_pools_Metaspace_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"C\\",
                                    \\"metric\\": \\"jvm_memory_pools_Metaspace_used\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Metaspace Used\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_pools_Code_Cache_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"D\\",
                                    \\"metric\\": \\"jvm_memory_pools_Code_Cache_used\\",
                                    \\"step\\": 4,
                                    \\"legendFormat\\": \\"Code Cache Used\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Other Memory\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                }
                            ]
                        }
                    ],
                    \\"repeat\\": null,
                    \\"repeatIteration\\": null,
                    \\"repeatRowId\\": null,
                    \\"showTitle\\": true,
                    \\"title\\": \\"Memory Metrics\\",
                    \\"titleSize\\": \\"h6\\"
                },
                {
                    \\"collapse\\": false,
                    \\"height\\": 250,
                    \\"panels\\": [
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"Memory space of new generation\\",
                            \\"fill\\": 2,
                            \\"id\\": 19,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 2,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 6,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_memory_pools_PS_Eden_Space_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Used\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 2,
                                    \\"metric\\": \\"jvm_memory_pools_PS_Eden_Space_used\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_pools_PS_Eden_Space_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"B\\",
                                    \\"metric\\": \\"jvm_memory_pools_PS_Eden_Space_max\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"Max\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Eden Space\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                }
                            ]
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"Memory space of new generation\\",
                            \\"fill\\": 1,
                            \\"id\\": 20,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 6,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_memory_pools_PS_Survivor_Space_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Used\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 2,
                                    \\"metric\\": \\"jvm_memory_pools_PS_Old_Gen_used\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_pools_PS_Survivor_Space_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"B\\",
                                    \\"metric\\": \\"\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"Max\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Survivor Space\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                }
                            ]
                        },
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"Memory space of old generation\\",
                            \\"fill\\": 1,
                            \\"id\\": 24,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 12,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"jvm_memory_pools_PS_Old_Gen_used{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"Used\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 2,
                                    \\"metric\\": \\"jvm_memory_pools_PS_Old_Gen_used\\"
                                },
                                {
                                    \\"expr\\": \\"jvm_memory_pools_PS_Old_Gen_max{namespace =\\\\\\"$namespace\\\\\\", service =\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"refId\\": \\"B\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"Max\\"
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"Old Generation\\",
                            \\"tooltip\\": {
                                \\"shared\\": true,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": []
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"decbytes\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"s\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": null,
                                    \\"show\\": true
                                }
                            ]
                        }
                    ],
                    \\"repeat\\": null,
                    \\"repeatIteration\\": null,
                    \\"repeatRowId\\": null,
                    \\"showTitle\\": true,
                    \\"title\\": \\"Memory Space Metrics\\",
                    \\"titleSize\\": \\"h6\\"
                },
                {
                    \\"collapse\\": false,
                    \\"height\\": 250,
                    \\"panels\\": [
                        {
                            \\"id\\": 31,
                            \\"title\\": \\"Cache Hits\\",
                            \\"span\\": 6,
                            \\"type\\": \\"graph\\",
                            \\"targets\\": [
                                {
                                    \\"refId\\": \\"A\\",
                                    \\"expr\\": \\"{__name__=~\\\\\\"^jcache_statistics.*cache_hits\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"{{__name__}}\\"
                                }
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"renderer\\": \\"flot\\",
                            \\"yaxes\\": [
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": null,
                                    \\"format\\": \\"none\\"
                                },
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                }
                            ],
                            \\"xaxis\\": {
                                \\"show\\": true,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"values\\": [
                                    \\"total\\"
                                ],
                                \\"buckets\\": null
                            },
                            \\"lines\\": true,
                            \\"fill\\": 1,
                            \\"linewidth\\": 1,
                            \\"dashes\\": false,
                            \\"dashLength\\": 10,
                            \\"spaceLength\\": 10,
                            \\"points\\": false,
                            \\"pointradius\\": 5,
                            \\"bars\\": false,
                            \\"stack\\": false,
                            \\"percentage\\": false,
                            \\"legend\\": {
                                \\"show\\": true,
                                \\"values\\": true,
                                \\"min\\": true,
                                \\"max\\": true,
                                \\"current\\": true,
                                \\"total\\": true,
                                \\"avg\\": true,
                                \\"alignAsTable\\": true
                            },
                            \\"nullPointMode\\": \\"null\\",
                            \\"steppedLine\\": false,
                            \\"tooltip\\": {
                                \\"value_type\\": \\"individual\\",
                                \\"shared\\": false,
                                \\"sort\\": 0
                            },
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"aliasColors\\": {},
                            \\"seriesOverrides\\": [],
                            \\"thresholds\\": [],
                            \\"links\\": [],
                            \\"description\\": \\"The total number of cache hits\\"
                        },
                        {
                            \\"id\\": 32,
                            \\"title\\": \\"Cache Misses\\",
                            \\"span\\": 6,
                            \\"type\\": \\"graph\\",
                            \\"targets\\": [
                                {
                                    \\"refId\\": \\"A\\",
                                    \\"expr\\": \\"{__name__=~\\\\\\"^jcache_statistics.*cache_misses\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"{{__name__}}\\"
                                }
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"renderer\\": \\"flot\\",
                            \\"yaxes\\": [
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                },
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                }
                            ],
                            \\"xaxis\\": {
                                \\"show\\": true,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"values\\": [],
                                \\"buckets\\": null
                            },
                            \\"lines\\": true,
                            \\"fill\\": 1,
                            \\"linewidth\\": 1,
                            \\"dashes\\": false,
                            \\"dashLength\\": 10,
                            \\"spaceLength\\": 10,
                            \\"points\\": false,
                            \\"pointradius\\": 5,
                            \\"bars\\": false,
                            \\"stack\\": false,
                            \\"percentage\\": false,
                            \\"legend\\": {
                                \\"show\\": true,
                                \\"values\\": true,
                                \\"min\\": true,
                                \\"max\\": true,
                                \\"current\\": true,
                                \\"total\\": true,
                                \\"avg\\": true,
                                \\"alignAsTable\\": true
                            },
                            \\"nullPointMode\\": \\"null\\",
                            \\"steppedLine\\": false,
                            \\"tooltip\\": {
                                \\"value_type\\": \\"individual\\",
                                \\"shared\\": true,
                                \\"sort\\": 0
                            },
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"aliasColors\\": {},
                            \\"seriesOverrides\\": [],
                            \\"thresholds\\": [],
                            \\"links\\": [],
                            \\"description\\": \\"The total number of cache misses\\"
                        },
                        {
                            \\"id\\": 33,
                            \\"title\\": \\"Cache Gets\\",
                            \\"span\\": 6,
                            \\"type\\": \\"graph\\",
                            \\"targets\\": [
                                {
                                    \\"refId\\": \\"A\\",
                                    \\"expr\\": \\"{__name__=~\\\\\\"^jcache_statistics.*cache_gets\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"{{__name__}}\\"
                                }
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"renderer\\": \\"flot\\",
                            \\"yaxes\\": [
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                },
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                }
                            ],
                            \\"xaxis\\": {
                                \\"show\\": true,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"values\\": [],
                                \\"buckets\\": null
                            },
                            \\"lines\\": true,
                            \\"fill\\": 1,
                            \\"linewidth\\": 1,
                            \\"dashes\\": false,
                            \\"dashLength\\": 10,
                            \\"spaceLength\\": 10,
                            \\"points\\": false,
                            \\"pointradius\\": 5,
                            \\"bars\\": false,
                            \\"stack\\": false,
                            \\"percentage\\": false,
                            \\"legend\\": {
                                \\"show\\": true,
                                \\"values\\": true,
                                \\"min\\": true,
                                \\"max\\": true,
                                \\"current\\": true,
                                \\"total\\": true,
                                \\"avg\\": true,
                                \\"alignAsTable\\": true
                            },
                            \\"nullPointMode\\": \\"null\\",
                            \\"steppedLine\\": false,
                            \\"tooltip\\": {
                                \\"value_type\\": \\"individual\\",
                                \\"shared\\": true,
                                \\"sort\\": 0
                            },
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"aliasColors\\": {},
                            \\"seriesOverrides\\": [],
                            \\"thresholds\\": [],
                            \\"links\\": [],
                            \\"description\\": \\"The total number of cache gets\\"
                        },
                        {
                            \\"id\\": 34,
                            \\"title\\": \\"Cache Puts\\",
                            \\"span\\": 6,
                            \\"type\\": \\"graph\\",
                            \\"targets\\": [
                                {
                                    \\"refId\\": \\"A\\",
                                    \\"expr\\": \\"{__name__=~\\\\\\"^jcache_statistics.*cache_puts\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"}\\",
                                    \\"intervalFactor\\": 2,
                                    \\"format\\": \\"time_series\\",
                                    \\"step\\": 2,
                                    \\"legendFormat\\": \\"{{__name__}}\\"
                                }
                            ],
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"renderer\\": \\"flot\\",
                            \\"yaxes\\": [
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                },
                                {
                                    \\"label\\": null,
                                    \\"show\\": true,
                                    \\"logBase\\": 1,
                                    \\"min\\": \\"0\\",
                                    \\"max\\": null,
                                    \\"format\\": \\"short\\"
                                }
                            ],
                            \\"xaxis\\": {
                                \\"show\\": true,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"values\\": [],
                                \\"buckets\\": null
                            },
                            \\"lines\\": true,
                            \\"fill\\": 1,
                            \\"linewidth\\": 1,
                            \\"dashes\\": false,
                            \\"dashLength\\": 10,
                            \\"spaceLength\\": 10,
                            \\"points\\": false,
                            \\"pointradius\\": 5,
                            \\"bars\\": false,
                            \\"stack\\": false,
                            \\"percentage\\": false,
                            \\"legend\\": {
                                \\"show\\": true,
                                \\"values\\": true,
                                \\"min\\": true,
                                \\"max\\": true,
                                \\"current\\": true,
                                \\"total\\": true,
                                \\"avg\\": true,
                                \\"alignAsTable\\": true
                            },
                            \\"nullPointMode\\": \\"null\\",
                            \\"steppedLine\\": false,
                            \\"tooltip\\": {
                                \\"value_type\\": \\"individual\\",
                                \\"shared\\": true,
                                \\"sort\\": 0
                            },
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"aliasColors\\": {},
                            \\"seriesOverrides\\": [],
                            \\"thresholds\\": [],
                            \\"links\\": [],
                            \\"description\\": \\"The total number of cache puts\\"
                        }
                    ],
                    \\"repeat\\": null,
                    \\"repeatIteration\\": null,
                    \\"repeatRowId\\": null,
                    \\"showTitle\\": true,
                    \\"title\\": \\"Cache Metrics\\",
                    \\"titleSize\\": \\"h6\\"
                },
                {
                    \\"collapse\\": false,
                    \\"height\\": 250,
                    \\"panels\\": [
                        {
                            \\"aliasColors\\": {},
                            \\"bars\\": false,
                            \\"dashLength\\": 10,
                            \\"dashes\\": false,
                            \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                            \\"description\\": \\"Count of REST requests\\",
                            \\"fill\\": 1,
                            \\"id\\": 27,
                            \\"legend\\": {
                                \\"alignAsTable\\": true,
                                \\"avg\\": true,
                                \\"current\\": true,
                                \\"max\\": true,
                                \\"min\\": true,
                                \\"show\\": true,
                                \\"total\\": false,
                                \\"values\\": true
                            },
                            \\"lines\\": true,
                            \\"linewidth\\": 1,
                            \\"links\\": [],
                            \\"nullPointMode\\": \\"null\\",
                            \\"percentage\\": false,
                            \\"pointradius\\": 5,
                            \\"points\\": false,
                            \\"renderer\\": \\"flot\\",
                            \\"seriesOverrides\\": [],
                            \\"spaceLength\\": 10,
                            \\"span\\": 12,
                            \\"stack\\": false,
                            \\"steppedLine\\": false,
                            \\"targets\\": [
                                {
                                    \\"expr\\": \\"{__name__=~\\\\\\".*rest.*_count\\\\\\", namespace=\\\\\\"$namespace\\\\\\", service=\\\\\\"$service_name\\\\\\"} \\",
                                    \\"format\\": \\"time_series\\",
                                    \\"intervalFactor\\": 2,
                                    \\"legendFormat\\": \\"{{__name__}}\\",
                                    \\"refId\\": \\"A\\",
                                    \\"step\\": 2
                                }
                            ],
                            \\"thresholds\\": [],
                            \\"timeFrom\\": null,
                            \\"timeShift\\": null,
                            \\"title\\": \\"REST Requests Metrics\\",
                            \\"tooltip\\": {
                                \\"shared\\": false,
                                \\"sort\\": 0,
                                \\"value_type\\": \\"individual\\"
                            },
                            \\"type\\": \\"graph\\",
                            \\"xaxis\\": {
                                \\"buckets\\": null,
                                \\"mode\\": \\"time\\",
                                \\"name\\": null,
                                \\"show\\": true,
                                \\"values\\": [
                                    \\"total\\"
                                ]
                            },
                            \\"yaxes\\": [
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                },
                                {
                                    \\"format\\": \\"short\\",
                                    \\"label\\": null,
                                    \\"logBase\\": 1,
                                    \\"max\\": null,
                                    \\"min\\": \\"0\\",
                                    \\"show\\": true
                                }
                            ],
                            \\"decimals\\": 0
                        }
                    ],
                    \\"repeat\\": null,
                    \\"repeatIteration\\": null,
                    \\"repeatRowId\\": null,
                    \\"showTitle\\": true,
                    \\"title\\": \\"REST Metrics\\",
                    \\"titleSize\\": \\"h6\\"
                }
            ],
            \\"schemaVersion\\": 14,
            \\"style\\": \\"dark\\",
            \\"tags\\": [
                \\"java\\",
                \\"jhipster\\",
                \\"spring-boot\\"
            ],
            \\"templating\\": {
                \\"list\\": [
                    {
                        \\"allValue\\": null,
                        \\"current\\": {},
                        \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                        \\"hide\\": 0,
                        \\"includeAll\\": false,
                        \\"label\\": \\"Namespace\\",
                        \\"multi\\": false,
                        \\"name\\": \\"namespace\\",
                        \\"options\\": [],
                        \\"query\\": \\"label_values(jvm_files, namespace)\\",
                        \\"refresh\\": 2,
                        \\"regex\\": \\"\\",
                        \\"sort\\": 1,
                        \\"tagValuesQuery\\": \\"\\",
                        \\"tags\\": [],
                        \\"tagsQuery\\": \\"\\",
                        \\"type\\": \\"query\\",
                        \\"useTags\\": false
                    },
                    {
                        \\"allValue\\": null,
                        \\"current\\": {},
                        \\"datasource\\": \\"\${DS_PROMETHEUS}\\",
                        \\"hide\\": 0,
                        \\"includeAll\\": false,
                        \\"label\\": \\"Service Name\\",
                        \\"multi\\": false,
                        \\"name\\": \\"service_name\\",
                        \\"options\\": [],
                        \\"query\\": \\"label_values(jvm_files, service)\\",
                        \\"refresh\\": 2,
                        \\"regex\\": \\"\\",
                        \\"sort\\": 1,
                        \\"tagValuesQuery\\": \\"\\",
                        \\"tags\\": [],
                        \\"tagsQuery\\": \\"\\",
                        \\"type\\": \\"query\\",
                        \\"useTags\\": false
                    }
                ]
            },
            \\"time\\": {
                \\"from\\": \\"now-15m\\",
                \\"to\\": \\"now\\"
            },
            \\"timepicker\\": {
                \\"refresh_intervals\\": [
                    \\"5s\\",
                    \\"10s\\",
                    \\"30s\\",
                    \\"1m\\",
                    \\"5m\\",
                    \\"15m\\",
                    \\"30m\\",
                    \\"1h\\",
                    \\"2h\\",
                    \\"1d\\"
                ],
                \\"time_options\\": [
                    \\"5m\\",
                    \\"15m\\",
                    \\"1h\\",
                    \\"6h\\",
                    \\"12h\\",
                    \\"24h\\",
                    \\"2d\\",
                    \\"7d\\",
                    \\"30d\\"
                ]
            },
            \\"timezone\\": \\"\\",
            \\"title\\": \\"JHipster Metrics\\",
            \\"version\\": 3
        },
        \\"inputs\\": [
            {
                \\"name\\": \\"DS_PROMETHEUS\\",
                \\"pluginId\\": \\"prometheus\\",
                \\"type\\": \\"datasource\\",
                \\"value\\": \\"prometheus\\"
            }
        ],
        \\"overwrite\\": true
    }
  prometheus-datasource.json: |
    {
        \\"access\\": \\"proxy\\",
        \\"basicAuth\\": false,
        \\"name\\": \\"prometheus\\",
        \\"type\\": \\"prometheus\\",
        \\"url\\": \\"http://jhipster-prometheus:9090\\"
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: jhipster-grafana-dashboard
  namespace: mynamespace
  labels:
    job: jhipster-grafana-dashboard
spec:
  template:
    metadata:
      labels:
        job: jhipster-grafana-dashboard
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      initContainers:
        - name: init-dependent-services-check
          image: busybox
          command:
            - \\"/bin/sh\\"
            - \\"-c\\"
            - |
              until nc -z -w 1 jhipster-prometheus 9090
              do
                echo Waiting for prometheus to get initialized
                sleep 5
              done
              until nc -z -w 1 jhipster-grafana 3000
              do
                echo Waiting for grafana to get initialized
                sleep 5
              done
      containers:
        - name: grafana-configurer
          image: quay.io/coreos/grafana-watcher:v0.0.8
          args:
            - \\"--watch-dir=/var/grafana-dashboard\\"
            - \\"--grafana-url=http://jhipster-grafana:3000\\"
          env:
            - name: GRAFANA_USER
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: username
            - name: GRAFANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: password
          resources:
            requests:
              memory: \\"16Mi\\"
              cpu: \\"50m\\"
            limits:
              memory: \\"32Mi\\"
              cpu: \\"100m\\"
          volumeMounts:
            - name: grafana-dashboard
              mountPath: /var/grafana-dashboard
      volumes:
        - name: grafana-dashboard
          configMap:
            name: jhipster-grafana-dashboard
      restartPolicy: OnFailure
",
    "stateCleared": "modified",
  },
  "monitoring-knative/jhipster-grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhipster-grafana-gateway
  namespace: mynamespace
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhipster-grafana.mynamespace.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhipster-grafana.mynamespace.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhipster-grafana-gw-virtualservice
  namespace: mynamespace
spec:
  hosts:
    - jhipster-grafana.mynamespace.
  gateways:
    - jhipster-grafana-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: jhipster-grafana
",
    "stateCleared": "modified",
  },
  "monitoring-knative/jhipster-grafana.yml": Object {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: jhipster-grafana-credentials
  namespace: mynamespace
data:
  username: amhpcHN0ZXI=
  password: amhpcHN0ZXI=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhipster-grafana
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhipster-grafana
  template:
    metadata:
      labels:
        app: jhipster-grafana
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      containers:
        - name: jhipster-grafana
          image: grafana/grafana:8.2.4
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: username
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: password
            - name: GF_USERS_ALLOW_SIGN_UP
              value: \\"false\\"
          resources:
            requests:
              memory: \\"100Mi\\"
              cpu: \\"100m\\"
            limits:
              memory: \\"250Mi\\"
              cpu: \\"200m\\"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/grafana-storage
      volumes:
        - name: grafana-storage
          emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-grafana
  namespace: mynamespace
  labels:
    app: jhipster-grafana
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
  type:
  selector:
    app: jhipster-grafana
---

",
    "stateCleared": "modified",
  },
  "monitoring-knative/jhipster-prometheus-cr.yml": Object {
    "contents": "apiVersion: v1
kind: ServiceAccount
metadata:
  name: jhipster-prometheus-sa
  namespace: mynamespace
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: jhipster-prometheus-role
  namespace: mynamespace
rules:
  - apiGroups: [\\"\\"]
    resources:
      - nodes
      - services
      - endpoints
      - pods
    verbs: [\\"get\\", \\"list\\", \\"watch\\"]
  - apiGroups: [\\"\\"]
    resources:
      - configmaps
    verbs: [\\"get\\"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
# limit to the namespace
kind: RoleBinding
metadata:
  name: jhipster-prometheus-rb
  namespace: mynamespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jhipster-prometheus-role
subjects:
  - kind: ServiceAccount
    name: jhipster-prometheus-sa
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: jhipster-prometheus
  namespace: mynamespace
spec:
  replicas: 1
  serviceAccountName: jhipster-prometheus-sa
  serviceMonitorSelector:
    matchLabels:
      team: mynamespace
  resources:
    requests:
      memory: 400Mi
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-prometheus
  namespace: mynamespace
spec:
  ports:
    - name: web
      port: 9090
      protocol: TCP
      targetPort: web
  selector:
    prometheus: jhipster-prometheus
",
    "stateCleared": "modified",
  },
  "monitoring-knative/jhipster-prometheus-crd.yml": Object {
    "contents": "apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: jhipster-prometheus-operator-cr
rules:
  - apiGroups:
      - extensions
    resources:
      - thirdpartyresources
    verbs:
      - \\"*\\"
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - \\"*\\"
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - alertmanagers
      - prometheuses
      - servicemonitors
      - prometheusrules
    verbs:
      - \\"*\\"
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs: [\\"*\\"]
  - apiGroups: [\\"\\"]
    resources:
      - configmaps
      - secrets
    verbs: [\\"*\\"]
  - apiGroups: [\\"\\"]
    resources:
      - pods
    verbs: [\\"list\\", \\"delete\\"]
  - apiGroups: [\\"\\"]
    resources:
      - services
      - endpoints
    verbs: [\\"get\\", \\"create\\", \\"update\\"]
  - apiGroups: [\\"\\"]
    resources:
      - nodes
    verbs: [\\"list\\", \\"watch\\"]
  - apiGroups: [\\"\\"]
    resources:
      - namespaces
    verbs: [\\"list\\", \\"watch\\"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jhipster-prometheus-operator-sa
  namespace: mynamespace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jhipster-prometheus-operator-rb
  namespace: mynamespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jhipster-prometheus-operator-cr
subjects:
  - kind: ServiceAccount
    name: jhipster-prometheus-operator-sa
    namespace: mynamespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: prometheus-operator
  name: jhipster-prometheus-operator
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: prometheus-operator
  template:
    metadata:
      labels:
        k8s-app: prometheus-operator
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      containers:
        - args:
            - --kubelet-service=kube-system/kubelet
            - --config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1
          image: quay.io/coreos/prometheus-operator:v0.42.1
          name: prometheus-operator
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits:
              cpu: 200m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 50Mi
      serviceAccountName: jhipster-prometheus-operator-sa
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: mynamespace
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-prometheus-sm.yml": Object {
    "contents": "apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: msmysql-app
  namespace: mynamespace
  labels:
    team: mynamespace
spec:
  selector:
    matchLabels:
      app: msmysql
  endpoints:
    - port: web
      path: /prometheusMetrics
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.mynamespace.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: MANAGEMENT_METRICS_EXPORT_PROMETHEUS_ENABLED
                  value: \\"true\\"
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: mynamespace
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: mynamespace
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "namespace.yml": Object {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
  "registry-knative/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-knative/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: mynamespace
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: mynamespace
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: mynamespace
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using K8s generator type mysql microservice with custom namespace should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"02-mysql\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipster\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"mynamespace\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"k8s\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash kubectl-knative-apply.sh (or) ./kubectl-knative-apply.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "istio-knative/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-knative/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-knative/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "kubectl-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-knative-apply.sh

logSummary(){
    echo \\"\\"
        echo \\"#####################################################\\"
        echo \\"Please find the below useful endpoints,\\"
        echo \\"Jaeger - http://jaeger.istio-system.\\"
        echo \\"Grafana - http://grafana.istio-system.\\"
        echo \\"Kiali - http://kiali.istio-system.\\"
        echo \\"#####################################################\\"
}

suffix=knative
kubectl apply -f namespace.yml
kubectl apply -f registry-\${suffix}/
kubectl label namespace mynamespace istio-injection=enabled --overwrite=true
kubectl apply -f msmysql-\${suffix}/

kubectl apply -f istio-\${suffix}/

logSummary
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: msmysql-destinationrule
  namespace: mynamespace
spec:
  host: msmysql-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  template:
    metadata:
      labels:
        app: msmysql
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: msmysql-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: msmysql
            version: \\"v1\\"
        spec:
          containers:
            - name: msmysql-app
              image: jhipster/msmysql
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.mynamespace.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: msmysql
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8081
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "msmysql-knative/msmysql-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: msmysql-virtualservice
  namespace: mynamespace
spec:
  gateways:
    - mesh
  hosts:
    - msmysql-knative
  http:
    - route:
        - destination:
            host: msmysql-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: mynamespace
                Knative-Serving-Revision: msmysql-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "namespace.yml": Object {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
  "registry-knative/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.mynamespace.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-knative/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: mynamespace
type: Opaque
data:
  registry-admin-password: SECRET-admin-50 # base64 encoded \\"admin\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: mynamespace
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: mynamespace
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
}
`;

exports[`JHipster Knative Sub Generator Using K8s generator type only gateway should match files snapshot 1`] = `
Object {
  ".yo-rc.json": Object {
    "contents": "{
  \\"generator-jhipster\\": {
    \\"appsFolders\\": [\\"01-gateway\\"],
    \\"directoryPath\\": \\"./\\",
    \\"clusteredDbApps\\": {},
    \\"serviceDiscoveryType\\": \\"eureka\\",
    \\"jwtSecretKey\\": \\"SECRET--50\\",
    \\"dockerRepositoryName\\": \\"jhipsterrepository\\",
    \\"dockerPushCommand\\": \\"docker push\\",
    \\"kubernetesNamespace\\": \\"jhipsternamespace\\",
    \\"kubernetesServiceType\\": \\"LoadBalancer\\",
    \\"generatorType\\": \\"k8s\\",
    \\"ingressDomain\\": \\"\\",
    \\"monitoring\\": \\"no\\",
    \\"istio\\": true
  }
}
",
    "stateCleared": "modified",
  },
  "KNATIVE-README.md": Object {
    "contents": "# JHipster-generated Kubernetes Knative configuration

## Preparation

- Knative depends on Istio. In order to use the manifests generated by k8s-knative generator, you should have istio and kntaive installed
  in the cluster. Follow [this link](https://knative.dev/docs/install/) for instructions.

- You will need to push your image(s) to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
    $ docker image tag jhgate jhipsterrepository/jhgate
$ docker push jhipsterrepository/jhgate
\`\`\`

- This generator uses k8s generator for most of the part, except the core microservices apps that are (k)native.

## Deployment

You can deploy all your apps by running the below terminal command:

\`\`\`
bash kubectl-knative-apply.sh (or) ./kubectl-knative-apply.sh
\`\`\`

For Kubernetes specific more information, refer to the \`kubernetes\` sub-generator Readme instructions.
",
    "stateCleared": "modified",
  },
  "istio-knative/grafana-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-knative/kiali-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-knative/zipkin-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-destination-rule.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: jhipsternamespace
spec:
  host: jhgate-knative
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutiveErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: \\"v1\\"
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-gateway.yml": Object {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: jhipsternamespace
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.jhipsternamespace.
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.jhipsternamespace.
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: jhipsternamespace
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.jhipsternamespace.
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate-knative
          headers:
            request:
              add:
                Knative-Serving-Namespace: jhipsternamespace
                Knative-Serving-Revision: jhgate-knative
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-mysql.yml": Object {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: mysql
          image: mysql:8.0.27
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: \\"yes\\"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: \\"512Mi\\"
              cpu: \\"500m\\"
            limits:
              memory: \\"1Gi\\"
              cpu: \\"1\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-service.yml": Object {
    "contents": "apiVersion: serving.knative.dev/v1alpha1
kind: Service
metadata:
  name: jhgate
  namespace: jhipsternamespace
spec:
  template:
    metadata:
      labels:
        app: jhgate
        version: \\"v1\\"
  runLatest:
    configuration:
      revisionTemplate:
        metadata:
          name: jhgate-knative
          annotations:
            # this prevents from scale to zero
            autoscaling.knative.dev/minScale: \\"1\\"
          labels:
            app: jhgate
            version: \\"v1\\"
        spec:
          containers:
            - name: jhgate-app
              image: jhipsterrepository/jhgate
              env:
                - name: SPRING_PROFILES_ACTIVE
                  value: prod
                - name: SPRING_CLOUD_CONFIG_URI
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.jhipsternamespace.svc.cluster.local:8761/config
                - name: JHIPSTER_REGISTRY_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: registry-secret
                      key: registry-admin-password
                - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
                  value: http://admin:\${jhipster.registry.password}@jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/
                - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
                  value: \\"false\\"
                - name: EUREKA_INSTANCE_HOSTNAME
                  value: jhgate
                - name: SPRING_DATASOURCE_URL
                  value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&serverTimezone=UTC&createDatabaseIfNotExist=true
                - name: SPRING_SLEUTH_PROPAGATION_KEYS
                  value: \\"x-request-id,x-ot-span-context\\"
                - name: JAVA_OPTS
                  value: \\" -Xmx256m -Xms256m\\"
                - name: SERVER_SHUTDOWN
                  value: graceful
              resources:
                requests:
                  memory: \\"512Mi\\"
                  cpu: \\"500m\\"
                limits:
                  memory: \\"1Gi\\"
                  cpu: \\"1\\"
              ports:
                - containerPort: 8080
              readinessProbe:
                httpGet:
                  path: /management/health/readiness
                initialDelaySeconds: 20
                periodSeconds: 15
                failureThreshold: 6
                timeoutSeconds: 5
              livenessProbe:
                httpGet:
                  path: /management/health/liveness
                initialDelaySeconds: 120
                timeoutSeconds: 5
  traffic:
    - tag: latest
      percent: 100
      latestRevision: true
",
    "stateCleared": "modified",
  },
  "jhgate-knative/jhgate-virtual-service.yml": Object {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: jhipsternamespace
spec:
  gateways:
    - mesh
  hosts:
    - jhgate-knative
  http:
    - route:
        - destination:
            host: jhgate-knative
            subset: \\"v1\\"
          headers:
            request:
              add:
                Knative-Serving-Namespace: jhipsternamespace
                Knative-Serving-Revision: jhgate-knative
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "kubectl-knative-apply.sh": Object {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-knative-apply.sh

logSummary(){
    echo \\"\\"
        echo \\"#####################################################\\"
        echo \\"Please find the below useful endpoints,\\"
        echo \\"Gateway - http://jhgate.jhipsternamespace.\\"
        echo \\"Jaeger - http://jaeger.istio-system.\\"
        echo \\"Grafana - http://grafana.istio-system.\\"
        echo \\"Kiali - http://kiali.istio-system.\\"
        echo \\"#####################################################\\"
}

suffix=knative
kubectl apply -f namespace.yml
kubectl apply -f registry-\${suffix}/
kubectl label namespace jhipsternamespace istio-injection=enabled --overwrite=true
kubectl apply -f jhgate-\${suffix}/

kubectl apply -f istio-\${suffix}/

logSummary
",
    "stateCleared": "modified",
  },
  "namespace.yml": Object {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: jhipsternamespace
",
    "stateCleared": "modified",
  },
  "registry-knative/application-configmap.yml": Object {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: jhipsternamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-knative/jhipster-registry.yml": Object {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: jhipsternamespace
type: Opaque
data:
  registry-admin-password: SECRET-meetup-50 # base64 encoded \\"meetup\\"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: jhipsternamespace
  labels:
    app: jhipster-registry
  annotations:
    service.alpha.kubernetes.io/tolerate-unready-endpoints: \\"true\\"
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: jhipsternamespace
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: \\"1.0\\"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: \\"1.0\\"
      annotations:
        sidecar.istio.io/inject: \\"false\\"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster/jhipster-registry:v7.1.0
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: \\"false\\"
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: \\"15\\"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: \\"30\\"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: \\"15000\\"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: \\"3\\"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: \\"false\\"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: \\"2000\\"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: \\"true\\"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: \\"true\\"
            - name: K8S_CONFIG_PATH
              value: \\"/central-config/\\"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
}
`;

// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`generator - common source apis addSonarProperties with empty properties should ignore sonar rule 1`] = `
{
  "sonar-project.properties": {
    "contents": "
# New property comment
sonar.new.property = newValue
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - common source apis addSonarProperties with existing sonar.issue.ignore.multicriteria key should ignore sonar rule 1`] = `
{
  "sonar-project.properties": {
    "contents": "
# New property comment
sonar.new.property = newValue

sonar.issue.ignore.multicriteria = ruleId, ruleId2
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - common source apis ignoreSonarRule should ignore sonar rule 1`] = `
{
  "sonar-project.properties": {
    "contents": "
sonar.issue.ignore.multicriteria = ruleId, ruleId2
# comment
sonar.issue.ignore.multicriteria.ruleId.resourceKey = resourceKey
sonar.issue.ignore.multicriteria.ruleId.ruleKey = ruleKey
# comment 2
sonar.issue.ignore.multicriteria.ruleId2.resourceKey = resourceKey2
sonar.issue.ignore.multicriteria.ruleId2.ruleKey = ruleKey2
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - common with default config should succeed 1`] = `
{
  ".editorconfig": {
    "contents": "# EditorConfig helps developers define and maintain consistent
# coding styles between different editors and IDEs
# editorconfig.org

root = true

[*]

# We recommend you to keep these unchanged
end_of_line = lf
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true

# Change these settings to your own preference
indent_style = space
indent_size = 2

[*.md]
trim_trailing_whitespace = false
",
    "stateCleared": "modified",
  },
  ".husky/pre-commit": {
    "contents": "if [ -z "$(which lint-staged)" ]; then
    echo 'Running package manager install'
    npm install
fi

lint-staged
",
    "stateCleared": "modified",
  },
  ".lintstagedrc.cjs": {
    "contents": "module.exports = {
  '{,**/}*.{md,json,yml,js,cjs,mjs,ts,cts,mts}': ['prettier --write'],
};
",
    "stateCleared": "modified",
  },
  ".prettierignore": {
    "contents": "node_modules
package-lock.json
.git
",
    "stateCleared": "modified",
  },
  ".prettierrc": {
    "contents": "printWidth: 140
singleQuote: true
tabWidth: 2
useTabs: false
arrowParens: avoid
bracketSameLine: false
plugins:
  - prettier-plugin-packagejson
",
    "stateCleared": "modified",
  },
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "baseName": "jhipster",
    "creationTimestamp": 1577836800000,
    "entities": []
  }
}
",
    "stateCleared": "modified",
  },
  "README.md": {
    "contents": "# jhipster

This application was generated using JHipster JHIPSTER_VERSION, you can find documentation and help at [https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION](https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION).


## Project Structure


## Development



## Building for production


## Testing



[JHipster Homepage and latest documentation]: https://www.jhipster.tech/
[JHipster JHIPSTER_VERSION archive]: https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION
[Using JHipster in development]: https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION/development/
[Using Docker and Docker-Compose]: https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION/docker-compose
[Using JHipster in production]: https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION/production/
[Running tests page]: https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION/running-tests/
[Code quality page]: https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION/code-quality/
[Setting up Continuous Integration]: https://www.jhipster.tech/documentation-archive/vJHIPSTER_VERSION/setting-up-ci/

[Node.js]: https://nodejs.org/
[NPM]: https://www.npmjs.com/
",
    "stateCleared": "modified",
  },
  "package.json": {
    "contents": "{
  "private": true,
  "dependencies": {},
  "devDependencies": {
    "generator-jhipster": "JHIPSTER_VERSION",
    "prettier": "PRETTIER_VERSION",
    "prettier-plugin-packagejson": "PRETTIER_PLUGIN_PACKAGEJSON_VERSION",
    "husky": "HUSKY_VERSION",
    "lint-staged": "LINT_STAGED_VERSION"
  },
  "engines": {},
  "scripts": {
    "prettier:check": "prettier --check \\"{,src/**/,webpack/,.blueprint/**/}*.{md,json,yml,js,cjs,mjs,ts,cts,mts}\\"",
    "prettier:format": "prettier --write \\"{,src/**/,webpack/,.blueprint/**/}*.{md,json,yml,js,cjs,mjs,ts,cts,mts}\\"",
    "prepare": "husky"
  },
  "config": {
    "default_environment": "prod"
  },
  "name": "jhipster",
  "version": "0.0.0",
  "description": "Description for JHipster",
  "license": "UNLICENSED"
}
",
    "stateCleared": "modified",
  },
  "sonar-project.properties": {
    "contents": "sonar.projectKey = jhipster
sonar.projectName = jhipster generated by jhipster

# Typescript tests files must be inside sources and tests, otherwise \`INFO: 
# Test execution data ignored for 80 unknown files, including:\` is shown.
sonar.sources = src
sonar.tests = src
sonar.host.url = http://localhost:9001
sonar.sourceEncoding = UTF-8

sonar.test.inclusions = src/test/**/*.*

sonar.issue.ignore.multicriteria =
",
    "stateCleared": "modified",
  },
}
`;

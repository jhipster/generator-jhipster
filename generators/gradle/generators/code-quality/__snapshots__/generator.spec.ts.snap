// Jest Snapshot v1, https://jestjs.io/docs/snapshot-testing

exports[`generator - gradle:code-quality with gradle build tool should match files snapshot 1`] = `
{
  "build.gradle": {
    "contents": "
dependencies {
// jhipster-needle-gradle-dependency
}
plugins {
id "jhipster.code-quality-conventions"
// jhipster-needle-gradle-plugins
}
",
    "stateCleared": "modified",
  },
  "buildSrc/build.gradle": {
    "contents": "plugins {
    id 'groovy-gradle-plugin'
}

repositories {
    gradlePluginPortal()
}

dependencies {
    implementation libs.modernizer.plugin
    implementation libs.nohttp.plugin
    implementation libs.sonarqube.plugin
    implementation libs.spotless.plugin
    // jhipster-needle-gradle-dependency - JHipster will add additional dependencies for convention plugins here
    // jhipster-needle-gradle-build-src-dependency - Deprecated: JHipster will add additional dependencies for convention plugins here
}
",
    "stateCleared": "modified",
  },
  "buildSrc/gradle/libs.versions.toml": {
    "contents": "[versions]
# jhipster-needle-gradle-dependency-catalog-version - JHipster will add additional versions for convention plugins heref
# jhipster-needle-gradle-build-src-dependency-catalog-version - Deprecated: JHipster will add additional versions for convention plugins here

[libraries]
modernizer-plugin = { module = "com.github.andygoossens:gradle-modernizer-plugin", version = "'GRADLE-MODERNIZER-PLUGIN-VERSION'" }
nohttp-plugin = { module = "io.spring.nohttp:nohttp-gradle", version = "'NOHTTP-CHECKSTYLE-VERSION'" }
sonarqube-plugin = { module = "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin", version = "'GRADLE-SONARQUBE-VERSION'" }
spotless-plugin = { module = "com.diffplug.spotless:spotless-plugin-gradle", version = "'SPOTLESS-GRADLE-PLUGIN-VERSION'" }
# jhipster-needle-gradle-dependency-catalog-libraries - JHipster will add additional libraries versions

[plugins]
# jhipster-needle-gradle-dependency-catalog-plugins - JHipster will add additional plugins versions
",
    "stateCleared": "modified",
  },
  "buildSrc/src/main/groovy/jhipster.code-quality-conventions.gradle": {
    "contents": "plugins {
    id "jacoco"
    id "org.sonarqube"
    id "com.diffplug.spotless"
    id "com.github.andygoossens.gradle-modernizer-plugin"
    id "io.spring.nohttp"
}

jacoco {
    toolVersion = "\${libs.versions.jacoco.get()}"
}

jacocoTestReport {
    executionData tasks.withType(Test)
    classDirectories.from = files(sourceSets.main.output.classesDirs)
    sourceDirectories.from = files(sourceSets.main.java.srcDirs)

    reports {
        xml.required = true
    }
}

file("sonar-project.properties").withReader {
    Properties sonarProperties = new Properties()
    sonarProperties.load(it)

    sonarProperties.each { key, value ->
        sonarqube {
            properties {
                property key, value
            }
        }
    }
}

spotless {
    java {
        target 'src/*/java/**/*.java'
        // removeUnusedImports()
    }
}

modernizer {
    failOnViolations = true
    includeTestClasses = true
}

checkstyle {
    toolVersion "\${libs.versions.checkstyle.get()}"
    configFile file("checkstyle.xml")
    checkstyleTest.enabled = false
}

nohttp {
    source.include "build.gradle", "README.md"
}

// workaround for https://github.com/checkstyle/checkstyle/issues/14123
configurations.checkstyle {
    resolutionStrategy.capabilitiesResolution.withCapability("com.google.collections:google-collections") {
      select("com.google.guava:guava:0")
    }
}",
    "stateCleared": "modified",
  },
  "gradle/libs.versions.toml": {
    "contents": "[versions]
jacoco = "'JACOCO-MAVEN-PLUGIN-VERSION'"
checkstyle = "'CHECKSTYLE-VERSION'"
# jhipster-needle-gradle-dependency-catalog-version - JHipster will add additional versions for convention plugins heref

[libraries]
# jhipster-needle-gradle-dependency-catalog-libraries - JHipster will add additional libraries versions

[plugins]
# jhipster-needle-gradle-dependency-catalog-plugins - JHipster will add additional plugins versions
",
    "stateCleared": "modified",
  },
}
`;

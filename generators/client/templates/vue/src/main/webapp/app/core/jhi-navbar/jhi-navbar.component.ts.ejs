import { Component, Inject, Vue } from 'vue-property-decorator';
import LoginService from '@/account/login.service';
import AccountService from '@/account/account.service';
<%_ if (enableTranslation) { _%>
import TranslationService from '@/locale/translation.service';
<%_ } %>

import EntitiesMenu from '@/entities/entities-menu.vue';

@Component({
  components: {
    'entities-menu': EntitiesMenu,
<%_ if (applicationTypeGateway && microfrontend) { _%>
  <%_ for (const remote of remotes) { _%>
    '<%= remote.lowercaseBaseName %>-menu': () => import('@<%= remote.lowercaseBaseName %>/entities-menu'),
  <%_ } _%>
<%_ } _%>
  },
})
export default class JhiNavbar extends Vue {
  @Inject('loginService')
  private loginService: () => LoginService;
<%_ if (enableTranslation) { _%>
  @Inject('translationService') private translationService: () => TranslationService;
<%_ } %>
  @Inject('accountService') private accountService: () => AccountService;
  public version = 'v' + VERSION;
  private currentLanguage = this.$store.getters.currentLanguage;
  private languages: any = this.$store.getters.languages;
  private hasAnyAuthorityValues = {};

  created() {
<%_ if (enableTranslation) { _%>
    this.translationService().refreshTranslation(this.currentLanguage);
<%_ } _%>
  }

  public subIsActive(input) {
    const paths = Array.isArray(input) ? input : [input]
    return paths.some(path => {
      return this.$route.path.indexOf(path) === 0 // current path starts with this path string
    })
  }


<%_ if (enableTranslation) { _%>
  public changeLanguage(newLanguage: string) : void {
    this.translationService().refreshTranslation(newLanguage);
  }

  public isActiveLanguage(key: string) : boolean {
    return key === this.$store.getters.currentLanguage;
  }
<%_ } _%>

  public logout() : Promise<any> {
<%_ if (!authenticationTypeJwt) { _%>
    return this.loginService().logout().then(response => {
      this.$store.commit('logout');
  <%_ if (authenticationTypeOauth2) { _%>
      window.location.href = response.data.logoutUrl;
      const next = response.data?.logoutUrl ?? '/';
      if (this.$route.path !== next) {
        return this.$router.push(next);
      }
  <%_ } else { _%>
      if (this.$route.path !== '/') {
        return this.$router.push('/');
      }
  <%_ } _%>
    });
<%_ } else { _%>
    localStorage.removeItem('<%=jhiPrefixDashed %>-authenticationToken');
    sessionStorage.removeItem('<%=jhiPrefixDashed %>-authenticationToken');
    this.$store.commit('logout');
    if (this.$route.path !== '/') {
      return this.$router.push('/');
    }
<%_ } _%>
    return Promise.resolve(this.$router.currentRoute);
  }

  public openLogin() : void {
<%_ if (!authenticationTypeOauth2) { _%>
    this.loginService().openLogin((<any>this).$root);
<%_ } else { %>
    this.loginService().login();
<%_ } %>
  }

  public get authenticated(): boolean {
    return this.$store.getters.authenticated;
  }

  public hasAnyAuthority(authorities: any): boolean {
    this.accountService().hasAnyAuthorityAndCheckAuth(authorities).then(value => {
      this.hasAnyAuthorityValues[authorities] = value;
    });
    return this.hasAnyAuthorityValues[authorities] ?? false;
  }

  public get openAPIEnabled() : boolean {
    return (this.$store.getters.activeProfiles.indexOf('api-docs') > -1);
  }

  public get inProduction() : boolean {
    return (this.$store.getters.activeProfiles.indexOf('prod') > -1);
  }
}

<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import * as React from 'react';
import { connect } from 'react-redux';
import { Modal, ModalHeader, ModalBody, ModalFooter, Button, Label } from 'reactstrap';
import { AvForm, AvGroup, AvInput, AvFeedback } from 'availity-reactstrap-validation';
import { Translate, ICrudGetAction, ICrudGetAllAction, ICrudPutAction } from 'react-jhipster';
import { FaBan, FaFloppyO } from 'react-icons/lib/fa';

<%_ if (enableTranslation) { _%>
import { locales } from 'app/config/translation';
<%_ } _%>
import { getUser, getRoles, updateUser, createUser, resetModal } from './user-management.reducer';

export interface IUserManagementDialogProps {
  getUser: ICrudGetAction;
  getRoles: ICrudGetAllAction;
  updateUser: ICrudPutAction;
  createUser: ICrudPutAction;
  resetModal: Function;
  loading: boolean;
  updating: boolean;
  user: any;
  roles: any[];
  match: any;
  history: any;
}

export interface IUserManagementDialogState {
  showModal: boolean;
  isNew: boolean;
}

export class UserManagementDialog extends React.Component<IUserManagementDialogProps, IUserManagementDialogState> {

  state: IUserManagementDialogState = {
    showModal: true,
    isNew: !this.props.match.params || !this.props.match.params.login
  };

  componentDidMount() {
    !this.state.isNew && this.props.getUser(this.props.match.params.login);
    this.props.getRoles();
  }

  componentWillUnmount() {
    this.props.resetModal();
  }

  saveUSer = (event, errors, values) => {
    if (this.state.isNew) {
      this.props.createUser(values);
    } else {
      this.props.updateUser(values);
    }
    this.handleClose();
  }

  handleClose = () => {
    this.setState({
        showModal: false
    });
    this.props.history.push('/admin/user-management');
  }

  render() {
    const isInvalid = false;
    const { user, loading, updating, roles } = this.props;
    const { showModal, isNew } = this.state;
    return (
      <Modal
        isOpen={showModal} modalTransition={{ timeout: 20 }} backdropTransition={{ timeout: 10 }}
        toggle={this.handleClose} size="lg"
      >
      <ModalHeader toggle={this.handleClose}><Translate contentKey="userManagement.home.createOrEditLabel">Create or edit a User</Translate></ModalHeader>
      { loading ? <p>Loading...</p>
      : <AvForm model={isNew ? {} : user} onSubmit={this.saveUSer} >
          <ModalBody>
            { user.id ?
              <AvGroup>
                <Label for="id"><Translate contentKey="global.field.id">ID</Translate></Label>
                <AvInput type="text" className="form-control" name="id" required readOnly/>
              </AvGroup>
              : null
            }
            <AvGroup>
              <Label for="login"><Translate contentKey="userManagement.login">Login</Translate></Label>
              <AvInput type="text" className="form-control" name="login" required />
              <AvFeedback>This field is required.</AvFeedback>
              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>
            </AvGroup>
            <AvGroup>
              <Label for="firstName"><Translate contentKey="userManagement.firstName">First Name</Translate></Label>
              <AvInput type="text" className="form-control" name="firstName" />
              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>
            </AvGroup>
            <AvGroup>
              <Label for="lastName"><Translate contentKey="userManagement.lastName">Last Name</Translate></Label>
              <AvInput type="text" className="form-control" name="lastName" />
              <AvFeedback>This field cannot be longer than 50 characters.</AvFeedback>
            </AvGroup>
            <AvGroup>
              <Label for="email"><Translate contentKey="userManagement.email">E-mail</Translate></Label>
              <AvInput type="email" className="form-control" name="email" required/>
              <AvFeedback>This field is required.</AvFeedback>
              <AvFeedback>This field cannot be longer than 254 characters.</AvFeedback>
              <AvFeedback>This field is required to be at least 5 characters.</AvFeedback>
            </AvGroup>
            <AvGroup check inline>
              <Label>
                <AvInput type="checkbox" name="activated" /> <Translate contentKey="userManagement.activated">Activated</Translate>
              </Label>
              <AvFeedback>This field is required.</AvFeedback>
              <AvFeedback>This field cannot be longer than 254 characters.</AvFeedback>
              <AvFeedback>This field is required to be at least 5 characters.</AvFeedback>
            </AvGroup>
            <%_ if (enableTranslation) { _%>
            <AvGroup>
              <Label for="langKey"><Translate contentKey="userManagement.langKey">Language Key</Translate></Label>
              <AvInput type="select" className="form-control" name="langKey">
                {locales.map(lang => <option value={lang} key={lang}>{lang}</option>)}
              </AvInput>
            </AvGroup>
            <%_ } _%>
            <AvGroup>
              <Label for="authorities"><Translate contentKey="userManagement.profiles">Language Key</Translate></Label>
              <AvInput type="select" className="form-control" name="authorities" multiple>
                {roles.map(role => <option value={role} key={role}>{role}</option>)}
              </AvInput>
            </AvGroup>
          </ModalBody>
          <ModalFooter>
            <Button color="secondary" onClick={this.handleClose}>
              <FaBan/>&nbsp;
              <Translate contentKey="entity.action.cancel">Cancel</Translate>
            </Button>
            <Button color="primary" type="submit" disabled={isInvalid || updating}>
              <FaFloppyO/>&nbsp;
              <Translate contentKey="entity.action.save">Save</Translate>
            </Button>
          </ModalFooter>
        </AvForm>
      }
    </Modal>
    );
  }
}

const mapStateToProps = storeState => ({
  user: storeState.userManagement.user,
  roles: storeState.userManagement.authorities,
  loading: storeState.userManagement.loading,
  updating: storeState.userManagement.updating
});

const mapDispatchToProps = { getUser, getRoles, updateUser, createUser, resetModal };

export default connect(mapStateToProps, mapDispatchToProps)(UserManagementDialog);

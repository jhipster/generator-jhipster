<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import './header.<%= styleSheetExt %>';

import * as React from 'react';
import { Translate } from 'react-jhipster';
import {
  Navbar, Nav, NavItem, NavLink, NavbarToggler, NavbarBrand, Collapse,
  UncontrolledDropdown, DropdownToggle, DropdownMenu, DropdownItem
} from 'reactstrap';
import {
  FaHome, FaThList, FaUserPlus, FaUser, <%_ if (enableTranslation) { _%>FaFlag,<%_ } _%> FaHeart,
  FaList, FaTasks, FaDashboard, FaBook, FaWrench, FaSignIn, FaSignOut,
  FaClockO, FaHddO,
  <%_ if (authenticationType === 'session') { _%>
  FaCloud,
  <%_ } _%>
  // tslint:disable-next-line
  FaRoad,
  // tslint:disable-next-line
  FaEye,
  // tslint:disable-next-line
  FaAsterisk,
  // tslint:disable-next-line
  FaBell
} from 'react-icons/lib/fa';
import { NavLink as Link } from 'react-router-dom';
import LoadingBar from 'react-redux-loading-bar';

<%_ if (authenticationType === 'oauth2') { _%>
import { getLoginUrl } from 'app/shared/util/url-utils';
<%_ } _%>
<%_ if (enableTranslation) { _%>
import { locales } from 'app/config/translation';
<%_ } _%>
import appConfig from 'app/config/constants';

export interface IHeaderProps {
  isAuthenticated: boolean;
<%_ if (enableTranslation) { _%>
  currentLocale: string;
  onLocaleChange: Function;
<%_ } _%>
}

export interface IHeaderState {
  menuOpen: boolean
}

const BrandIcon = props => (
  <div {...props} className="brand-icon">
    <img
      src="static/images/logo-jhipster-react.svg"
      alt="Logo"
    />
  </div>
);
export class Header extends React.Component<IHeaderProps, IHeaderState> {
  state: IHeaderState = {
      menuOpen: false
  };

  <%_ if (enableTranslation) { _%>
  handleLocaleChange = event => {
    this.props.onLocaleChange(event.target.value);
  }

  <%_ } _%>
  renderDevRibbon = () => (
    process.env.NODE_ENV === 'development' ?
      <div className="ribbon dev"><a href=""><Translate contentKey="global.ribbon.dev" /></a></div> :
      null
  )

  toggleMenu = () => {
    this.setState({ menuOpen: !this.state.menuOpen });
  }

  render() {
    const {<%_ if (enableTranslation) { _%>currentLocale,<%_ } _%> isAuthenticated } = this.props;
    const entityMenuItems = [
      /* jhipster-needle-add-entity-to-menu - - JHipster will add entities to the menu here */
      <span key="dummy-placeholder"/> /* workaround to avoid error when there are no entities */
    ];
    /* jhipster-needle-add-element-to-menu - JHipster will add entities to the menu here */
    const adminMenuItems = [
    <%_ if (applicationType === 'gateway') { _%>
      <DropdownItem tag={Link} key="gateway" to="/admin/gateway"><FaRoad /> Gateway</DropdownItem>,
    <%_ } _%>
    <%_ if (!skipUserManagement) { _%>
      <DropdownItem tag={Link} key="user-management" to="/admin/user-management"><FaUser /> User Management</DropdownItem>,
    <%_ } _%>
    <%_ if (websocket === 'spring-websocket') { _%>
      <DropdownItem tag={Link} key="tracker" to="/admin/tracker"><FaEye /> Tracker</DropdownItem>,
    <%_ } _%>
      <DropdownItem tag={Link} key="metrics" to="/admin/metrics"><FaDashboard /> Metrics</DropdownItem>,
      <DropdownItem tag={Link} key="health" to="/admin/health"><FaHeart /> Health</DropdownItem>,
      <DropdownItem tag={Link} key="configuration" to="/admin/configuration"><FaList /> Configuration</DropdownItem>,
    <%_ if (databaseType !== 'cassandra') { _%>
      <DropdownItem tag={Link} key="audits" to="/admin/audits"><FaBell /> Audits</DropdownItem>,
    <%_ } _%>
      <DropdownItem tag={Link} key="logs" to="/admin/logs"><FaTasks /> Logs</DropdownItem>,
      /* jhipster-needle-add-element-to-admin-menu - JHipster will add entities to the admin menu here */
      <DropdownItem tag={Link} key="docs" to="/admin/docs"><FaBook /> API Docs</DropdownItem><% if (devDatabaseType === 'h2Disk' || devDatabaseType === 'h2Memory') { %>,
      <DropdownItem tag="a" key="h2-console" href="./h2-console" target="_tab"><FaHddO /> Database</DropdownItem>
    <%_ } _%>
    ];
    const accountMenuItems = [];
    if (isAuthenticated) {
      accountMenuItems.push(
        <%_ if (authenticationType !== 'oauth2') { _%>
        <DropdownItem tag={Link} key="settings" to="/account/settings"><FaWrench /> Settings</DropdownItem>,
        <DropdownItem tag={Link} key="password" to="/account/password"><FaClockO /> Password</DropdownItem>,
        <%_ } _%>
        <%_ if (authenticationType === 'session') { _%>
        <DropdownItem tag={Link} key="sessions" to="/account/sessions"><FaCloud /> Sessions</DropdownItem>,
        <%_ } _%>
        <DropdownItem tag={Link} key="logout" to="/logout"><FaSignOut /> Logout</DropdownItem>
      );
    } else {
      <%_ if (authenticationType !== 'oauth2') { _%>
      accountMenuItems.push(
        <DropdownItem tag={Link} key="login" to="/login"><FaSignIn /> Login</DropdownItem>,
        <DropdownItem tag={Link} key="register" to="/register"><FaSignIn /> Register</DropdownItem>
      );
      <%_ } else { _%>
      accountMenuItems.push(
        <DropdownItem tag="a" key="login" href={getLoginUrl()}><FaSignIn /> Login</DropdownItem>
      );
      <%_ } _%>
    }

    return (
      <div id="app-header">
        {this.renderDevRibbon()}
        <LoadingBar className="loading-bar"/>
        <Navbar dark expand="sm" fixed="top" className="jh-navbar">
          <NavbarToggler aria-label="Menu" onClick={this.toggleMenu} />
          <NavbarBrand tag={Link} to="/" className="brand-logo">
            <BrandIcon />
            <span className="brand-title"><Translate contentKey="global.title"><%= capitalizedBaseName %></Translate></span>
            <span className="navbar-version">{appConfig.VERSION}</span>
          </NavbarBrand>
          <Collapse isOpen={this.state.menuOpen} navbar>
            <Nav className="ml-auto" navbar>
              <NavItem>
                <NavLink tag={Link} to="/" className="d-flex align-items-center">
                  <FaHome />
                  <span>Home</span>
                </NavLink>
              </NavItem>
              {isAuthenticated ? [
                <UncontrolledDropdown nav inNavbar key="entities">
                  <DropdownToggle nav caret className="d-flex align-items-center">
                    <FaThList />
                    <span>Entities</span>
                  </DropdownToggle>
                  <DropdownMenu right>
                    {entityMenuItems}
                  </DropdownMenu>
                </UncontrolledDropdown>,
                <UncontrolledDropdown nav inNavbar key="admin">
                  <DropdownToggle nav caret className="d-flex align-items-center">
                    <FaUserPlus />
                    <span>Administration</span>
                  </DropdownToggle>
                  <DropdownMenu right style={{ width: '130%' }}>
                    {adminMenuItems}
                  </DropdownMenu>
                </UncontrolledDropdown>
              ] : null}
            <%_ if (enableTranslation) { _%>
              { locales.length > 1 ?
                <UncontrolledDropdown nav inNavbar>
                  <DropdownToggle nav caret className="d-flex align-items-center">
                    <FaFlag />
                    <span>{currentLocale.toUpperCase()}</span>
                  </DropdownToggle>
                  <DropdownMenu right>
                    {locales.map(lang => <DropdownItem key={lang} value={lang} onClick={this.handleLocaleChange}>{lang.toUpperCase()}</DropdownItem>)}
                  </DropdownMenu>
                </UncontrolledDropdown> : null
              }
            <%_ } _%>
              <UncontrolledDropdown nav inNavbar>
                <DropdownToggle nav caret className="d-flex align-items-center">
                  <FaUser />
                  <span>Account</span>
                </DropdownToggle>
                <DropdownMenu right>
                  {accountMenuItems}
                </DropdownMenu>
              </UncontrolledDropdown>
            </Nav>
          </Collapse>
        </Navbar>
      </div>
    );
  }
}

export default Header;

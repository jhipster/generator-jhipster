<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import axios from 'axios';
import { createAsyncThunk, createSlice, isPending, isRejected } from '@reduxjs/toolkit';

import { serializeAxiosError } from 'app/shared/reducers/reducer.utils';
import { AppThunk } from 'app/config/store';

const initialState = {
  loading: false,
  errorMessage: null,
<%_ if (applicationTypeGateway && serviceDiscoveryType) { _%>
  gateway: {
    routes: []
  },
<%_ } _%>
<%_ if (withAdminUi) { _%>
  logs: {
    loggers: [] as any[]
  },
  health: {} as any,
  metrics: {} as any,
  threadDump: [],
  configuration: {
    configProps: {} as any,
    env: {} as any
  },
<%_ } _%>
<%_ if (communicationSpringWebsocket) { _%>
  tracker: {
    activities: []
  },
<%_ } _%>
  totalItems: 0
};

export type AdministrationState =  Readonly<typeof initialState>;

// Actions
<%_ if (applicationTypeGateway && serviceDiscoveryType) { _%>
export const getGatewayRoutes = createAsyncThunk('administration/fetch_gateway_route', async () => axios.get<any>('api/gateway/routes'), {
  serializeError: serializeAxiosError,
});
<%_ } _%>

<%_ if (withAdminUi) { _%>
export const getSystemHealth = createAsyncThunk('administration/fetch_health', async () => axios.get<any>('management/health'), {
  serializeError: serializeAxiosError,
});

export const getSystemMetrics = createAsyncThunk('administration/fetch_metrics', async () => axios.get<any>('management/jhimetrics'), {
  serializeError: serializeAxiosError,
});

export const getSystemThreadDump = createAsyncThunk('administration/fetch_thread_dump', async () => axios.get<any>('management/threaddump'), {
  serializeError: serializeAxiosError,
});

export const getLoggers = createAsyncThunk('administration/fetch_logs', async () => axios.get<any>('management/loggers'), {
  serializeError: serializeAxiosError,
});

export const setLoggers = createAsyncThunk(
  'administration/fetch_logs_change_level',
  async ({ name, configuredLevel }: any) => axios.post(`management/loggers/${name}`, { configuredLevel }),
  {
    serializeError: serializeAxiosError,
  }
);

export const changeLogLevel: (name, configuredLevel) => AppThunk = (name, configuredLevel) => async dispatch => {
  await dispatch(setLoggers({ name, configuredLevel }));
  dispatch(getLoggers());
};

export const getConfigurations = createAsyncThunk('administration/fetch_configurations', async () => axios.get<any>('management/configprops'), {
  serializeError: serializeAxiosError,
});

export const getEnv = createAsyncThunk('administration/fetch_env', async () => axios.get<any>('management/env'), {
  serializeError: serializeAxiosError,
});
<%_ } _%>

export const AdministrationSlice = createSlice({
  name: 'administration',
  initialState: initialState as AdministrationState,
  reducers: {
    <%_ if (communicationSpringWebsocket) { _%>
    websocketActivityMessage(state, action) {
      // filter out activities from the same session
      const uniqueActivities = state.tracker.activities.filter(activity => activity.sessionId !== action.payload.sessionId);
      // remove any activities with the page of logout
      const activities = [...uniqueActivities, action.payload].filter(activity => activity.page !== 'logout');
      state.tracker = { activities };
    },
    <%_ } _%>
  },
  extraReducers(builder) {
      <%_ if (applicationTypeGateway && serviceDiscoveryType) { _%>
    builder.addCase(getGatewayRoutes.fulfilled, (state, action) => {
        state.loading = false;
        state.gateway = {
          routes: action.payload.data
        };
      });
      <%_ } _%>
      <%_ if (withAdminUi) { _%>
    builder.addCase(getSystemHealth.fulfilled, (state, action) => {
        state.loading = false;
        state.health = action.payload.data;
      })
      .addCase(getSystemMetrics.fulfilled, (state, action) => {
        state.loading = false;
        state.metrics = action.payload.data;
      })
      .addCase(getSystemThreadDump.fulfilled, (state, action) => {
        state.loading = false;
        state.threadDump = action.payload.data;
      })
      .addCase(getLoggers.fulfilled, (state, action) => {
        state.loading = false;
        state.logs = {
          loggers: action.payload.data.loggers,
        };
      })
      .addCase(getConfigurations.fulfilled, (state, action) => {
        state.loading = false;
        state.configuration = {
          ...state.configuration,
          configProps: action.payload.data,
        };
      })
      .addCase(getEnv.fulfilled, (state, action) => {
        state.loading = false;
        state.configuration = {
          ...state.configuration,
          env: action.payload.data,
        };
      })
      <%_ } _%>
      <%_ if (withAdminUi || (applicationTypeGateway && serviceDiscoveryType)) { _%>
      .addMatcher(
        isPending(
          <%_ if (applicationTypeGateway && serviceDiscoveryType) { _%>
          getGatewayRoutes,
          <%_ } _%>
          <%_ if (withAdminUi) { _%>
          getSystemHealth,
          getSystemMetrics,
          getSystemThreadDump,
          getLoggers,
          getConfigurations,
          getEnv
          <%_ } _%>
        ),
        state => {
          state.errorMessage = null;
          state.loading = true;
        }
      )
      <%_ } _%>
      <%_ if (withAdminUi || (applicationTypeGateway && serviceDiscoveryType)) { _%>
      .addMatcher(
        isRejected(
          <%_ if (applicationTypeGateway && serviceDiscoveryType) { _%>
          getGatewayRoutes,
          <%_ } _%>
          <%_ if (withAdminUi) { _%>
          getSystemHealth,
          getSystemMetrics,
          getSystemThreadDump,
          getLoggers,
          getConfigurations,
          getEnv
          <%_ } _%>
        ),
        (state, action) => {
          state.errorMessage = action.error.message;
          state.loading = false;
        }
      );
      <%_ } _%>
  },
});

<%_ if (communicationSpringWebsocket) { _%>
export const { websocketActivityMessage } = AdministrationSlice.actions;
<%_ } _%>

// Reducer
export default AdministrationSlice.reducer;

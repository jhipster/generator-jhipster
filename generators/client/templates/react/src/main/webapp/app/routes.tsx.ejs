<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import React<% if (applicationTypeGateway && microfrontend) { %>, { Suspense }<% } %> from 'react';
import { Switch <% if (communicationSpringWebsocket) { %>, useLocation <% } %><% if (applicationTypeGateway && microfrontend) { %>, Route <% } %>} from 'react-router-dom';
import Loadable from 'react-loadable';

<%_ if (!authenticationTypeOauth2) { _%>
import Login from 'app/modules/login/login';
<%_ } _%>
<%_ if (authenticationTypeOauth2) { _%>
import LoginRedirect from 'app/modules/login/login-redirect';
<%_ } _%>
<%_ if (!skipUserManagement) { _%>
import Register from 'app/modules/account/register/register';
import Activate from 'app/modules/account/activate/activate';
import PasswordResetInit from 'app/modules/account/password-reset/init/password-reset-init';
import PasswordResetFinish from 'app/modules/account/password-reset/finish/password-reset-finish';
<%_ } _%>
import Logout from 'app/modules/login/logout';
import Home from 'app/modules/home/home';
import EntitiesRoutes from 'app/entities/routes';
import PrivateRoute from 'app/shared/auth/private-route';
import ErrorBoundaryRoute from 'app/shared/error/error-boundary-route';
import PageNotFound from 'app/shared/error/page-not-found';
import { AUTHORITIES } from 'app/config/constants';
<%_ if (communicationSpringWebsocket) { _%>
import { sendActivity } from 'app/config/websocket-middleware';
<%_ } _%>

const loading = <div>loading ...</div>;
<%_ if (!skipUserManagement) { _%>

  const Account = Loadable({
  loader: () => import(/* webpackChunkName: "account" */ 'app/modules/account'),
  loading: () => loading,
});
<%_ } _%>

const Admin = Loadable({
  loader: () => import(/* webpackChunkName: "administration" */ 'app/modules/administration'),
  loading: () => loading,
});
<%_ if (applicationTypeGateway && microfrontend) { _%>

  <%_ for (const remote of microfrontends) { _%>
const <%= remote.capitalizedBaseName %>Routes = React.lazy(() => import('@<%= remote.lowercaseBaseName %>/entities-routes').catch(() => import('app/shared/error/error-loading')));
  <%_ } _%>
<%_ } _%>

const Routes = () => {
<%_ if (communicationSpringWebsocket) { _%>
  const location = useLocation();
  React.useEffect(() => {
    sendActivity(location.pathname);
  }, [location]);
<%_ } _%>
  return (
    <div className="view-routes">
      <Switch>
<%_ if (!authenticationTypeOauth2) { _%>
        <ErrorBoundaryRoute path="/login" component={Login} />
<%_ } _%>
        <ErrorBoundaryRoute path="/logout" component={Logout} />
<%_ if (!skipUserManagement) { _%>
        <ErrorBoundaryRoute path="/account/register" component={Register} />
        <ErrorBoundaryRoute path="/account/activate/:key?" component={Activate} />
        <ErrorBoundaryRoute path="/account/reset/request" component={PasswordResetInit} />
        <ErrorBoundaryRoute path="/account/reset/finish/:key?" component={PasswordResetFinish} />
<%_ } _%>
        <PrivateRoute path="/admin" component={Admin} hasAnyAuthorities={[AUTHORITIES.ADMIN]}/>
<%_ if (!skipUserManagement) { _%>
        <PrivateRoute path="/account" component={Account} hasAnyAuthorities={[AUTHORITIES.ADMIN, AUTHORITIES.USER]}/>
<%_ } _%>
        <ErrorBoundaryRoute path="/" exact component={Home}/>
<%_ if (authenticationTypeOauth2) { _%>
        <ErrorBoundaryRoute path="/oauth2/authorization/oidc" component={LoginRedirect} />
<%_ } _%>
<%_ if (applicationTypeGateway && microfrontend) { _%>
  <%_ for (const remote of microfrontends) { _%>
        <Route path="/<%= remote.lowercaseBaseName %>/">
          <Suspense fallback={loading}>
            <PrivateRoute component={<%= remote.capitalizedBaseName %>Routes} hasAnyAuthorities={[AUTHORITIES.USER]} />
          </Suspense>
        </Route>
  <%_ } _%>
<%_ } _%>
        <PrivateRoute path="/<%= microfrontend && applicationTypeMicroservice ? lowercaseBaseName + '/' : '' %>" component={EntitiesRoutes} hasAnyAuthorities={[AUTHORITIES.USER]}/>
        <ErrorBoundaryRoute component={PageNotFound} />
      </Switch>
    </div>
  );
};

export default Routes;

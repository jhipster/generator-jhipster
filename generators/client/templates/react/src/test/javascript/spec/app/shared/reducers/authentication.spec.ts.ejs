<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see http://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { expect } from 'chai';
import { REQUEST, SUCCESS, FAILURE } from 'app/shared/reducers/action-type.util';

import authentication, { ACTION_TYPES } from 'app/shared/reducers/authentication';

describe('Authentication reducer tests', () => {
  function isAccountEmpty(state): boolean {
    return Object.keys(state.account).length === 0;
  }

  describe('Common tests', () => {
    it('should return the initial state', () => {
      const toTest = authentication(undefined, {});
      expect(toTest).to.contain({
        loading: false,
        isAuthenticated: false,
        errorMessage: null, // Errors returned from server side
        <%_ if (authenticationType !== 'oauth2') { _%>
        loginSuccess: false,
        loginError: false, // Errors returned from server side
        showModalLogin: false,
        <%_ } _%>
        redirectMessage: null
      });
      expect(isAccountEmpty(toTest));
    });
  });

  describe('Requests', () =>{
    it('should detect a request', () => {
      <%_ if (authenticationType !== 'oauth2') { _%>
      expect(authentication(undefined, { type: REQUEST(ACTION_TYPES.LOGIN) })).to.contain({
        loading: true
      });
      <%_ } _%>
      expect(authentication(undefined, { type: REQUEST(ACTION_TYPES.GET_SESSION) })).to.contain({
        loading: true
      });
    });
  });

  describe('Success', () => {
    <%_ if (authenticationType !== 'oauth2') { _%>
    it('should detect a success on login', () => {
      const toTest = authentication(undefined, { type: SUCCESS(ACTION_TYPES.LOGIN) });
      expect(toTest).to.contain({
        loading: false,
        loginError: false,
        showModalLogin: false,
        loginSuccess: true
      });
    });

    <%_ } _%>
    it('should detect a success on get session and be authenticated', () => {
      const payload = { data: { activated: true } };
      const toTest = authentication(undefined, { type: SUCCESS(ACTION_TYPES.GET_SESSION), payload });
      expect(toTest).to.contain({
        isAuthenticated: true,
        loading: false,
        account: payload.data
      });
    });

    it('should detect a success on get session and not be authenticated', () => {
      const payload = { data: { activated: false } };
      const toTest = authentication(undefined, { type: SUCCESS(ACTION_TYPES.GET_SESSION), payload });
      expect(toTest).to.contain({
        isAuthenticated: false,
        loading: false,
        account: payload.data
      });
    });
  });

  describe('Failure', () => {
    <%_ if (authenticationType !== 'oauth2') { _%>
    it('should detect a failure on login', () => {
      const payload = 'Something happened.';
      const toTest = authentication(undefined, { type: FAILURE(ACTION_TYPES.LOGIN), payload });

      expect(toTest).to.contain({
        errorMessage: payload,
        showModalLogin: true,
        loginError: true
      });
      expect(isAccountEmpty(toTest));
    });

    <%_ } _%>
    it('should detect a failure', () => {
      const payload = 'Something happened.';
      const toTest = authentication(undefined, { type: FAILURE(ACTION_TYPES.GET_SESSION), payload });

      expect(toTest).to.contain({
        loading: false,
        isAuthenticated: false,
        showModalLogin: true,
        errorMessage: payload
      });
      expect(isAccountEmpty(toTest));
    });
  });

  describe('Other cases', () => {
    it('should properly reset the current state when a logout is requested', () => {
      const toTest = authentication(undefined, { type: ACTION_TYPES.LOGOUT });
      expect(toTest).to.contain({
        loading: false,
        isAuthenticated: false,
        loginSuccess: false,
        errorMessage: null,
        loginError: false,
        redirectMessage: null,
        showModalLogin: true
      });
      expect(isAccountEmpty(toTest));
    });

    it('should properly define an error message and change the current state to display the login modal', () => {
      const message = 'redirect me please';
      const toTest = authentication(undefined, { type: ACTION_TYPES.ERROR_MESSAGE, message });
      expect(toTest).to.contain({
        loading: false,
        isAuthenticated: false,
        loginSuccess: false,
        errorMessage: null,
        loginError: false,
        redirectMessage: message,
        showModalLogin: true
      });
      expect(isAccountEmpty(toTest));
    });

    it('should clear authentication', () => {
      const message = 'redirect me please';
      const toTest = authentication(undefined, { type: ACTION_TYPES.CLEAR_AUTH, message });
      expect(toTest).to.contain({
        loading: false,
        showModalLogin: true,
        isAuthenticated: false
      });
    });

  });
});

import { expect } from 'chai';

import { FAILURE, REQUEST, SUCCESS } from '../../../../../main/webapp/app/reducers/action-type.util';
import reducer, { ACTION_TYPES } from '../../../../../main/webapp/app/reducers/register';

describe('Creating account tests', () => {
  const initialState = {
    loading: false,
    registrationSuccess: false,
    registrationFailure: false,
    errorMessage: null
  };

  it('should return the initial state', () => {
    expect(reducer(undefined, {})).to.eql({
      ...initialState
    });
  });

  it('should detect a request', () => {
    expect(reducer(
      undefined,
      { type: REQUEST(ACTION_TYPES.CREATE_ACCOUNT) })
    ).to.eql({
      ...initialState,
      loading: true
    });
  });

  it('should handle RESET', () => {
    expect(reducer(
      { loading: true, registrationSuccess: true, registrationFailure: true, errorMessage: '' },
      { type: ACTION_TYPES.RESET })
    ).to.eql({
      ...initialState
    });
  });

  it('should handle CREATE_ACCOUNT success', () => {
    expect(reducer(
      undefined,
      {
        type: SUCCESS(ACTION_TYPES.CREATE_ACCOUNT),
        payload: 'fake payload'
      })
    ).to.eql({
      ...initialState,
      registrationSuccess: true
    });
  });

  it('should handle CREATE_ACCOUNT failure', () => {
    const payload = { response : { data : { errorKey : 'fake error' } } };
    expect(reducer(
      undefined,
      {
        type: FAILURE(ACTION_TYPES.CREATE_ACCOUNT),
        payload
      })
    ).to.eql({
      ...initialState,
      registrationFailure: true,
      errorMessage: payload.response.data.errorKey
    });
  });
});

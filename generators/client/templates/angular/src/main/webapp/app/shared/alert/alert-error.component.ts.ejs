<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { Component, OnDestroy } from '@angular/core';
import { HttpErrorResponse } from '@angular/common/http';
<%_ if (enableTranslation) { _%>
import { TranslateService } from '@ngx-translate/core';
<%_ } _%>
import { JhiEventManager, JhiAlert, JhiAlertService, JhiEventWithContent } from 'ng-jhipster';
import { Subscription } from 'rxjs';

import { AlertError } from './alert-error.model';

@Component({
    selector: '<%= jhiPrefixDashed %>-alert-error',
    template: `
        <div class="alerts" role="alert">
            <div *ngFor="let alert of alerts" [ngClass]="setClasses(alert)">
                <ngb-alert *ngIf="alert && alert.type && alert.msg" [type]="alert.type" (close)="close(alert)">
                    <pre [innerHTML]="alert.msg"></pre>
                </ngb-alert>
            </div>
        </div>`
})
export class AlertErrorComponent implements OnDestroy {
    alerts: JhiAlert[] = [];
    errorListener: Subscription;
    httpErrorListener: Subscription;

    constructor(private alertService: JhiAlertService, private eventManager: JhiEventManager<% if (enableTranslation) { %>, translateService: TranslateService<% } %>) {
        this.errorListener = eventManager.subscribe('<%= angularAppName %>.error', (response: JhiEventWithContent<AlertError>) => {
            const errorResponse = response.content;
            this.addErrorAlert(errorResponse.message<% if (enableTranslation) { %>, errorResponse.key, errorResponse.params<% } %>);
        });

        this.httpErrorListener = eventManager.subscribe('<%= angularAppName %>.httpError', (response: JhiEventWithContent<HttpErrorResponse>) => {
            const httpErrorResponse = response.content;
            switch (httpErrorResponse.status) {
                // connection refused, server not reachable
                case 0:
                    this.addErrorAlert('Server not reachable'<% if (enableTranslation) { %>, 'error.server.not.reachable'<% } %>);
                    break;

                case 400: {
                    const arr = httpErrorResponse.headers.keys();
                    let errorHeader = null;
                    <%_ if (enableTranslation) { _%>
                    let entityKey = null;
                    <%_ } _%>
                    arr.forEach((entry) => {
                        if (entry.toLowerCase().endsWith('app-error')) {
                            errorHeader = httpErrorResponse.headers.get(entry);
                        <%_ if (enableTranslation) { _%>
                        } else if (entry.toLowerCase().endsWith('app-params')) {
                            entityKey = httpErrorResponse.headers.get(entry);
                        <%_ } _%>
                        }
                    });
                    if (errorHeader) {
                        <%_ if (enableTranslation) { _%>
                        const entityName = translateService.instant('global.menu.entities.' + entityKey);
                        <%_ } _%>
                        this.addErrorAlert(errorHeader<% if (enableTranslation) { %>, errorHeader, { entityName }<% } %>);
                    } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.fieldErrors) {
                        const fieldErrors = httpErrorResponse.error.fieldErrors;
                        for (const fieldError of fieldErrors) {
                            if (['Min', 'Max', 'DecimalMin', 'DecimalMax'].includes(fieldError.message)) {
                                fieldError.message = 'Size';
                            }
                            // convert 'something[14].other[4].id' to 'something[].other[].id' so translations can be written to it
                            const convertedField = fieldError.field.replace(/\[\d*\]/g, '[]');
                            const fieldName = <% if (enableTranslation) { %>translateService.instant('<%= angularAppName %>.' +
                                fieldError.objectName + '.' + convertedField)<% } else { %>convertedField.charAt(0).toUpperCase() +
                                convertedField.slice(1)<% } %>;
                            this.addErrorAlert(
                                'Error on field "' + fieldName + '"'<% if (enableTranslation) { %>, 'error.' + fieldError.message, { fieldName }<% } %>);
                        }
                    } else if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {
                        this.addErrorAlert(httpErrorResponse.error.message<% if (enableTranslation) { %>, httpErrorResponse.error.message, httpErrorResponse.error.params<% } %>);
                    } else {
                        this.addErrorAlert(httpErrorResponse.error);
                    }
                    break;
                }

                case 404:
                    this.addErrorAlert('Not found'<% if (enableTranslation) { %>, 'error.url.not.found'<% } %>);
                    break;

                default:
                    if (httpErrorResponse.error !== '' && httpErrorResponse.error.message) {
                        this.addErrorAlert(httpErrorResponse.error.message);
                    } else {
                        this.addErrorAlert(httpErrorResponse.error);
                    }
            }
        });
    }

    setClasses(alert: JhiAlert): { [key: string]: boolean } {
        const classes = { 'jhi-toast': Boolean(alert.toast) };
        if (alert.position) {
            return { ...classes, [alert.position]: true };
        }
        return classes;
    }

    ngOnDestroy(): void {
        if (this.errorListener) {
            this.eventManager.destroy(this.errorListener);
        }
        if (this.httpErrorListener) {
            this.eventManager.destroy(this.httpErrorListener);
        }
    }

    addErrorAlert(message: string<% if (enableTranslation) { %>, key?: string, data?: any<% } %>): void {
        <%_ if (enableTranslation) { _%>
        message = (key && key !== null) ? key : message;
        <%_ } _%>

        const newAlert: JhiAlert = {
            type: 'danger',
            msg: message,
            <%_ if (enableTranslation) { _%>
            params: data,
            <%_ } _%>
            timeout: 5000,
            toast: this.alertService.isToast(),
            scoped: true
        };

        this.alerts.push(this.alertService.addAlert(newAlert, this.alerts));
    }

    close(alert: JhiAlert): void {
        // NOSONAR can be removed after https://github.com/SonarSource/SonarJS/issues/1930 is resolved
        alert.close?.(this.alerts); // NOSONAR
    }
}

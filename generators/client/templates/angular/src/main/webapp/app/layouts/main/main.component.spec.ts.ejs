<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
jest.mock('app/core/auth/account.service');

import { waitForAsync, ComponentFixture, TestBed } from '@angular/core/testing';
import { Router, RouterEvent, NavigationEnd, NavigationStart } from '@angular/router';
import { Title } from '@angular/platform-browser';
import { Subject, of } from 'rxjs';
<%_ if (enableTranslation) { _%>
import { TranslateModule, TranslateService, LangChangeEvent } from '@ngx-translate/core';
<%_ } _%>

import { AccountService } from 'app/core/auth/account.service';
<%_ if (enableI18nRTL) { _%>
import { FindLanguageFromKeyPipe } from 'app/shared/language/find-language-from-key.pipe';
<%_ } _%>

import { MainComponent } from './main.component';

describe('MainComponent', () => {
  let comp: MainComponent;
  let fixture: ComponentFixture<MainComponent>;
  let titleService: Title;
<%_ if (enableTranslation) { _%>
  let translateService: TranslateService;
  <%_ if (enableI18nRTL) { _%>
  let findLanguageFromKeyPipe: FindLanguageFromKeyPipe;
  <%_ } _%>
<%_ } _%>
  let mockAccountService: AccountService;
  const routerEventsSubject = new Subject<RouterEvent>();
  const routerState: any = { snapshot: { root: { data: {} } } };
  class MockRouter {
    events = routerEventsSubject;
    routerState = routerState;
  }

  beforeEach(
    waitForAsync(() => {
      TestBed.configureTestingModule({
<%_ if (enableTranslation) { _%>
        imports: [TranslateModule.forRoot()],
<%_ } _%>
        declarations: [MainComponent],
        providers: [
          Title,
<%_ if (enableI18nRTL) { _%>
          FindLanguageFromKeyPipe,
<%_ } _%>
          AccountService,
          {
            provide: Router,
            useClass: MockRouter,
          },
        ],
      })
        .overrideTemplate(MainComponent, '')
        .compileComponents();
    })
  );

  beforeEach(() => {
    fixture = TestBed.createComponent(MainComponent);
    comp = fixture.componentInstance;
    titleService = TestBed.inject(Title);
<%_ if (enableTranslation) { _%>
    translateService = TestBed.inject(TranslateService);
  <%_ if (enableI18nRTL) { _%>
    findLanguageFromKeyPipe = TestBed.inject(FindLanguageFromKeyPipe);
  <%_ } _%>
<%_ } _%>
    mockAccountService = TestBed.inject(AccountService);
    mockAccountService.identity = jest.fn(() => of(null));
    mockAccountService.getAuthenticationState = jest.fn(() => of(null));
  });

  describe('page title', () => {
    const defaultPageTitle = '<% if (enableTranslation) { %>global.title<% } else { %><%= humanizedBaseName %><% } %>';
    const parentRoutePageTitle = 'parentTitle';
    const childRoutePageTitle = 'childTitle';
    const navigationEnd = new NavigationEnd(1, '', '');
    const navigationStart = new NavigationStart(1, '');
<%_ if (enableTranslation) { _%>
    const langChangeEvent: LangChangeEvent = { lang: '<%= nativeLanguage %>', translations: null };
<%_ } _%>

    beforeEach(() => {
      routerState.snapshot.root = { data: {} };
<%_ if (enableTranslation) { _%>
      jest.spyOn(translateService, 'get').mockImplementation((key: string | string[]) => of(`${key as string} translated`));
      translateService.currentLang = '<%= nativeLanguage %>';
<%_ } _%>
      jest.spyOn(titleService, 'setTitle');
      comp.ngOnInit();
    });

    describe('navigation end', () => {
      it('should set page title to default title if pageTitle is missing on routes', () => {
        // WHEN
        routerEventsSubject.next(navigationEnd);

        // THEN
<%_ if (enableTranslation) { _%>
        expect(translateService.get).toHaveBeenCalledWith(defaultPageTitle);
<%_ } _%>
        expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle<% if (enableTranslation) { %> + ' translated'<% } %>);
      });

      it('should set page title to root route pageTitle if there is no child routes', () => {
        // GIVEN
        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };

        // WHEN
        routerEventsSubject.next(navigationEnd);

        // THEN
<%_ if (enableTranslation) { _%>
        expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
<%_ } _%>
        expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle<% if (enableTranslation) { %> + ' translated'<% } %>);
      });

      it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {
        // GIVEN
        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
        routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };

        // WHEN
        routerEventsSubject.next(navigationEnd);

        // THEN
<%_ if (enableTranslation) { _%>
        expect(translateService.get).toHaveBeenCalledWith(childRoutePageTitle);
<%_ } _%>
        expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle<% if (enableTranslation) { %> + ' translated'<% } %>);
      });

      it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {
        // GIVEN
        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
        routerState.snapshot.root.firstChild = { data: {} };

        // WHEN
        routerEventsSubject.next(navigationEnd);

        // THEN
<%_ if (enableTranslation) { _%>
        expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
<%_ } _%>
        expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle<% if (enableTranslation) { %> + ' translated'<% } %>);
      });
    });

    describe('navigation start', () => {
      it('should not set page title on navigation start', () => {
        // WHEN
        routerEventsSubject.next(navigationStart);

        // THEN
        expect(titleService.setTitle).not.toHaveBeenCalled();
      });
    });

<%_ if (enableTranslation) { _%>
    describe('language change', () => {
      it('should set page title to default title if pageTitle is missing on routes', () => {
        // WHEN
        translateService.onLangChange.emit(langChangeEvent);

        // THEN
        expect(translateService.get).toHaveBeenCalledWith(defaultPageTitle);
        expect(titleService.setTitle).toHaveBeenCalledWith(defaultPageTitle + ' translated');
      });

      it('should set page title to root route pageTitle if there is no child routes', () => {
        // GIVEN
        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };

        // WHEN
        translateService.onLangChange.emit(langChangeEvent);

        // THEN
        expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
        expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
      });

      it('should set page title to child route pageTitle if child routes exist and pageTitle is set for child route', () => {
        // GIVEN
        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
        routerState.snapshot.root.firstChild = { data: { pageTitle: childRoutePageTitle } };

        // WHEN
        translateService.onLangChange.emit(langChangeEvent);

        // THEN
        expect(translateService.get).toHaveBeenCalledWith(childRoutePageTitle);
        expect(titleService.setTitle).toHaveBeenCalledWith(childRoutePageTitle + ' translated');
      });

      it('should set page title to parent route pageTitle if child routes exists but pageTitle is not set for child route data', () => {
        // GIVEN
        routerState.snapshot.root.data = { pageTitle: parentRoutePageTitle };
        routerState.snapshot.root.firstChild = { data: {} };

        // WHEN
        translateService.onLangChange.emit(langChangeEvent);

        // THEN
        expect(translateService.get).toHaveBeenCalledWith(parentRoutePageTitle);
        expect(titleService.setTitle).toHaveBeenCalledWith(parentRoutePageTitle + ' translated');
      });
    });
<%_ } _%>
  });
<%_ if (enableTranslation) { _%>

  describe('page language attribute', () => {
    it('should change page language attribute on language change', () => {
      // GIVEN
      comp.ngOnInit();

      // WHEN
  <%_ if (enableI18nRTL) { _%>
      findLanguageFromKeyPipe.isRTL = jest.fn(() => false);
  <%_ } _%>
      translateService.onLangChange.emit({ lang: 'lang1', translations: null });

      // THEN
      expect(document.querySelector('html')?.getAttribute('lang')).toEqual('lang1');
  <%_ if (enableI18nRTL) { _%>
      expect(document.querySelector('html')?.getAttribute('dir')).toEqual('ltr');
  <%_ } _%>

      // WHEN
  <%_ if (enableI18nRTL) { _%>
      findLanguageFromKeyPipe.isRTL = jest.fn(() => true);
  <%_ } _%>
      translateService.onLangChange.emit({ lang: 'lang2', translations: null });

      // THEN
      expect(document.querySelector('html')?.getAttribute('lang')).toEqual('lang2');
  <%_ if (enableI18nRTL) { _%>
      expect(document.querySelector('html')?.getAttribute('dir')).toEqual('rtl');
  <%_ } _%>
    });
  });
<%_ } _%>
});

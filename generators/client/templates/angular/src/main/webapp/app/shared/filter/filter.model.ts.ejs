import { ParamMap } from '@angular/router';

export interface IFilterOptions {
  filterOptions: IFilterOption[];
  hasAnyFilterSet(): boolean;
  clear(): void;
  getFilterOptionByName(name: string, add: true): IFilterOption;
  getFilterOptionByName(name: string, add: false): IFilterOption | null;
  getFilterOptionByName(name: string): IFilterOption | null;
  initializeFromParams(params: ParamMap): boolean;
  equals(other: IFilterOptions): boolean;
  clone(): IFilterOptions;
}

export interface IFilterOption {
  name: string;
  values: string[];
  isSet(): boolean;
  nameAsQueryParam(): string;
  addValue(...values: string[]): boolean;
  removeValue(value: string): boolean;
  equals(other: IFilterOption): boolean;
}

export interface IFilterableComponent {
  clearFilter(filterName: string, value?: string): void;
  clearAllFilters(): void;
}

export class FilterOption implements IFilterOption {
  constructor(public name: string, public values: string[] = []) {
    this.values = [...new Set(values)];
  }

  nameAsQueryParam(): string {
    return 'filter[' + this.name + ']';
  }

  isSet(): boolean {
    return this.values.length > 0;
  }

  addValue(...values: string[]): boolean {
    const missingValues = values.filter(value => value && !this.values.includes(value));
    if (missingValues.length > 0) {
      this.values.push(...missingValues);
      return true;
    }
    return false;
  }

  removeValue(value: string): boolean {
    const indexOf = this.values.indexOf(value);
    if (indexOf === -1) {
      return false;
    }

    this.values.splice(indexOf, 1);
    return true;
  }

  equals(other: IFilterOption): boolean {
    return (
      this.name === other.name &&
      this.values.length === other.values.length &&
      this.values.every(thisValue => other.values.includes(thisValue)) &&
      other.values.every(otherValue => this.values.includes(otherValue))
    );
  }
}

export class FilterOptions implements IFilterOptions {
  filterOptions: IFilterOption[];

  constructor(filterOptions: IFilterOption[] = []) {
    this.filterOptions = filterOptions;
  }

  hasAnyFilterSet(): boolean {
    return this.filterOptions.length > 0 && this.filterOptions.some(e => e.isSet());
  }

  clear(): void {
    this.filterOptions = [];
  }

  getFilterOptionByName(name: string, add: true): IFilterOption;
  getFilterOptionByName(name: string, add: false): IFilterOption | null;
  getFilterOptionByName(name: string): IFilterOption | null;
  getFilterOptionByName(name: string, add = false): IFilterOption | null {
    const addOption = (option: IFilterOption): IFilterOption => {
      this.filterOptions.push(option);
      return option;
    };

    return this.filterOptions.find(thisOption => thisOption.name === name) ?? (add ? addOption(new FilterOption(name)) : null);
  }

  equals(other: IFilterOptions): boolean {
    const thisFilters = this.filterOptions.filter(option => option.isSet());
    const otherFilters = other.filterOptions.filter(option => option.isSet());
    if (thisFilters.length !== otherFilters.length) {
      return false;
    }
    return (
      thisFilters.every(option => other.getFilterOptionByName(option.name)?.equals(option)) &&
      otherFilters.every(option => this.getFilterOptionByName(option.name)?.equals(option))
    );
  }

  clone(): IFilterOptions {
    const newObject: FilterOptions = new FilterOptions();

    this.filterOptions.forEach(option => {
      newObject.filterOptions.push(new FilterOption(option.name, option.values.concat()));
    });

    return newObject;
  }

  initializeFromParams(params: ParamMap): boolean {
    const oldFilters: IFilterOptions = this.clone();

    this.clear();

    const filterRegex = /filter\[(.+)\]/;
    params.keys
      .filter(paramKey => filterRegex.test(paramKey))
      .forEach(matchingParam => {
        const matches = matchingParam.match(filterRegex);
        if (matches && matches.length > 1) {
          this.getFilterOptionByName(matches[1], true).addValue(...params.getAll(matchingParam));
        }
      });

    return !oldFilters.equals(this);
  }
}

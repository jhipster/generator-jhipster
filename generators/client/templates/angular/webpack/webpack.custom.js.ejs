const webpack = require('webpack');
const path = require('path');
<%_ if (enableTranslation) { _%>
const MergeJsonWebpackPlugin = require("merge-jsons-webpack-plugin");
<%_ } _%>
const SimpleProgressWebpackPlugin = require('simple-progress-webpack-plugin');
const FriendlyErrorsWebpackPlugin = require('friendly-errors-webpack-plugin');
const BrowserSyncPlugin = require('browser-sync-webpack-plugin');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;
const WebpackNotifierPlugin = require('webpack-notifier');
const CopyWebpackPlugin = require('copy-webpack-plugin');

const tls = process.env.TLS;

module.exports = (config, options) => {
  // RULES
  if (config.mode === 'development') {
    config.module.rules.push({
      test: /\.(j|t)s$/,
      enforce: 'pre',
      loader: 'eslint-loader',
      exclude: /node_modules/
    });
  }

  // PLUGINS
  if (config.mode === 'development') {
    config.plugins.push(
      new FriendlyErrorsWebpackPlugin(),
      new WebpackNotifierPlugin({
        title: 'JHipster',
        contentImage: path.join(__dirname, 'logo-jhipster.png')
      }),
      new BrowserSyncPlugin(
        {
          https: false,
          host: 'localhost',
          port: 9000,
          https: tls,
          proxy: {
            target: `http${tls ? 's' : ''}://localhost:4200`,
            proxyOptions: {
              changeOrigin: false //pass the Host header to the backend unchanged  https://github.com/Browsersync/browser-sync/issues/430
            }
          },
          socket: {
            clients: {
              heartbeatTimeout: 60000
            }
          }
          /*
          ,ghostMode: { // uncomment this part to disable BrowserSync ghostMode; https://github.com/jhipster/generator-jhipster/issues/11116
            clicks: false,
            location: false,
            forms: false,
            scroll: false
          } */
        },
        {
          reload: false
        }
      )
    );

    if (!process.env.JHI_DISABLE_WEBPACK_LOGS) {
      config.plugins.push(
        new SimpleProgressWebpackPlugin({
          format: 'compact'
        })
      );
    }
  }

  if (config.mode === 'production') {
    config.plugins.push(
      new BundleAnalyzerPlugin({
        analyzerMode: 'static',
        openAnalyzer: false,
        // Webpack statistics in target folder
        reportFilename: '../stats.html'
      }),
      new webpack.LoaderOptionsPlugin({
        minimize: true,
        debug: false
      })
    );
  }

  const patterns = [
    // jhipster-needle-add-assets-to-webpack - JHipster will add/remove third-party resources in this array
  ];

  if (patterns.length > 0) {
    config.plugins.push(new CopyWebpackPlugin({ patterns }));
  }

  config.plugins.push(
    new webpack.DefinePlugin({
      'process.env': {
        BUILD_TIMESTAMP: `'${new Date().getTime()}'`,
        // APP_VERSION is passed as an environment variable from the Gradle / Maven build tasks.
        VERSION: `'${process.env.hasOwnProperty('APP_VERSION') ? process.env.APP_VERSION : 'DEV'}'`,
        DEBUG_INFO_ENABLED: config.mode === 'development',
        // The root URL for API calls, ending with a '/' - for example: `"https://www.jhipster.tech:8081/myservice/"`.
        // If this URL is left empty (""), then it will be relative to the current context.
        // If you use an API server, in `prod` mode, you will need to enable CORS
        // (see the `jhipster.cors` common JHipster property in the `application-*.yml` configurations)
        SERVER_API_URL: `''`
      }
    }),
    <%_ if (enableTranslation) { _%>
    new MergeJsonWebpackPlugin({
      output: {
        groupBy: [
        // jhipster-needle-i18n-language-webpack - JHipster will add/remove languages in this array
        ]
      }
    })
    <%_ } _%>
  );

  return config;
};

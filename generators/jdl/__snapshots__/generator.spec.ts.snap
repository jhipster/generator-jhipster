// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator - jdl --json-only option for two applications and entity jdl with valid jdl should write expected files 1`] = `
{
  "jhipster/.jhipster/Foo.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "jhipster"
  ],
  "fields": [],
  "name": "Foo",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
  "jhipster/.yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "applicationIndex": 0,
    "baseName": "jhipster",
    "entities": [
      "Foo"
    ]
  }
}
",
    "stateCleared": "modified",
  },
  "jhipster2/.jhipster/Bar.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "jhipster2"
  ],
  "fields": [],
  "name": "Bar",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
  "jhipster2/.yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "applicationIndex": 1,
    "baseName": "jhipster2",
    "entities": [
      "Bar"
    ]
  }
}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - jdl for application jdl with valid jdl should write expected files 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "baseName": "jhipster",
    "entities": []
  }
}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - jdl for one application and entity jdl with --ignore-application option should write entity files 1`] = `
{
  ".jhipster/Foo.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "jhipster"
  ],
  "fields": [],
  "name": "Foo",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - jdl for one application and entity jdl with valid jdl should write expected files 1`] = `
{
  ".jhipster/Foo.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "jhipster"
  ],
  "fields": [],
  "name": "Foo",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "baseName": "jhipster",
    "entities": [
      "Foo"
    ]
  }
}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - jdl for two applications and entity jdl with --ignore-application option should write expected files 1`] = `
{
  "jhipster/.jhipster/Foo.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "jhipster"
  ],
  "fields": [],
  "name": "Foo",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
  "jhipster2/.jhipster/Bar.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "jhipster2"
  ],
  "fields": [],
  "name": "Bar",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - jdl help should print expected information 1`] = `
"Usage: jhipster jdl|import-jdl [options] [jdlFiles...]

Create entities from the JDL file/URL/content passed in argument.
    Use the '--interactive' flag to generate multiple applications in series.

Options:
  --auto-crlf                              Detect line endings
  --interactive                            Generate multiple applications in series so that questions can be interacted with. This is the default when there is an existing application configuration in any of the folders
  --json-only                              Generate only the JSON files and skip entity regeneration
  --ignore-application                     Ignores application generation
  --ignore-deployments                     Ignores deployments generation
  --skip-sample-repository                 Disable fetching sample files when the file is not a URL
  --inline <value>                         Pass JDL content inline. Argument can be skipped when passing this (env: JHI_JDL)
  --skip-user-management                   Skip the user management module during app generation
  --skip-cache                             Do not remember prompt answers (default: false)
  --skip-install                           Do not automatically install dependencies (default: false)
  --force-install                          Fail on install dependencies error (default: false)
  --ask-answered                           Show prompts for already configured options (default: false)
  --workspaces-folders <value...>          Folders to use as monorepository workspace
  --workspaces                             Generate workspaces for multiples applications
  --skip-git                               Skip git repository initialization
  --force-git                              Force commit to git repository
  --commit-msg <value>                     Commit changes (implies forceGit)
  --monorepository                         Use monorepository
  --defaults                               Execute jhipster with default config
  --skip-client                            Skip the client-side application generation
  --skip-server                            Skip the server-side application generation
  --jhi-prefix <value>                     Add prefix before services, controllers and states name
  --entity-suffix <value>                  Add suffix after entities name
  --dto-suffix <value>                     Add suffix after dtos name
  --blueprint <value...>                   DEPRECATED: Specify a generator blueprint to use for the sub generators
  --blueprints <value>                     A comma separated list of one or more generator blueprints to use for the sub generators, e.g. --blueprints kotlin,vuejs
  --ignore-errors                          Don't fail on prettier errors.
  --pk-type <value>                        Default primary key type (beta)
  --client-package-manager <value>         Force an unsupported client package manager
  --test-frameworks <value...>             Test frameworks to be generated
  --base-name <value>                      Application base name
  --skip-jhipster-dependencies             Don't write jhipster dependencies to package.json. (env: JHI_SKIP_JHIPSTER_DEPENDENCIES)
  --creation-timestamp <value>             Project creation timestamp (used for reproducible builds)
  --jdl-store <value>                      JDL store
  --prettier-tab-width <value>             Default tab width for prettier (default: 2)
  --skip-commit-hook                       Skip adding husky commit hooks
  --db <value>                             Provide DB name for the application when skipping server side generation
  --recreate-initial-changelog             Recreate the initial database changelog based on the current config
  --cache-provider <value>                 Cache provider
  --enable-swagger-codegen                 API first development using OpenAPI-generator
  --enable-hibernate-cache                 Enable hibernate cache
  --search-engine <value>                  Provide search engine for the application when skipping server side generation
  --skip-check-length-of-identifier        Skip check the length of the identifier, only for recent Oracle databases that support 30+ characters metadata
  --skip-db-changelog                      Skip the generation of database migrations
  --skip-fake-data                         Skip generation of fake data for development
  --websocket <value>                      Provide websocket option for the application when skipping server side generation
  --project-version <value>                project version to use, this option is not persisted (env: JHI_PROJECT_VERSION)
  --jhipster-dependencies-version <value>  jhipster-dependencies version to use, this option is not persisted (env: JHIPSTER_DEPENDENCIES_VERSION)
  --application-type <value>               Application type to generate (choices: "monolith", "gateway", "microservice")
  --reactive                               Generate a reactive backend
  --service-discovery-type <value>         Service discovery type (choices: "consul", "eureka", "no")
  --auth <value>                           Provide authentication type for the application when skipping server side generation (choices: "jwt", "oauth2", "session")
  --feign-client                           Generate a feign client (default: false)
  --sync-user-with-idp                     Allow relationships with User for oauth2 applications
  --message-broker <value>                 message broker (choices: "kafka", "pulsar", "no")
  --database-migration <value>             Database migration (choices: "liquibase", "no")
  --graalvm-support                        Experimental GraalVM Native support
  --with-generated-flag                    Add a GeneratedByJHipster annotation to all generated java classes and interfaces
  --package-name <value>                   The package name for the generated application
  --build <value>                          Provide build tool for the application when skipping server side generation (default: maven) (choices: "maven", "gradle")
  --enable-gradle-enterprise               Enable Gradle Enterprise integration (default: false)
  --gradle-enterprise-host <value>         Gradle Enterprise Host
  --incremental-changelog                  Creates incremental database changelogs
  --dev-database-type <value>              Development database
  --client-framework <value>               Provide client framework for the application (choices: "angular", "react", "vue", "no")
  --microfrontend                          Enable microfrontend support
  --microfrontends <value>                 Microfrontends to load
  --with-admin-ui                          Generate administrative user interface
  --client-root-dir <value>                Client root
  --cypress-coverage                       Enable Cypress code coverage report generation
  --cypress-audit                          Enable cypress-audit/lighthouse report generation
  --enable-translation                     Enable translation
  -l, --language <value...>                Language to be added to application (existing languages are not removed)
  -n, --native-language [value]            Set application native language
  --regenerate-languages                   Regenerate languages
  -h, --help                               display help for command
"
`;

exports[`generator - jdl with a gateway generating json should generate expected config 1`] = `
{
  ".jhipster/Bar.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "gatewayApp"
  ],
  "fields": [],
  "microserviceName": "ms",
  "name": "Bar",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "applicationType": "gateway",
    "applications": {
      "ms": {}
    },
    "baseName": "gatewayApp",
    "entities": [
      "Bar"
    ]
  }
}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - jdl with a microservices stack generating json should generate expected config 1`] = `
{
  "gatewayApp/.jhipster/Bar.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "gatewayApp"
  ],
  "fields": [],
  "name": "Bar",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
  "gatewayApp/.jhipster/Foo.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "jhipster",
    "gatewayApp"
  ],
  "fields": [],
  "name": "Foo",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
  "gatewayApp/.yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "applicationIndex": 0,
    "applicationType": "gateway",
    "baseName": "gatewayApp",
    "entities": [
      "Foo",
      "Bar"
    ]
  }
}
",
    "stateCleared": "modified",
  },
  "jhipster/.jhipster/Foo.json": {
    "contents": "{
  "annotations": {},
  "applications": [
    "jhipster",
    "gatewayApp"
  ],
  "fields": [],
  "name": "Foo",
  "relationships": []
}
",
    "stateCleared": "modified",
  },
  "jhipster/.yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "applicationIndex": 1,
    "baseName": "jhipster",
    "entities": [
      "Foo"
    ]
  }
}
",
    "stateCleared": "modified",
  },
}
`;

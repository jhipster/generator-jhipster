<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config;

import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
import org.springframework.beans.factory.support.DefaultSingletonBeanRegistry;
import org.springframework.core.annotation.AnnotatedElementUtils;
import org.springframework.context.ConfigurableApplicationContext;

import org.springframework.test.context.ContextConfigurationAttributes;
import org.springframework.test.context.ContextCustomizer;
import org.springframework.test.context.ContextCustomizerFactory;
import org.springframework.test.context.MergedContextConfiguration;
import org.springframework.beans.factory.support.DefaultListableBeanFactory;
import org.springframework.boot.test.util.TestPropertyValues;

public class TestContainersSpringContextCustomizerFactory implements ContextCustomizerFactory {

    private Logger log = LoggerFactory.getLogger(TestContainersSpringContextCustomizerFactory.class);

<%_ if (databaseTypeMongodb) { _%>
    private static MongoDbTestContainer mongoDbBean;
<%_ } _%>
<%_ if (searchEngineElasticsearch) { _%>
    private static ElasticsearchTestContainer elasticsearchBean;
<%_ } _%>
<%_ if (databaseTypeCouchbase || searchEngineCouchbase) { _%>
    private static CouchbaseTestContainer couchbaseBean;
<%_ } _%>

    @Override
    public ContextCustomizer createContextCustomizer(Class<?> testClass, List<ContextConfigurationAttributes> configAttributes) {

        return new ContextCustomizer() {
            @Override
            public void customizeContext(ConfigurableApplicationContext context,
                    MergedContextConfiguration mergedConfig) {
                ConfigurableListableBeanFactory beanFactory = context.getBeanFactory();
                TestPropertyValues testValues = TestPropertyValues.empty();
    <%_ if (databaseTypeCouchbase || searchEngineCouchbase) { _%>
                EmbeddedCouchbase couchbaseAnnotation = AnnotatedElementUtils.findMergedAnnotation(testClass, EmbeddedCouchbase.class);
                if (null != couchbaseAnnotation) {
                    log.debug("detected the EmbeddedCouchbase annotation on class {}", testClass.getName());
                    log.info("Warming up the Couchbase database");
                    if (null == couchbaseBean) {
                        couchbaseBean = beanFactory.createBean(CouchbaseTestContainer.class);
                        beanFactory.registerSingleton(CouchbaseTestContainer.class.getName(), couchbaseBean);
                        // ((DefaultListableBeanFactory)beanFactory).registerDisposableBean(CouchbaseTestContainer.class.getName(), couchbaseBean);
                    }
                    testValues = testValues.and("spring.couchbase.connection-string=" + couchbaseBean.getCouchbaseContainer().getConnectionString());
                    testValues = testValues.and("spring.couchbase.username=" + couchbaseBean.getCouchbaseContainer().getUsername());
                    testValues = testValues.and("spring.couchbase.password=" + couchbaseBean.getCouchbaseContainer().getPassword());
                    testValues = testValues.and("jhipster.database.couchbase.bucket-name=" + couchbaseBean.getBucketName());
                    testValues = testValues.and("jhipster.database.couchbase.scope-name=testScope");
                }
    <%_ } _%>
    <%_ if (databaseTypeMongodb) { _%>
                    EmbeddedMongo mongoAnnotation = AnnotatedElementUtils.findMergedAnnotation(testClass, EmbeddedMongo.class);
                    if (null != mongoAnnotation) {
                        log.debug("detected the EmbeddedMongo annotation on class {}", testClass.getName());
                        log.info("Warming up the mongo database");
                        if (null == mongoDbBean) {
                            mongoDbBean = beanFactory.createBean(MongoDbTestContainer.class);
                            beanFactory.registerSingleton(MongoDbTestContainer.class.getName(), mongoDbBean);
                            // ((DefaultListableBeanFactory)beanFactory).registerDisposableBean(MongoDbTestContainer.class.getName(), mongoDbBean);
                        }
                        testValues = testValues.and("spring.data.mongodb.uri=" + mongoDbBean.getMongoDBContainer().getReplicaSetUrl());
                    }
    <%_ } _%>
    <%_ if (searchEngineElasticsearch) { _%>
                EmbeddedElasticsearch elasticsearchAnnotation = AnnotatedElementUtils.findMergedAnnotation(testClass, EmbeddedElasticsearch.class);
                if (null != elasticsearchAnnotation) {
                    log.debug("detected the EmbeddedElasticsearch annotation on class {}", testClass.getName());
                    log.info("Warming up the elastic database");
                    if (null == elasticsearchBean) {
                        elasticsearchBean = beanFactory.createBean(ElasticsearchTestContainer.class);
                        beanFactory.registerSingleton(ElasticsearchTestContainer.class.getName(), elasticsearchBean);
                        // ((DefaultListableBeanFactory)beanFactory).registerDisposableBean(ElasticsearchTestContainer.class.getName(), elasticsearchBean);
                    }
                    testValues =
                        testValues.and(
                            "spring.elasticsearch.uris=http://" + elasticsearchBean.getElasticsearchContainer().getHttpHostAddress()
                        );
                }
    <%_ } _%>
                testValues.applyTo(context);
            }
    
            @Override
            public int hashCode() {
                return
                <%_ if (databaseTypeMongodb) { _%>
                    MongoDbTestContainer.class.getName().hashCode() <% if (searchEngineElasticsearch || databaseTypeCouchbase || searchEngineCouchbase) { %> + <% } else { %>;<% } %>
                <%_ } _%>
                <%_ if (searchEngineElasticsearch) { _%>
                    ElasticsearchTestContainer.class.getName().hashCode() <% if (databaseTypeCouchbase || searchEngineCouchbase) { %> + <% } else { %>;<% } %>
                <%_ } _%>
                <%_ if (databaseTypeCouchbase || searchEngineCouchbase) { _%>
                    CouchbaseTestContainer.class.getName().hashCode();
                <%_ } _%>
            }

            @Override
            public boolean equals(Object obj) {
                return this.hashCode() == obj.hashCode();
            }
        };
    }
}

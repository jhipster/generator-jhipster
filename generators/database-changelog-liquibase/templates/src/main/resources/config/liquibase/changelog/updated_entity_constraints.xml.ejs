<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-<%= LIQUIBASE_DTD_VERSION %>.xsd">
<%_
const entityTableName = entity.entityTableName;
const entityClass = entity.entityClass;
const name = entity.name;
if (hasFieldConstraint) { _%>

    <!--
        Added the field constraints for entity <%= entityClass %>.
    -->
    <changeSet id="<%= changelogDate %>-fields-constraints" author="jhipster">
    <%_ for (field of addedFields) {
        if (field.unique) {
    _%>
        <addUniqueConstraint tableName="<%= entityTableName %>"
            columnNames="<%= field.columnName %>"
            constraintName="<%= field.getUXConstraintName(entityTableName) %>"/>
    <%_ }
        if (!field.nullable) {
    _%>
        <addNotNullConstraint tableName="<%= entityTableName %>"
            columnName="<%= field.columnName %>"
            columnDataType="<%= field.fieldType %>"/>
        <%_ if (field.shouldCreateContentType) { _%>
        <addNotNullConstraint tableName="<%= entityTableName %>"
            columnName="<%= field.columnName %>_content_type"
            columnDataType="varchar(255)"/>
    <%_     }
        }
    } _%>
    </changeSet>
<% } _%>
<%_ if (hasRelationshipConstraint) { _%>

    <!--
        Added the relationship constraints for entity <%= entityClass %>.
    -->
    <changeSet id="<%= changelogDate %>-relationship-constraints" author="jhipster">
    <%_
    for (idx in addedRelationships) {
        const relationshipData = addedRelationships[idx];
        if (relationshipData.unique) {
            const idField = relationship.otherEntity.primaryKey.ownFields[0];
            const uniqueConstraintName = relationshipData.relationshipType === 'one-to-one' ? getUXConstraintName(entity.entityTableName, relationshipData.columnName + '_' + idField.columnName, entity.prodDatabaseType) : null;
    _%>
        <addUniqueConstraint tableName="<%= entityTableName %>"
            columnNames="<%= relationshipData.columnName %>_id"
            constraintName="<%= uniqueConstraintName %>"/>
        <%_ }
        if (!relationshipData.nullable) {
        _%>
        <addNotNullConstraint tableName="<%= entityTableName %>"
            columnName="<%= relationshipData.columnName %>"
            columnDataType="<%= relationshipData.columnDataType %>"/>
    <%_  }
     } _%>
    </changeSet>
<%_ } _%>
<%_ if (shouldWriteAnyRelationship) { %>

    <!--
        Added the relationship constraints for entity <%= entityClass %>.
    -->
    <changeSet id="<%= changelogDate %>-relationship-foreign-keys" author="jhipster">
    <%_ for (idx in addedRelationships) {
        const relationship = addedRelationships[idx];
        relationshipName = relationship.relationshipName;
        if (relationship.shouldWriteRelationship) {
            const constraintName = getFKConstraintName(entityTableName, relationshipName, prodDatabaseType);
            let baseColumnName = getColumnName(relationshipName) + '_id';
            if (relationship.relationshipType === 'one-to-one' && relationship.id === true) {
                baseColumnName = 'id';
            }
    _%>
        <addForeignKeyConstraint baseColumnNames="<%= baseColumnName %>"
                                 baseTableName="<%= entityTableName %>"
                                 constraintName="<%= constraintName %>"
                                 referencedColumnNames="id"
                                 referencedTableName="<%= relationship.otherEntityTableName %>"/>
    <%_ } else if (relationship.shouldWriteJoinTable) {
            const constraintName = getFKConstraintName(relationship.joinTable.name, getColumnName(entityTableName), prodDatabaseType);
            const otherEntityConstraintName = getFKConstraintName(relationship.joinTable.name, getColumnName(relationshipName), prodDatabaseType);
    _%>

        <addForeignKeyConstraint baseColumnNames="<%= primaryKey.fields.map(field => relationship.columnName + '_' + field.columnName).join(', ') %>"
                                 baseTableName="<%= relationship.joinTable.name %>"
                                 constraintName="<%= constraintName %>"
                                 referencedColumnNames="<%= primaryKey.fields.map(field => field.columnName).join(', ') %>"
                                 referencedTableName="<%= entityTableName %>"/>

        <addForeignKeyConstraint baseColumnNames="<%= relationship.otherEntity.primaryKey.fields.map(field => relationship.columnName + '_' + field.columnName).join(', ') %>"
                                 baseTableName="<%= relationship.joinTable.name %>"
                                 constraintName="<%= getColumnName(otherEntityConstraintName) %>"
                                 referencedColumnNames="<%= relationship.otherEntity.primaryKey.fields.map(field => field.columnName).join(', ') %>"
                                 referencedTableName="<%= relationship.otherEntityTableName %>"/>
    <%_ }
    } _%>
    </changeSet>
<%_ } _%>
</databaseChangeLog>

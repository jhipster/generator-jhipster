<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
/* tslint:disable no-unused-expression */
import { browser<% if ( fieldsContainInstant || fieldsContainZonedDateTime ) { %>, protractor<% } %>} from 'protractor';

import NavBarPage from './../../<%= entityParentPathAddition %>page-objects/navbar-page';
import <%= entityClass %>ComponentsPage, { <%= entityClass %>DeleteDialog } from './<%= entityFileName %>.page-object';
<%_ if (!readOnly) { _%>
import <%= entityClass %>UpdatePage from './<%= entityFileName%>-update.page-object';
<%_ } _%>
import <%= entityClass %>DetailsPage from './<%= entityFileName%>-details.page-object';

import {
  clear,
  click,
  getRecordsCount,
  isVisible,
  selectLastOption,
  waitUntilAllDisplayed,
  waitUntilAnyDisplayed,
  waitUntilCount,
  waitUntilDisplayed,
  waitUntilHidden
} from '../../<%= entityParentPathAddition %>util/utils';

<%_ if (fieldsContainBlobOrImage) { _%>
import path from 'path';
<%_ } _%>
<%_
let elementGetter = `getText()`;
let openBlockComment = ``;
let closeBlockComment = ``;
if (enableTranslation) {
  elementGetter = `getAttribute('${jhiPrefix}Translate')`;
}
for (let relationship of relationships) {
  if (relationship.relationshipRequired || relationship.id) {
    openBlockComment = `/*`;
    closeBlockComment = `*/`;
    break;
  }
} _%>

const expect = chai.expect;

describe('<%= entityClass %> e2e test', () => {
  let navBarPage: NavBarPage;
<%_ if (!readOnly) { _%>
  let updatePage: <%= entityClass %>UpdatePage;
<%_ } _%>
  let detailsPage: <%= entityClass %>DetailsPage;
  let listPage: <%= entityClass %>ComponentsPage;
  <%= openBlockComment %>let deleteDialog: <%= entityClass %>DeleteDialog;<%= closeBlockComment %>
<%_ if (fieldsContainBlobOrImage) { _%>
  const fileToUpload = '../../../../../<%= entityParentPathAddition %>main/webapp/content/images/logo-jhipster.png';
  const absolutePath = path.resolve(__dirname, fileToUpload);
<%_ } _%>
  let beforeRecordsCount = 0;
  const username = process.env.E2E_USERNAME ?? 'admin';
  const password = process.env.E2E_PASSWORD ?? 'admin';

  before(async () => {
    await browser.get('/');
    navBarPage = new NavBarPage();
    await navBarPage.login(username, password);
  });


  after(async () => {
    await navBarPage.autoSignOut();
  });

  it('should load <%= entityClassPlural %>', async () => {
    await navBarPage.getEntityPage('<%= entityStateName %>');
    listPage = new <%= entityClass %>ComponentsPage();

    await waitUntilAllDisplayed([listPage.title, listPage.footer]);

    expect(await listPage.title.getText()).not.to.be.empty;
<%_ if (!readOnly) { _%>
    expect(await listPage.createButton.isEnabled()).to.be.true;
<%_ } _%>

    await waitUntilAnyDisplayed([listPage.noRecords, listPage.table]);
    beforeRecordsCount = await isVisible(listPage.noRecords) ? 0 : await getRecordsCount(listPage.table);
  });
<%_ if (!readOnly) { _%>
  describe('Create flow', () => {
    it('should load create <%= entityClass %> page', async () => {

      await listPage.createButton.click();
      updatePage = new <%= entityClass %>UpdatePage();

      await waitUntilAllDisplayed([updatePage.title, updatePage.footer, updatePage.saveButton]);

  <%_ if (enableTranslation) { _%>
      expect(await updatePage.title.getAttribute('id'))
        .to.match(/<%= i18nKeyPrefix %>.home.createOrEditLabel/);
  <%_ } else { _%>
      expect(await updatePage.title.getText())
        .to.match(/Create or edit a <%= entityClass %>/);
  <%_ } _%>
    });

   <%= openBlockComment %> it('should create and save <%= entityClassPlural %>', async () => {
  <%_ fields.filter(field => !field.id).forEach((field) => {
    const fieldName = field.fieldName;
    const fieldNameCapitalized = field.fieldNameCapitalized;
    const fieldIsEnum = field.fieldIsEnum;
    const fieldValidateSampleString = field.fieldValidateSampleString;
  _%>

    <%_ if (field.fieldTypeNumeric) { _%>
      await updatePage.<%= fieldName %>Input.sendKeys('5');

    <%_ } else if (field.fieldTypeLocalDate) { _%>
      await updatePage.<%= fieldName %>Input.sendKeys('2001-01-01');

    <%_ } else if (field.fieldTypeTimed) { _%>
      await updatePage.<%= fieldName %>Input.sendKeys('01/01/2001' + protractor.Key.TAB + '02:30AM');

    <%_ } else if (field.fieldTypeDuration) { _%>
      await updatePage.<%= fieldName %>Input.sendKeys('PT12S');

    <%_ } else if (field.fieldTypeBoolean) { _%>
      await updatePage.<%= fieldName %>Input.click();

    <%_ } else if (field.fieldTypeBinary && field.blobContentTypeText) { _%>
      await waitUntilDisplayed(updatePage.<%= fieldName %>Input);
      await updatePage.<%= fieldName %>Input.sendKeys('<%= fieldName %>');

    <%_ } else if (field.fieldTypeBinary) { _%>
      await waitUntilDisplayed(updatePage.<%= fieldName %>Input);
      await updatePage.<%= fieldName %>Input.sendKeys(absolutePath);

    <%_ } else if (fieldIsEnum) { _%>
      await selectLastOption(updatePage.<%= fieldName %>Select);

    <%_ } else if (field.fieldTypeUUID){ _%>
      await updatePage.<%= fieldName %>Input.sendKeys('64c99148-3908-465d-8c4a-e510e3ade974');

    <%_ } else if (field.fieldTypeString && fieldValidateSampleString) { _%>
      await updatePage.<%= fieldName %>Input.sendKeys('<%= fieldValidateSampleString %>');

    <%_ } else { _%>
      await updatePage.<%= fieldName %>Input.sendKeys('<%= fieldName %>');

    <%_ } _%>
  <%_ }); _%>
  <%_ relationships.forEach((relationship) => {
    const ownerSide = relationship.ownerSide;
    const relationshipName = relationship.relationshipName; _%>
    <%_ if (relationship.relationshipManyToOne || (relationship.relationshipOneToOne && ownerSide)) { _%>
      // await selectLastOption(updatePage.<%= relationshipName %>Select);
    <%_ } else if ((relationship.relationshipManyToMany && ownerSide)) { _%>
      // await selectLastOption(updatePage.<%= relationshipName %>Select);
    <%_ } _%>
  <%_ }); _%>

      expect(await updatePage.saveButton.isEnabled()).to.be.true;
      await updatePage.saveButton.click();

      await waitUntilHidden(updatePage.saveButton);
      expect(await isVisible(updatePage.saveButton)).to.be.false;

      await waitUntilCount(listPage.records, beforeRecordsCount + 1);
      expect(await listPage.records.count()).to.eq(beforeRecordsCount + 1);
    });<%= closeBlockComment %>

    <%= openBlockComment %>
    describe('Details, Update, Delete flow', () => {

      after(async () => {

        const deleteButton = listPage.getDeleteButton(listPage.records.<%_ if (paginationInfiniteScroll || paginationNo) { _%>last()<%_ } else {_%>first()<%_ } _%>);
        await click(deleteButton);

        deleteDialog = new <%= entityClass %>DeleteDialog();
        await waitUntilDisplayed(deleteDialog.dialog);

        expect(await deleteDialog.title.getAttribute('id')).to.match(/<%= i18nKeyPrefix %>.delete.question/);

        await click(deleteDialog.confirmButton);
        await waitUntilHidden(deleteDialog.dialog);

        expect(await isVisible(deleteDialog.dialog)).to.be.false;

        await waitUntilCount(listPage.records, beforeRecordsCount);
        expect(await listPage.records.count()).to.eq(beforeRecordsCount);
      });

      it('should load details <%= entityClass %> page and fetch data', async () => {

        const detailsButton = listPage.getDetailsButton(listPage.records.<%_ if (paginationInfiniteScroll || paginationNo) { _%>last()<%_ } else {_%>first()<%_ } _%>);
        await click(detailsButton);

        detailsPage = new <%= entityClass %>DetailsPage();

  <%_ if (fields.some(field => !field.id) && !databaseTypeNeo4j) { _%>
        await waitUntilAllDisplayed([detailsPage.title, detailsPage.backButton, detailsPage.firstDetail]);
  <%_ } else { _%>
        await waitUntilAllDisplayed([detailsPage.title, detailsPage.backButton]);
  <%_ } _%>

        expect(await detailsPage.title.getText()).not.to.be.empty;
  <%_ if (fields.some(field => !field.id) && !databaseTypeNeo4j) { _%>
        expect(await detailsPage.firstDetail.getText()).not.to.be.empty;
  <%_ } _%>

        await click(detailsPage.backButton);
        await waitUntilCount(listPage.records, beforeRecordsCount + 1);
      });

      it('should load edit <%= entityClass %> page, fetch data and update', async () => {

        const editButton = listPage.getEditButton(listPage.records.<%_ if (paginationInfiniteScroll || paginationNo) { _%>last()<%_ } else {_%>first()<%_ } _%>);
        await click(editButton);

        await waitUntilAllDisplayed([updatePage.title, updatePage.footer, updatePage.saveButton]);

        expect(await updatePage.title.getText()).not.to.be.empty;

  <%_ fields.filter(field => !field.id).forEach((field) => {
    const fieldName = field.fieldName;
    const fieldNameCapitalized = field.fieldNameCapitalized;
    const fieldType = field.fieldType;
    const fieldTypeBlobContent = field.fieldTypeBlobContent;
    const fieldIsEnum = field.fieldIsEnum;
    const fieldValidateModifiedString = field.fieldValidateModifiedString;
  _%>
    <%_ if (field.fieldTypeNumeric) { _%>
          await clear(updatePage.<%= fieldName %>Input);
          await updatePage.<%= fieldName %>Input.sendKeys('6');

    <%_ } else if (field.fieldTypeLocalDate) { _%>
          await updatePage.<%= fieldName %>Input.clear();
          await updatePage.<%= fieldName %>Input.sendKeys('2019-01-01');

    <%_ } else if (field.fieldTypeTimed) { _%>
          await updatePage.<%= fieldName %>Input.clear();
          await updatePage.<%= fieldName %>Input.sendKeys('01/01/2019' + protractor.Key.TAB + '02:30AM');

    <%_ } else if (field.fieldTypeDuration) { _%>
          await clear(updatePage.<%= fieldName %>Input);
          await updatePage.<%= fieldName %>Input.sendKeys('PT14S');

    <%_ } else if (field.fieldTypeBoolean) { _%>
          await updatePage.<%= fieldName %>Input.click();

    <%_ } else if (field.fieldTypeBinary && field.blobContentTypeText) { _%>
          await updatePage.<%= fieldName %>Input.clear();
          await updatePage.<%= fieldName %>Input.sendKeys('updated<%= fieldName %>');

    <%_ } else if (field.fieldTypeUUID) { _%>
          await updatePage.<%= fieldName %>Input.clear();
          await updatePage.<%= fieldName %>Input.sendKeys('64c99148-3908-465d-8c4a-e510e3ade978');

    <%_ } else if (field.fieldTypeString && fieldValidateModifiedString) { _%>
          await updatePage.<%= fieldName %>Input.clear();
          await updatePage.<%= fieldName %>Input.sendKeys('<%= fieldValidateModifiedString %>');

    <%_ } else if (!fieldIsEnum && !field.fieldTypeBinary) { _%>
          await updatePage.<%= fieldName %>Input.clear();
          await updatePage.<%= fieldName %>Input.sendKeys('modified');

    <%_ } _%>
  <%_ }); _%>

        await updatePage.saveButton.click();

        await waitUntilHidden(updatePage.saveButton);

        expect(await isVisible(updatePage.saveButton)).to.be.false;
        await waitUntilCount(listPage.records, beforeRecordsCount + 1);
      });
    });
    <%= closeBlockComment %>
  });
<%_ } _%>
});

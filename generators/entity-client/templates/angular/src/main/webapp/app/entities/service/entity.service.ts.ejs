<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
let searchType = 'Search';
if (pagination === 'pagination' || pagination === 'infinite-scroll') {
    searchType = 'SearchWithPagination';
}
_%>
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';

import { isPresent } from 'app/core/util/operators';
<%_ if (fieldsContainLocalDate) { _%>
import { DATE_FORMAT } from 'app/config/input.constants';
<%_ } _%>
import { ApplicationConfigService } from 'app/core/config/application-config.service';
<%_ if (fieldsContainDate || fieldsContainInstant || fieldsContainZonedDateTime) { _%>
import { map } from 'rxjs/operators';
import * as dayjs from 'dayjs';
import { DATE_TIME_FORMAT } from 'app/config/input.constants';
<%_ } _%>
import { ConfigService } from 'app/core/config/config.service';
import { createRequestOption } from 'app/core/request/request-util';
<%_ if (searchEngine !== false) { _%>
import { <%= searchType %> } from 'app/core/request/request.model';
<%_ } _%>
import { I<%= entityAngularName %>, <%= entityAngularName %>, get<%= entityAngularName %>Identifier } from '../<%= entityFileName %>.model';
<%_
const hasValidationRule = fields.some(field =>
        field.fieldValidate && (
                field.fieldValidateRules.includes('required') ||
                field.fieldValidateRules.includes('minlength') ||
                field.fieldValidateRules.includes('maxlength') ||
                field.fieldValidateRules.includes('min') ||
                field.fieldValidateRules.includes('max') ||
                field.fieldValidateRules.includes('pattern')
        )
);

const hasRequiredRelationship = relationships.some(relationship => relationship.relationshipRequired);
const isValidatorsRequired = hasValidationRule || hasRequiredRelationship;
const allRelationshipsByEntityNeedingOptions = Object
    .values(differentRelationships)
    .map(relationships => relationships.filter(rel => rel.ownerSide))
    .filter(relationships => relationships.length > 0);
_%>
import { FormBuilder, FormGroup,<%_ if (isValidatorsRequired) { _%> Validators<%_ } _%> } from '@angular/forms';

export type EntityResponseType = HttpResponse<I<%= entityAngularName %>>;
export type EntityArrayResponseType = HttpResponse<I<%= entityAngularName %>[]>;

@Injectable({ providedIn: 'root' })
export class <%= entityAngularName %>Service {
    public resourceUrl = this.applicationConfigService.getEndpointFor('api/<%= entityApiUrl %>'<% if (applicationType === 'gateway' && locals.microserviceName) { %>, '<%= microserviceName.toLowerCase() %>'<% } %>);
  private static fb: FormBuilder;
    <%_ if (searchEngine !== false) { _%>
    public resourceSearchUrl = this.applicationConfigService.getEndpointFor('api/_search/<%= entityApiUrl %>'<% if (applicationType === 'gateway' && locals.microserviceName) { %>, '<%= microserviceName.toLowerCase() %>'<% } %>);
    <%_ } _%>

    constructor(protected http: HttpClient, private applicationConfigService: ApplicationConfigService protected fb: FormBuilder) {}

    static createEditForm(): FormGroup {
      return this.fb.group({
          <%_ for (const field of fields) {
              const fieldName = field.fieldName;
              const fieldType = field.fieldType;
              const fieldTypeBlobContent = field.fieldTypeBlobContent;
          _%>
              <%= fieldName %>: [<% if (field.fieldValidate === true) { %>null,[<% if (field.fieldValidateRules.includes('required')) { %>Validators.required,<% } %><% if (field.fieldValidateRules.includes('minlength')) { %>Validators.minLength(<%= field.fieldValidateRulesMinlength %>),<% } %><% if (field.fieldValidateRules.includes('maxlength')) { %>Validators.maxLength(<%= field.fieldValidateRulesMaxlength %>),<% } %><% if (field.fieldValidateRules.includes('min')) { %>Validators.min(<%= field.fieldValidateRulesMin %>),<% } %><% if (field.fieldValidateRules.includes('max')) { %>Validators.max(<%= field.fieldValidateRulesMax %>),<% } %><% if (field.fieldValidateRules.includes('pattern')) { %>Validators.pattern('<%= field.fieldValidateRulesPattern.replace(/\\/g, '\\\\') %>'),<% } %>]<% } %>],
              <%_ if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
              <%= fieldName %>ContentType: [],
              <%_ } _%>
          <%_ } _%>
      <%_ for (const relationship of relationships) {
          const relationshipType = relationship.relationshipType;
          const ownerSide = relationship.ownerSide;
          const relationshipName = relationship.relationshipName;
          const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
          const relationshipRequired = relationship.relationshipRequired;
      _%>
          <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
              <%= relationshipName %>: [<% if (relationshipRequired) { %>null,Validators.required<% } %>],
          <%_ } else if (relationshipType === 'many-to-many' && relationship.ownerSide === true) { _%>
              <%= relationshipFieldNamePlural %>: [<% if (relationshipRequired) { %>null,Validators.required<% } %>],
          <%_ } _%>
      <%_ } _%>
          });
    }

    static createFromForm(editForm: FormGroup): I<%= entityAngularName %> {
      return {
        ...new <%= entityAngularName %>(),
      <%_ for (const field of fields) {
          const fieldName = field.fieldName;
          const fieldType = field.fieldType;
          const fieldTypeBlobContent = field.fieldTypeBlobContent;
      _%>
          <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
              <%= fieldName %>: editForm.get(['<%= fieldName %>'])!.value ? dayjs(editForm.get(['<%= fieldName %>'])!.value, DATE_TIME_FORMAT) : undefined,
          <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
              <%= fieldName %>ContentType: editForm.get(['<%= fieldName %>ContentType'])!.value,
              <%= fieldName %>: editForm.get(['<%= fieldName %>'])!.value,
          <%_ } else { _%>
              <%= fieldName %>: editForm.get(['<%= fieldName %>'])!.value,
          <%_ } _%>
      <%_ } _%>
      <%_ for (const relationship of relationships) {
          const relationshipType = relationship.relationshipType;
          const ownerSide = relationship.ownerSide;
          const relationshipName = relationship.relationshipName;
          const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
      _%>
          <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
              <%= relationshipName %>: editForm.get(['<%= relationshipName %>'])!.value,
          <%_ } else if (relationshipType === 'many-to-many' && relationship.ownerSide === true) { _%>
              <%= relationshipFieldNamePlural %>: editForm.get(['<%= relationshipFieldNamePlural %>'])!.value,
          <%_ } _%>
      <%_ } _%>
      };
    }

    static updateForm(<%= entityInstance %>: I<%= entityAngularName %>, editForm: FormGroup): void {
            return editForm.patchValue({
        <%_ for (const field of fields) {
            const fieldName = field.fieldName;
            const fieldType = field.fieldType;
            const fieldTypeBlobContent = field.fieldTypeBlobContent;
        _%>
            <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
                <%= fieldName %>: <%= entityInstance %>.<%= fieldName %> ? <%= entityInstance %>.<%= fieldName %>.format(DATE_TIME_FORMAT) : null,
            <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent !== 'text') { _%>
                <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
                <%= fieldName %>ContentType: <%= entityInstance %>.<%= fieldName %>ContentType,
            <%_ } else { _%>
                <%= fieldName %>: <%= entityInstance %>.<%= fieldName %>,
            <%_ } _%>
        <%_ } _%>
        <%_ for (const relationship of relationships) {
            const relationshipType = relationship.relationshipType;
            const ownerSide = relationship.ownerSide;
            const relationshipName = relationship.relationshipName;
            const relationshipFieldName = relationship.relationshipFieldName;
            const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
        _%>
            <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
                <%= relationshipName %>: <%= entityInstance %>.<%= relationshipFieldName %>,
            <%_ } else if (relationshipType === 'many-to-many' && ownerSide === true) { _%>
                <%= relationshipFieldNamePlural %>: <%= entityInstance %>.<%= relationshipFieldNamePlural %>,
            <%_ } _%>
        <%_ } _%>
        });
    }

    <%_ if (!readOnly) { _%>
    create(<%= entityInstance %>: I<%= entityAngularName %>): Observable<EntityResponseType> {
        <%_ if (fieldsContainDate) { _%>
        const copy = this.convertDateFromClient(<%= entityInstance %>);
        <%_ } _%>
        return this.http.post<I<%= entityAngularName %>>(this.resourceUrl,
                <% if (fieldsContainDate) { %> copy <% } else { %> <%= entityInstance %> <% } %>,
                { observe: 'response' })
        <% if (fieldsContainDate) { %>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)))<% } %>;
    }

    update(<%= entityInstance %>: I<%= entityAngularName %>): Observable<EntityResponseType> {
        <%_ if (fieldsContainDate) { _%>
        const copy = this.convertDateFromClient(<%= entityInstance %>);
        <%_ } _%>
        return this.http.put<I<%= entityAngularName %>>(this.resourceUrl,
                <% if (fieldsContainDate) { %> copy <% } else { %> <%= entityInstance %> <% } %>,
                { observe: 'response' })
        <% if (fieldsContainDate) { %>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)))<% } %>;
    }
    <%_ } _%>

    find(id: <%= tsKeyType %>): Observable<EntityResponseType> {
        return this.http.get<I<%= entityAngularName %>>(`${this.resourceUrl}/${id}`, { observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map((res: EntityResponseType) => this.convertDateFromServer(res)))<% } %>;
    }

    query(req?: any): Observable<EntityArrayResponseType> {
        const options = createRequestOption(req);
        return this.http.get<I<%= entityAngularName %>[]>(this.resourceUrl, { params: options, observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)))<% } %>;
    }

    <%_ if (!readOnly) { _%>
    delete(id: <%= tsKeyType %>): Observable<HttpResponse<{}>> {
        return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });
    }
    <%_ } _%>

    <%_ if (searchEngine !== false) { _%>
    search(req: <%= searchType %>): Observable<EntityArrayResponseType> {
        const options = createRequestOption(req);
        return this.http.get<I<%= entityAngularName %>[]>(this.resourceSearchUrl, { params: options, observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map((res: EntityArrayResponseType) => this.convertDateArrayFromServer(res)))<% } %>;
    }
    <%_ } _%>

    add<%= entityAngularName %>ToCollectionIfMissing(<%= entityInstance %>Collection: I<%= entityAngularName %>[], ...<%= entityInstancePlural %>ToCheck: (I<%= entityAngularName %> | null | undefined)[]): I<%= entityAngularName %>[] {
        const <%= entityInstancePlural %>: I<%= entityAngularName %>[] = <%= entityInstancePlural %>ToCheck.filter(isPresent);
        if (<%= entityInstancePlural %>.length > 0) {
            const <%= entityInstance %>CollectionIdentifiers = <%= entityInstance %>Collection.map(<%= entityInstance %>Item => get<%= entityAngularName %>Identifier(<%= entityInstance %>Item)!);
            const <%= entityInstancePlural %>ToAdd = <%= entityInstancePlural %>.filter(<%= entityInstance %>Item => {
                const <%= entityInstance %>Identifier = get<%= entityAngularName %>Identifier(<%= entityInstance %>Item);
                if (<%= entityInstance %>Identifier == null || <%= entityInstance %>CollectionIdentifiers.includes(<%= entityInstance %>Identifier)) {
                    return false;
                }
                <%= entityInstance %>CollectionIdentifiers.push(<%= entityInstance %>Identifier);
                return true;
            });
            return [...<%= entityInstancePlural %>ToAdd, ...<%= entityInstance %>Collection];
        }
        return <%= entityInstance %>Collection;
    }

<%_ if (fieldsContainDate) { _%>
    protected convertDateFromClient(<%= entityInstance %>: I<%= entityAngularName %>): I<%= entityAngularName %> {
        const copy: I<%= entityAngularName %> = Object.assign({}, <%= entityInstance %>, {
    <%_ for (const field of fields) { _%>
        <%_ if ( ['Instant', 'ZonedDateTime'].includes(field.fieldType) ) { _%>
        <%= field.fieldName %>: <%= entityInstance %>.<%= field.fieldName %>?.isValid() ? <%= entityInstance %>.<%= field.fieldName %>.toJSON() : undefined,
        <%_ } _%>
        <%_ if ( field.fieldType === 'LocalDate' ) { _%>
        <%= field.fieldName %>: <%= entityInstance %>.<%= field.fieldName %>?.isValid() ? <%= entityInstance %>.<%= field.fieldName %>.format(DATE_FORMAT) : undefined,
        <%_ } _%>
    <%_ } _%>
        });
        return copy;
    }

    protected convertDateFromServer(res: EntityResponseType): EntityResponseType {
        if (res.body) {
        <%_ for (const field of fields) { _%>
            <%_ if ( ['Instant', 'ZonedDateTime', 'LocalDate'].includes(field.fieldType) ) { _%>
            res.body.<%= field.fieldName %> = res.body.<%= field.fieldName %> ? dayjs(res.body.<%= field.fieldName %>) : undefined;
            <%_ } _%>
        <%_ } _%>
        }
        return res;
    }

    protected convertDateArrayFromServer(res: EntityArrayResponseType): EntityArrayResponseType {
        if (res.body) {
            res.body.forEach ((<%= entityInstance %>: I<%= entityAngularName %>) => {
            <%_ for (const field of fields) { _%>
                <%_ if ( ['Instant', 'ZonedDateTime', 'LocalDate'].includes(field.fieldType) ) { _%>
                <%= entityInstance %>.<%= field.fieldName %> = <%= entityInstance %>.<%= field.fieldName %> ? dayjs(<%= entityInstance %>.<%= field.fieldName %>) : undefined;
                <%_ } _%>
            <%_ } _%>
            });
        }
        return res;
    }
<%_ } _%>
}

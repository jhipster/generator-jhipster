<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const entityArrayOptionalChainSymbol = '?.';
const order = 'desc';
const testEntityPrimaryKey = generateTestEntityPrimaryKey(primaryKey, 0);
_%>

import { ComponentFixture, TestBed } from '@angular/core/testing';
import { HttpHeaders, HttpResponse } from '@angular/common/http';
import { HttpClientTestingModule } from '@angular/common/http/testing';
import { ActivatedRoute } from '@angular/router';
import { RouterTestingModule } from '@angular/router/testing';
import { of } from 'rxjs';

import { <%= entityAngularName %>Service } from '../service/<%= entityFileName %>.service';

import { <%= entityAngularName %>Component } from './<%= entityFileName %>.component';
<%_ if (!paginationNo) { _%>
import SpyInstance = jest.SpyInstance;
<%_ } _%>

describe('<%= entityAngularName %> Management Component', () => {
    let comp: <%= entityAngularName %>Component;
    let fixture: ComponentFixture<<%= entityAngularName %>Component>;
    let service: <%= entityAngularName %>Service;
<%_ if (!paginationNo) { _%>
    let routerNavigateSpy: SpyInstance<Promise<boolean>>;
<%_ } _%>

    beforeEach(() => {
        TestBed.configureTestingModule({
            imports: [
              RouterTestingModule.withRoutes([{ path: '<%= entityPage %>', component: <%= entityAngularName %>Component }]),
              HttpClientTestingModule
            ],
            declarations: [<%= entityAngularName %>Component],
            providers: [
                {
                    provide: ActivatedRoute,
                    useValue: {
                        data: of({
                            defaultSort: '<%- primaryKey.name %>,asc',
                        }),
                        queryParamMap: of(
                            jest.requireActual('@angular/router').convertToParamMap({
                                page: '1',
                                size: '1',
                                sort: '<%- primaryKey.name %>,desc',
<%_ if (jpaMetamodelFiltering) { _%>
                                'filter[someId.in]': 'dc4279ea-cfb9-11ec-9d64-0242ac120002',
<%_ } _%>
                            })
                        ),
                        snapshot: { queryParams: {} },
                    }
                }
            ]
        })
        .overrideTemplate(<%= entityAngularName %>Component, '')
        .compileComponents();

        fixture = TestBed.createComponent(<%= entityAngularName %>Component);
        comp = fixture.componentInstance;
        service = TestBed.inject(<%= entityAngularName %>Service);
<%_ if (!paginationNo) { _%>
        routerNavigateSpy = jest.spyOn(comp.router, 'navigate');
<%_ } _%>

        const headers = new HttpHeaders();
        jest.spyOn(service, 'query').mockReturnValue(
            of(
                new HttpResponse({
                    body: [<%- testEntityPrimaryKey %>],
                    headers,
                })
            )
        );
    });

    it('Should call load all on init', () => {
        // WHEN
        comp.ngOnInit();

        // THEN
        expect(service.query).toHaveBeenCalled();
        expect(comp.<%= entityInstancePlural %><%= entityArrayOptionalChainSymbol %>[0]).toEqual(expect.objectContaining(<%- testEntityPrimaryKey %>));
    });

    describe('track<%= primaryKey.nameCapitalized %>', () => {
        it('Should forward to <%= entityInstance %>Service', () => {
            const entity = <%- this.generateTestEntityPrimaryKey(primaryKey, 0) %>;
            jest.spyOn(service, 'get<%= entityAngularName %>Identifier');
            const <%= primaryKey.name %> = comp.track<%= primaryKey.nameCapitalized %>(0, entity);
            expect(service.get<%= entityAngularName %>Identifier).toHaveBeenCalledWith(entity);
            expect(<%= primaryKey.name %>).toBe(entity.<%= primaryKey.name %>);
        });
    });
<%_ if (!paginationNo) { _%>

    it('should load a page', () => {
        // WHEN
        comp.navigateToPage(1);

        // THEN
        expect(routerNavigateSpy).toHaveBeenCalled();
    });

    it('should calculate the sort attribute for an id', () => {
        // WHEN
        comp.ngOnInit();

        // THEN
        expect(service.query).toHaveBeenLastCalledWith(expect.objectContaining({ sort: ['<%- primaryKey.fields.map(field => field.fieldName).join(',') %>,<%= order %>'] }));
    });

    it('should calculate the sort attribute for a non-id attribute', () => {

        // GIVEN
        comp.predicate = 'name';

        // WHEN
        comp.navigateToWithComponentValues();

        // THEN
        expect(routerNavigateSpy).toHaveBeenLastCalledWith(expect.anything(),
          expect.objectContaining({
            queryParams: expect.objectContaining({
                sort: ['name,asc']
              })
          }));
    });
  <%_ if (paginationInfiniteScroll) { _%>

    it('should re-initialize the page', () => {
        // WHEN
        comp.loadPage(1);
        comp.reset();

        // THEN
        expect(comp.page).toEqual(1);
        expect(service.query).toHaveBeenCalledTimes(2);
        expect(comp.<%= entityInstancePlural %><%= entityArrayOptionalChainSymbol %>[0]).toEqual(expect.objectContaining(<%- testEntityPrimaryKey %>));
    });
  <%_ } _%>
  <%_ if (jpaMetamodelFiltering && paginationPagination) { _%>

    it('should calculate the filter attribute', () => {
        // WHEN
        comp.ngOnInit();

        // THEN
        expect(service.query).toHaveBeenLastCalledWith(expect.objectContaining({ 'someId.in': ['dc4279ea-cfb9-11ec-9d64-0242ac120002'] }));
    });
  <%_ } _%>
<%_ } _%>
});

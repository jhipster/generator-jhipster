<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
  const testEntityPrimaryKey0 = generateTestEntityPrimaryKey(primaryKey, 0);
  const testEntityPrimaryKey1 = generateTestEntityPrimaryKey(primaryKey, 1);
_%>
import { TestBed } from '@angular/core/testing';
<%_ if (fieldsContainDate) { _%>
import dayjs from 'dayjs/esm';
<%_ } _%>

<%_ generateEntityClientEnumImports(fields).forEach( (importedPath, importedType) => { _%>
import { <%- importedType %> } from '<%- importedPath %>';
<%_ }); _%>
import { I<%= entityAngularName %> } from '../<%= entityFileName %>.model';

import { <%= entityAngularName %>FormService } from './<%= entityFileName %>-form.service';

describe('<%= entityAngularName %> Form Service', () => {
  let service: <%= entityAngularName %>FormService;
  let elemDefault: I<%= entityAngularName %>;
<%_ if (fields.some(field => field.fieldTypeTimed)) { _%>
  let currentTime: dayjs.Dayjs;
<%_ } _%>
<%_ if (fields.some(field => field.fieldTypeLocalDate)) { _%>
  let currentDate: dayjs.Dayjs;
<%_ } _%>

  beforeEach(() => {
    TestBed.configureTestingModule({});
    service = TestBed.inject(<%= entityAngularName %>FormService);
<%_ if (fields.some(field => field.fieldTypeTimed)) { _%>
    currentTime = dayjs().startOf('minute');
<%_ } _%>
<%_ if (fields.some(field => field.fieldTypeLocalDate)) { _%>
    currentDate = dayjs().startOf('day');
<%_ } _%>

    elemDefault = {
<%_ fields.forEach((field) => {
      const { fieldType } = field;
_%>
  <%_ if (field.fieldIsEnum) { _%>
      <%= field.fieldName %>: <%= fieldType + '.' + field.enumValues[0].name %>,
  <%_ } else if (field.fieldTypeBoolean) { _%>
      <%= field.fieldName %>: false,
  <%_ } else if (field.fieldTypeDuration) { _%>
      <%= field.fieldName %>: 'PT1S',
  <%_ } else if (field.fieldTypeNumeric) { _%>
      <%= field.fieldName %>: 0,
  <%_ } else if (field.fieldTypeCharSequence) { _%>
      <%= field.fieldName %>: 'AAAAAAA',
  <%_ } else if (field.fieldTypeLocalDate) { _%>
      <%= field.fieldName %>: currentDate,
  <%_ } else if (field.fieldTypeTimed) { _%>
      <%= field.fieldName %>: currentTime,
  <%_ } else if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
      <%= field.fieldName %>ContentType: 'image/png',
      <%= field.fieldName %>: 'AAAAAAA',
  <%_ } else { _%>
      <%= field.fieldName %>: 'AAAAAAA',
  <%_ } _%>
<%_ }) _%>
        };
  });

  describe('Service methods', () => {
    describe('create<%= entityAngularName %>FormGroup', () => {
      it('should create a new form with FormControl', () => {
        const formGroup = service.create<%= entityAngularName %>FormGroup();

        expect(formGroup.controls).toEqual(
          expect.objectContaining({
<%_ for (const field of fields) { _%>
            <%= field.fieldName %>: expect.any(Object),
<%_ } _%>
<%_ for (const relationship of relationships.filter(relationship => relationship.ownerSide || relationship.relationshipManyToMany)) { _%>
            <%= relationship.propertyName %>: expect.any(Object),
<%_ } _%>
          })
        );
      });

      it('passing I<%= entityAngularName %> should create a new form with <%= primaryKey.name %> FormControl enabled', () => {
        const formGroup = service.create<%= entityAngularName %>FormGroup(<%- testEntityPrimaryKey0 %>);

        expect(formGroup.controls).toEqual(expect.objectContaining({
<%_ for (const field of fields) { _%>
          <%= field.fieldName %>: expect.any(Object),
<%_ } _%>
<%_ for (const relationship of relationships.filter(relationship => relationship.ownerSide || relationship.relationshipManyToMany)) { _%>
          <%= relationship.propertyName %>: expect.any(Object),
<%_ } _%>
        }));
      });
    });

    describe('get<%= entityAngularName %>', () => {
      it('should return New<%= entityAngularName %> for default <%= entityAngularName %> initial value', () => {
        const <%= entityInstance %>Value = { ...elemDefault, <%= primaryKey.name %>: null };
        const formGroup = service.create<%= entityAngularName %>FormGroup(<%= entityInstance %>Value);

        const <%= entityInstance %> = service.get<%= entityAngularName %>(formGroup) as any;

        expect(<%= entityInstance %>).toMatchObject(<%= entityInstance %>Value);
      });

      it('should return New<%= entityAngularName %> for empty <%= entityAngularName %> initial value', () => {
        const formGroup = service.create<%= entityAngularName %>FormGroup();

        const <%= entityInstance %> = service.get<%= entityAngularName %>(formGroup) as any;

        expect(<%= entityInstance %>).toMatchObject({});
      });

      it('should return I<%= entityAngularName %>', () => {
        const <%= entityInstance %>Value = elemDefault;
        const formGroup = service.create<%= entityAngularName %>FormGroup(<%= entityInstance %>Value);

        const <%= entityInstance %> = service.get<%= entityAngularName %>(formGroup) as any;

        expect(<%= entityInstance %>).toMatchObject(<%= entityInstance %>Value);
      });
    });

    describe('resetForm', () => {
      it('passing I<%= entityAngularName %> should not enable <%= primaryKey.name %> FormControl', () => {
        const formGroup = service.create<%= entityAngularName %>FormGroup();
        expect(formGroup.controls.<%= primaryKey.name %>.disabled).toBe(true);

        service.resetForm(formGroup, <%- testEntityPrimaryKey0 %>);

        expect(formGroup.controls.<%= primaryKey.name %>.disabled).toBe(true);
      });

      it('passing New<%= entityAngularName %> should disable <%= primaryKey.name %> FormControl', () => {
        const formGroup = service.create<%= entityAngularName %>FormGroup(<%- testEntityPrimaryKey0 %>);
        expect(formGroup.controls.<%= primaryKey.name %>.disabled).toBe(true);

        service.resetForm(formGroup, { <%= primaryKey.name %>: null });

        expect(formGroup.controls.<%= primaryKey.name %>.disabled).toBe(true);
      });
    });
  });
});

<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const tsKeyId = generateTestEntityId(primaryKeyType);
_%>
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { ActivatedRoute } from '@angular/router';
import { of } from 'rxjs';
<%_ if (fieldsContainBlob) { _%>
import { JhiDataUtils } from 'ng-jhipster';
<%_ } _%>

import { <%= angularXAppName %>TestModule } from '../../../<%= entityParentPathAddition %>test.module';
import { <%= entityAngularName %>DetailComponent } from 'app/entities/<%= entityFolderName %>/<%= entityFileName %>-detail.component';
import { <%= entityAngularName %> } from 'app/shared/model/<%= entityModelFileName %>.model';

describe('Component Tests', () => {
    describe('<%= entityAngularName %> Management Detail Component', () => {
        let comp: <%= entityAngularName %>DetailComponent;
        let fixture: ComponentFixture<<%= entityAngularName %>DetailComponent>;
        <%_ if (fieldsContainBlob) { _%>
        let dataUtils: JhiDataUtils;
        <%_ } _%>
        const route = ({ data: of({ <%= entityInstance %>: new <%= entityAngularName %>(<%- tsKeyId %>) }) } as any) as ActivatedRoute;

        beforeEach(() => {
            TestBed.configureTestingModule({
                imports: [<%= angularXAppName %>TestModule],
                declarations: [<%= entityAngularName %>DetailComponent],
                providers: [
                    { provide: ActivatedRoute, useValue: route }
                ]
            })
            .overrideTemplate(<%= entityAngularName %>DetailComponent, '')
            .compileComponents();
            fixture = TestBed.createComponent(<%= entityAngularName %>DetailComponent);
            comp = fixture.componentInstance;
            <%_ if (fieldsContainBlob) { _%>
            dataUtils = fixture.debugElement.injector.get(JhiDataUtils);
            <%_ } _%>
        });

        describe('OnInit', () => {
            it('Should load <%= entityInstance %> on init', () => {
                // WHEN
                comp.ngOnInit();

                // THEN
                expect(comp.<%= entityInstance %>).toEqual(jasmine.objectContaining({ id: <%- tsKeyId %> }));
            });
        });

        <%_ if (fieldsContainBlob) { _%>
        describe('byteSize', () => {
            it('Should call byteSize from JhiDataUtils', () => {
                // GIVEN
                spyOn(dataUtils, 'byteSize');
                const fakeBase64 = 'fake base64';

                // WHEN
                comp.byteSize(fakeBase64);

                // THEN
                expect(dataUtils.byteSize).toBeCalledWith(fakeBase64);
            });
        });

        describe('openFile', () => {
            it('Should call openFile from JhiDataUtils', () => {
                // GIVEN
                spyOn(dataUtils, 'openFile');
                const fakeContentType = 'fake content type';
                const fakeBase64 = 'fake base64';

                // WHEN
                comp.openFile(fakeContentType, fakeBase64);

                // THEN
                expect(dataUtils.openFile).toBeCalledWith(fakeContentType, fakeBase64);
            });
        });
        <%_ } _%>
    });
});

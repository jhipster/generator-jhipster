import { entityItemSelector } from '../../support/commands';
import {
  entityTableSelector,
  entityDetailsButtonSelector,
  entityDetailsBackButtonSelector,
  <%_ if (!readOnly) { _%>
  entityCreateButtonSelector,
  entityCreateSaveButtonSelector,
  entityCreateCancelButtonSelector,
  entityEditButtonSelector,
  entityDeleteButtonSelector,
  entityConfirmDeleteButtonSelector,
  <%_ } _%>
} from '../../support/entity';
<%_
const baseApi = (applicationType === 'gateway' && locals.microserviceName) ? 'services/' + microserviceName.toLowerCase() + '/api/' : 'api/';

resetFakerSeed('entity-cypress');
const entityFakeData = generateFakeData('cypress');
const requiredRelationships = relationships.filter(rel => rel.relationshipRequired || rel.id);
// We cannot generate a required entity with required relationship.
const skipCreateTest = (requiredRelationships.length > 0 || !entityFakeData) ? '.skip' : '';
_%>

describe('<%= entityClass %> e2e test', () => {
  <%_ if (authenticationType === 'oauth2') { _%>
  beforeEach(() => {
    cy.getOauth2Data();
    cy.get('@oauth2Data').then(oauth2Data => {
      cy.oauthLogin(oauth2Data, Cypress.env('E2E_USERNAME') || "admin", Cypress.env('E2E_PASSWORD') || "admin");
    });
    cy.intercept('GET', '/<%= baseApi + entityApiUrl %>').as('entitiesRequest');
    cy.visit('');
    cy.get(entityItemSelector).should('exist');
  });

  afterEach(() => {
    cy.get('@oauth2Data').then(oauth2Data => {
      cy.oauthLogout(oauth2Data);
    });
    cy.clearCache();
  });
  <%_ } else { _%>
  before(() => {
    cy.window().then((win) => {
      win.sessionStorage.clear()
    });
    cy.visit('');
    cy.login('admin', 'admin');
    cy.get(entityItemSelector).should('exist');
  });
  <%_ } _%>

  beforeEach(() => {
    cy.intercept('DELETE', '/<%= baseApi + entityApiUrl %>/*').as('deleteEntityRequest');
    cy.intercept('POST', '/<%= baseApi + entityApiUrl %>').as('postEntityRequest');
    cy.intercept('GET', '/<%= baseApi + entityApiUrl %>').as('entitiesRequest');
  });

  it('should load <%= entityClassPlural %>', () => {
    cy.visit('/');
    cy.clickOnEntityMenuItem('<%= entityStateName %>');
    cy.wait('@entitiesRequest').then(({ response }) => {
      if (response.body.length === 0) {
        cy.get(entityTableSelector).should('not.exist');
      } else {
        cy.get(entityTableSelector).should('exist');
      }
    });;
    cy.getEntityHeading('<%= entityClass %>').should('exist');
    cy.url().should('match', /\/<%= entityUrl %>(\?.*)?$/);
  });

  it('should load details <%= entityClass %> page', function() {
    cy.visit('/<%= entityUrl %>');
    cy.wait('@entitiesRequest').then(({ response }) => {
      if (response.body.length === 0) {
        this.skip();
      }
    });;
    cy.get(entityDetailsButtonSelector).first().click({force: true});
    cy.getEntityDetailsHeading('<%= entityInstance %>');
    cy.get(entityDetailsBackButtonSelector).click({force: true});
    cy.wait('@entitiesRequest').then(({ response }) => {
      expect(response.statusCode).to.equal(200);
    });
    cy.url().should('match', /\/<%= entityUrl %>(\?.*)?$/);
  });

  <%_ if (!readOnly) { _%>
  it('should load create <%= entityClass %> page', () => {
    cy.visit('/<%= entityUrl %>');
    cy.wait('@entitiesRequest');
    cy.get(entityCreateButtonSelector).click({force: true});
    cy.getEntityCreateUpdateHeading('<%= entityClass %>');
    cy.get(entityCreateSaveButtonSelector).should('exist');
    cy.get(entityCreateCancelButtonSelector).click({force: true});
    cy.wait('@entitiesRequest').then(({ response }) => {
      expect(response.statusCode).to.equal(200);
    });
    cy.url().should('match', /\/<%= entityUrl %>(\?.*)?$/);
  });

  it('should load edit <%= entityClass %> page', function() {
    cy.visit('/<%= entityUrl %>');
    cy.wait('@entitiesRequest').then(({ response }) => {
      if (response.body.length === 0) {
        this.skip();
      }
    });;
    cy.get(entityEditButtonSelector).first().click({force: true});
    cy.getEntityCreateUpdateHeading('<%= entityClass %>');
    cy.get(entityCreateSaveButtonSelector).should('exist');
    cy.get(entityCreateCancelButtonSelector).click({force: true});
    cy.wait('@entitiesRequest').then(({ response }) => {
      expect(response.statusCode).to.equal(200);
    });
    cy.url().should('match', /\/<%= entityUrl %>(\?.*)?$/);
  });

  it<%= skipCreateTest %>('should create an instance of <%= entityClass %>', () => {
    cy.visit('/<%= entityUrl %>');
    cy.get(entityCreateButtonSelector).click({force: true});
    cy.getEntityCreateUpdateHeading('<%= entityClass %>');
    <%_ fields.filter(field => (!field.id || !field.autoGenerate) && !field.hidden).forEach((field) => {
      const fieldName = field.fieldName;
      const fieldNameCapitalized = field.fieldNameCapitalized;
      const fieldType = field.fieldType;
      const fieldTypeBlobContent = field.fieldTypeBlobContent;
      const fieldIsEnum = field.fieldIsEnum;
      const fieldValue = !entityFakeData ? field.generateFakeData('cypress') : entityFakeData[field.fieldName];
      if (fieldValue === undefined) {
          warning(`Error generating a value for field ${fieldName}`);
          return;
      }
    _%>

    <%_ if (['Instant', 'ZonedDateTime'].includes(fieldType)) { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>').invoke('val').should('equal', '<%= fieldValue %>');

    <%_ } else if (fieldType === 'Duration' && clientFramework === 'react') { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('PT12S').should('have.value', 'PT12S');

    <%_ } else if (fieldType === 'Duration' && clientFramework !== 'react') { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('PT12S').should('have.value', 'PT12S');

    <%_ } else if (fieldType === 'Boolean') { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).should('not.be.checked');
    cy.get(`[data-cy="<%= fieldName %>"]`).click().should('be.checked');
    <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType) && fieldTypeBlobContent === 'text') { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>', { force: true }).invoke('val').should('match', new RegExp('<%= fieldValue %>'));

    <%_ } else if (['byte[]', 'ByteBuffer'].includes(fieldType)) { _%>
    cy.setFieldImageAsBytesOfEntity('<%= fieldName %>', 'integration-test.png', 'image/png');

    <%_ } else if (fieldIsEnum) { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).select('<%= fieldValue %>');

    <%_ } else if (fieldType === 'UUID'){ _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>').invoke('val').should('match', new RegExp('<%= fieldValue %>'));

    <%_ } else if(['Integer', 'Long', 'Float', 'Double', 'BigDecimal', 'LocalDate', ].includes(fieldType)) { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>').should('have.value', '<%= fieldValue %>');

    <%_ } else { _%>
    cy.get(`[data-cy="<%= fieldName %>"]`).type('<%= fieldValue %>', { force: true }).invoke('val').should('match', new RegExp('<%= fieldValue %>'));

    <%_ } _%>
    <%_ }); _%>
    <%_ relationships.forEach((relationship) => {
      const relationshipType = relationship.relationshipType;
      const ownerSide = relationship.ownerSide;
      const relationshipName = relationship.relationshipName;
      const relationshipNameCapitalized = relationship.relationshipNameCapitalized;_%>
    <%_ if (relationshipType === 'many-to-one' || (relationshipType === 'one-to-one' && ownerSide === true)) { _%>
    cy.setFieldSelectToLastOfEntity('<%= relationshipName %>');

    <%_ } else if ((relationshipType === 'many-to-many' && ownerSide === true)) { _%>
    cy.setFieldSelectToLastOfEntity('<%= relationshipName %>');

    <%_ } _%>
    <%_ }); _%>
    cy.get(entityCreateSaveButtonSelector).click({force: true});
    cy.scrollTo('top', {ensureScrollable: false});
    cy.get(entityCreateSaveButtonSelector).should('not.exist');
    cy.wait('@postEntityRequest').then(({ response }) => {
      expect(response.statusCode).to.equal(201);
    });
    cy.wait('@entitiesRequest').then(({ response }) => {
      expect(response.statusCode).to.equal(200);
    });
    cy.url().should('match', /\/<%= entityUrl %>(\?.*)?$/);
  });

  it<%= skipCreateTest %>('should delete last instance of <%= entityClass %>', function() {
    <%_ if (clientFramework === 'react') { _%>
    cy.intercept('GET', '/<%= baseApi + entityApiUrl %>/*').as('dialogDeleteRequest');
    <%_ } _%>
    cy.visit('/<%= entityUrl %>');
    cy.wait('@entitiesRequest').then(({ response }) => {
      if (response.body.length > 0) {
        cy.get(entityTableSelector).should('have.lengthOf', response.body.length);
        cy.get(entityDeleteButtonSelector).last().click({force: true});
        <%_ if (clientFramework === 'react') { _%>
        cy.wait('@dialogDeleteRequest');
        <%_ } _%>
        cy.getEntityDeleteDialogHeading('<%= entityInstance %>').should('exist');
        cy.get(entityConfirmDeleteButtonSelector).click({force: true});
        cy.wait('@deleteEntityRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(204);
        });
        cy.wait('@entitiesRequest').then(({ response }) => {
          expect(response.statusCode).to.equal(200);
        });
        cy.url().should('match', /\/<%= entityUrl %>(\?.*)?$/);
      } else {
        this.skip();
      }
    });
  });
  <%_ } _%>
});

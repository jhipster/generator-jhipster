<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import { element, by, ElementFinder<% if (fieldsContainInstant || fieldsContainZonedDateTime) { %>, protractor<% } %> } from 'protractor';
import {waitUntilDisplayed, waitUntilHidden, isVisible} from '../../<%= entityParentPathAddition %>util/utils';

<%_ if (fieldsContainBlobOrImage && !readOnly) { _%>
import path from 'path';
<%_ } _%>

const expect = chai.expect;

<%_
let elementGetter = `getText()`;
let openBlockComment = ``;
let closeBlockComment = ``;
if (enableTranslation) {
    elementGetter = `getAttribute('${jhiPrefix}Translate')`;
}
for (let relationship of relationships) {
  if (relationship.relationshipRequired) {
    openBlockComment = `/*`;
    closeBlockComment = `*/`;
    break;
  }
} _%>
<%_ if (fieldsContainBlobOrImage) { _%>
const fileToUpload = '../../../../../../<%= entityParentPathAddition %><%= CLIENT_MAIN_SRC_DIR %>content/images/logo-jhipster.png';
const absolutePath = path.resolve(__dirname, fileToUpload);
<%_ } _%>
export default class <%= entityClass %>UpdatePage {
    pageTitle: ElementFinder = element(by.id('<%= i18nKeyPrefix %>.home.createOrEditLabel'));
    saveButton: ElementFinder = element(by.id('save-entity'));
    cancelButton: ElementFinder = element(by.id('cancel-save'));
<%_ fields.filter(field => !field.id).forEach((field) => {
        const fieldName = field.fieldName;
        const fieldIsEnum = field.fieldIsEnum;
_%>
  <%_ if (fieldIsEnum) { _%>
    <%= fieldName %>Select: ElementFinder = element(by.css('select#<%= entityFileName %>-<%= fieldName %>'));
  <%_ } else if (field.fieldTypeBinary && field.blobContentTypeText) { _%>
    <%= fieldName %>Input: ElementFinder = element(by.css('textarea#<%= entityFileName %>-<%= fieldName %>'));
  <%_ } else { _%>
    <%= fieldName %>Input: ElementFinder = element(by.css('input#<%= entityFileName %>-<%= fieldName %>'));
  <%_ } _%>
<%_ }); _%>
<%_ relationships.forEach((relationship) => {
    const ownerSide = relationship.ownerSide;
    const relationshipName = relationship.relationshipName; _%>
  <%_ if (ownerSide) { _%>
    <%= relationshipName %>Select: ElementFinder = element(by.css('select#<%= entityFileName %>-<%= relationshipName %>'));
  <%_ } _%>
<%_ }); _%>

    getPageTitle() {
        return this.pageTitle;
    }

<%_ fields.filter(field => !field.id).forEach((field) => {
        const fieldName = field.fieldName;
        const fieldNameCapitalized = field.fieldNameCapitalized;
        const fieldIsEnum = field.fieldIsEnum;
_%>
  <%_ if (field.fieldTypeBoolean) { _%>
    get<%= fieldNameCapitalized %>Input() {
        return this.<%= fieldName %>Input;
    }
  <%_ } else if (fieldIsEnum) { _%>
    async set<%= fieldNameCapitalized %>Select(<%= fieldName %>) {
        await this.<%= fieldName %>Select.sendKeys(<%= fieldName %>);
    }

    async get<%= fieldNameCapitalized %>Select() {
        return this.<%= fieldName %>Select.element(by.css('option:checked')).getText();
    }

    async <%= fieldName %>SelectLastOption() {
        await this.<%= fieldName %>Select.all(by.tagName('option')).last().click();
    }
  <%_ } else if (field.fieldTypeBinary && field.blobContentTypeText) { _%>
    async set<%= fieldNameCapitalized %>Input(<%= fieldName %>) {
        await this.<%= fieldName %>Input.sendKeys(<%= fieldName %>);
    }

    async get<%= fieldNameCapitalized %>Input() {
        return this.<%= fieldName %>Input.getAttribute('value');
    }

  <%_ } else { _%>
    async set<%= fieldNameCapitalized %>Input(<%= fieldName %>) {
        await this.<%= fieldName %>Input.sendKeys(<%= fieldName %>);
    }

    async get<%= fieldNameCapitalized %>Input() {
        return this.<%= fieldName %>Input.getAttribute('value');
    }

  <%_ } _%>
<%_ }); _%>
<%_ relationships.forEach((relationship) => {
    const ownerSide = relationship.ownerSide;
    const relationshipName = relationship.relationshipName;
    const relationshipNameCapitalized = relationship.relationshipNameCapitalized; _%>
  <%_ if (ownerSide) { _%>
    async <%= relationshipName %>SelectLastOption() {
        await this.<%= relationshipName %>Select.all(by.tagName('option')).last().click();
    }

    async <%= relationshipName %>SelectOption(option) {
        await this.<%= relationshipName %>Select.sendKeys(option);
    }

    get<%= relationshipNameCapitalized %>Select() {
        return this.<%= relationshipName %>Select;
    }

    async get<%= relationshipNameCapitalized %>SelectedOption() {
        return this.<%= relationshipName %>Select.element(by.css('option:checked')).getText();
    }

  <%_ } _%>
<%_ }); _%>
    async save() {
        await this.saveButton.click();
    }

    async cancel() {
        await this.cancelButton.click();
    }

    getSaveButton() {
        return this.saveButton;
    }

    async enterData() {
<%_ fields.filter(field => !field.id).forEach((field) => {
    const fieldName = field.fieldName;
    const fieldNameCapitalized = field.fieldNameCapitalized;
    const fieldIsEnum = field.fieldIsEnum;
    const fieldValidateSampleString = field.fieldValidateSampleString;
_%>
        await waitUntilDisplayed(this.saveButton);
  <%_ if (field.fieldTypeNumeric) { _%>
        await this.set<%= fieldNameCapitalized %>Input('5');
  <%_ } else if (field.fieldTypeLocalDate) { _%>
        await this.set<%= fieldNameCapitalized %>Input('01-01-2001');
  <%_ } else if (field.fieldTypeTimed) { _%>
        await this.set<%= fieldNameCapitalized %>Input('01/01/2001' + protractor.Key.TAB + '02:30AM');
  <%_ } else if (field.fieldTypeDuration) { _%>
        await this.set<%= fieldNameCapitalized %>Input('PT12S');
  <%_ } else if (field.fieldTypeBoolean) { _%>
        const selected<%= fieldNameCapitalized %> = await this.get<%= fieldNameCapitalized %>Input().isSelected();
        if (selected<%= fieldNameCapitalized %>) {
            await this.get<%= fieldNameCapitalized %>Input().click();
        } else {
            await this.get<%= fieldNameCapitalized %>Input().click();
        }
  <%_ } else if (field.fieldTypeBinary && field.blobContentTypeText) { _%>
        await this.set<%= fieldNameCapitalized %>Input('<%= fieldName %>');
  <%_ } else if (field.fieldTypeBinary) { _%>
        await this.set<%= fieldNameCapitalized %>Input(absolutePath);
  <%_ } else if (fieldIsEnum) { _%>
        await this.<%= fieldName %>SelectLastOption();
  <%_ } else if (field.fieldTypeUUID) { _%>
        await this.set<%= fieldNameCapitalized %>Input('64c99148-3908-465d-8c4a-e510e3ade974');
  <%_ } else if (field.fieldTypeString && fieldValidateSampleString) { _%>
        await this.set<%= fieldNameCapitalized %>Input('<%= fieldValidateSampleString %>');
  <%_ } else { _%>
        await this.set<%= fieldNameCapitalized %>Input('<%= fieldName %>');
  <%_ } _%>
<%_ }); _%>
<%_ relationships.forEach((relationship) => {
  const ownerSide = relationship.ownerSide;
  const relationshipName = relationship.relationshipName; _%>
  <%_ if (relationship.relationshipManyToOne || (relationship.relationshipOneToOne && ownerSide)) { _%>
        await this.<%= relationshipName %>SelectLastOption();
  <%_ } else if (relationship.relationshipManyToMany && ownerSide) { _%>
        // this.<%= relationshipName %>SelectLastOption();
  <%_ } _%>
<%_ }); _%>
        await this.save();
        await waitUntilHidden(this.saveButton);
    }
}

rootProject.name=<%= dasherizedBaseName %>
profile=dev
assertj_core_version=3.5.2
awaility_version=1.7.0
<%_ if (databaseType === 'cassandra' || applicationType === 'gateway') { _%>
commons_codec_version=1.10
<%_ } _%>
commons_lang_version=3.4
commons_io_version=2.5<% if (databaseType == 'cassandra') { %>
cassandra_unit_spring_version=3.0.0.1<% } %><% if (cucumberTests) { %>
cucumber_version=1.2.4<% } %>
dropwizard_metrics_version=3.1.2
logstash_logback_encoder_version=4.7
<% if (databaseType == 'cassandra' || applicationType == 'gateway') { %>
datastax_driver_version=3.0.1<% } %>
javax_transaction_version=1.2
json_path_version=0.9.1
jackson_version=2.7.3
jhipster_server_version=0.0.7<% if (authenticationType == 'jwt') { %>
jjwt_version=0.7.0<% } %><% if (searchEngine == 'elasticsearch') { %>
jna_version=4.2.2<% } %>
jhipster_library_version=0.0.7
geronimo_javamail_1_4_mail_version=1.8.4<% if (clusteredHttpSession == 'hazelcast' || hibernateCache == 'hazelcast') { %>
hazelcast_version=3.7<% } %><% if (hibernateCache == 'hazelcast') { %>
hazelcast_hibernate_version=1.1.1<% } %><% if (hibernateCache === 'ehcache' || hibernateCache === 'hazelcast') { %>
jcache_version=1.0.0<% } %>
hibernate_version=5.2.4.Final<% if (databaseType == 'sql') { %>
liquibase_slf4j_version=2.0.0
liquibase_core_version=3.4.2
liquibase_hibernate5_version=3.6<% } %><% if (databaseType == 'mongodb') { %>
mongobee_version=0.10<% } %>
hibernate_validator_version=5.3.3.Final<% if (databaseType == 'cassandra' || applicationType == 'gateway') { %>
lz4_version=1.3.0<% } %>
metrics_spring_version=3.1.2
prometheus_simpleclient_version=0.0.18<% if (devDatabaseType == 'postgresql' || prodDatabaseType == 'postgresql') { %>
postgresql_version=9.4.1212<% } %><% if (authenticationType == 'oauth2') { %>
spring_security_oauth2_version=2.0.12.RELEASE<% } %>
spring_security_version=4.2.1.RELEASE
springfox_version=2.6.1
spring_boot_version=1.4.3.RELEASE
<%_ if (applicationType == 'microservice' || applicationType == 'gateway' || applicationType == 'uaa') { _%>
spring_cloud_version=Brixton.SR7
<%_ } _%>
<%_ if (messageBroker === 'kafka') { _%>
spring_cloud_stream_version=Brooklyn.RELEASE
<%_ } _%>
<%_ if (devDatabaseType == 'mysql' || prodDatabaseType == 'mysql') { _%>
mysql_connector_java_version=5.1.36
<%_ } _%>
<%_ if (devDatabaseType === 'mariadb' || prodDatabaseType === 'mariadb') { _%>
mariadb_java_client_version=1.4.4
<%_ } _%>
<%_ if (devDatabaseType === 'mssql' || prodDatabaseType === 'mssql') { _%>
mssql_jdbc_driver_version=6.1.0.jre8
liquibase_mssql_version=1.5
<%_ } _%>
h2_version=1.4.188
<% if (gatlingTests) { %>
gatling_version=2.2.0<% } %>
mapstruct_version=1.1.0.Final<% if (enableSocialSignIn) { %>
spring_social_google_version=1.0.0.RELEASE<% } %>

## below are some of the gradle performance improvement settings that can be used as required, these are not enabled by default

## The Gradle daemon aims to improve the startup and execution time of Gradle.
## The daemon is enabled by default in Gradle 3+ setting this to false will disable this.
## TODO: disable daemon on CI, since builds should be clean and reliable on servers
## https://docs.gradle.org/current/userguide/gradle_daemon.html#sec:ways_to_disable_gradle_daemon
## un comment the below line to disable the daemon

#org.gradle.daemon=false

## Specifies the JVM arguments used for the daemon process.
## The setting is particularly useful for tweaking memory settings.
## Default value: -Xmx1024m -XX:MaxPermSize=256m
## un comment the below line to override the daemon defaults

#org.gradle.jvmargs=-Xmx1024m -XX:MaxPermSize=256m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8

## When configured, Gradle will run in incubating parallel mode.
## This option should only be used with decoupled projects. More details, visit
## http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
## un comment the below line to enable parallel mode

#org.gradle.parallel=true

## Enables new incubating mode that makes Gradle selective when configuring projects.
## Only relevant projects are configured which results in faster builds for large multi-projects.
## http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:configuration_on_demand
## un comment the below line to enable the selective mode

#org.gradle.configureondemand=true

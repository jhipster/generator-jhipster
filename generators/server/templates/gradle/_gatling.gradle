apply plugin: 'scala'

sourceSets {
    test {
        scala {
            srcDirs = ['<%= TEST_DIR %>gatling/simulations']
            output.classesDir = 'target/test-classes'
        }
    }
}

task manifestJar(dependsOn:'compileTestScala',type: Jar) {
    dependsOn configurations.testCompile
    archiveName 'gatlingBooter.jar'
    doFirst {
        manifest {
            // uri is just needed for Windows-compatibility
            attributes 'Class-Path': configurations.testCompile.files.collect{ project.uri(it) }.join(' ')
        }
    }
}

task gatlingRun(dependsOn:'manifestJar') << {
    group = "gatling"

    def String gatlingSimulationClass = "*"
    if (project.hasProperty('gatlingSimulationClass')) {
        gatlingSimulationClass = project.property('gatlingSimulationClass')
    }

    createGatlingRunTask(gatlingSimulationClassName).dependsOn('manifestJar').execute()
}

task gatlingRunAll(dependsOn: 'manifestJar') << {
    group = "gatling"

    FileTree tree = fileTree(dir: './src/test/gatling/simulations')
    tree.include '**/*.scala'
    tree.each {File file ->
        def simulationClassName = file.name.replaceFirst(".scala", "")
        createGatlingRunTask(simulationClassName).dependsOn('manifestJar').execute();
    }
}

def createGatlingRunTask(def gatlingSimulationClassName) {
    return tasks.create("gatlingRun${gatlingSimulationClassName}", JavaExec) {

        standardInput = System.in

        final def sourceSet = sourceSets.test

        def String gatlingDataFolder = "$project.rootDir.absolutePath/src/test/gatling/data"
        def String gatlingReportsFolder = "$project.buildDir.absolutePath/reports/gatling"
        def String gatlingBodiesFolder = "$project.rootDir.absolutePath/src/test/gatling/bodies"
        def String gatlingSimulationsFolder = "$project.rootDir.absolutePath/src/test/gatling/simulations"

        classpath sourceSet.output + files(manifestJar.archivePath) + files("src/test/gatling/conf")
        main = "io.gatling.app.Gatling"

        environment GATLING_HOME:''

        args '-df', gatlingDataFolder
        args '-rf', gatlingReportsFolder
        args '-bdf', gatlingBodiesFolder
        args '-sf', gatlingSimulationsFolder
        args '-m'
        args '-s', gatlingSimulationClassName
    }
}

<%#
 Copyright 2013-2017 the original author or authors.

 This file is part of the JHipster project, see https://jhipster.github.io/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
apply plugin: 'org.springframework.boot'
<%_ if(!skipClient) { _%>
apply plugin: 'com.moowork.node'
    <%_ if (clientFramework === 'angular1') { _%>
apply plugin: 'com.moowork.gulp'
    <%_ } _%>
<%_ } _%>

ext {
    logbackLoglevel = "INFO"
}

dependencies {

}

def profiles = 'prod'
if (project.hasProperty('no-liquibase')) {
    profiles += ',no-liquibase'
}

if (project.hasProperty('swagger')) {
    profiles += ',swagger'
}

bootRun {
    args = []
}

<%_ if (!skipClient) { _%>
    <%_ if (clientFramework === 'angular1') { _%>
task gulpBuildWithOpts(type: GulpTask) {
    args = ["build", "--no-notification"]
}
    <%_ } else { _%>

task webpack_test(type: <%= clientPackageManager.charAt(0).toUpperCase() + clientPackageManager.slice(1) %>Task, dependsOn: '<%= clientPackageManager %>_install') {
    args = ["run", "webpack:test"]
}

task webpack(type: <%= clientPackageManager.charAt(0).toUpperCase() + clientPackageManager.slice(1) %>Task, dependsOn: '<%= clientPackageManager %>_install') {
    args = ["run", "webpack:prod"]
}
    <%_ } _%>

war {
    webAppDirName = '<%= CLIENT_DIST_DIR %>'
}
<%_ } _%>

processResources {
    filesMatching('**/logback-spring.xml') {
        filter {
            it.replace('#logback.loglevel#', logbackLoglevel)
        }
    }
    <%_ if (applicationType === 'monolith') { _%>
    filesMatching('**/application.yml') {
    <%_ } _%>
    <%_ if (applicationType === 'microservice' || applicationType === 'gateway' || applicationType === 'uaa') { _%>
    filesMatching('**/bootstrap.yml') {
    <%_ } _%>
        filter {
            it.replace('#spring.profiles.active#', profiles)
        }
        filter {
            it.replace('#project.version#', version)
        }
    }
}

<%_ if (!skipClient) { _%>
    <%_ if (clientFramework === 'angular1') { _%>
        <%_ if (clientPackageManager === 'yarn') { _%>
// Workaround for https://github.com/srs/gradle-node-plugin/issues/134 doesn't work with yarn
if (!project.hasProperty('nodeInstall')) {
    gulpBuildWithOpts.dependsOn yarn_install
} else {
    gulpBuildWithOpts.dependsOn npm_install
}
        <%_ }Â else if (clientPackageManager === 'npm') { _%>
gulpBuildWithOpts.dependsOn npm_install
        <%_ } _%>
gulpBuildWithOpts.dependsOn bower
processResources.dependsOn gulpBuildWithOpts
test.dependsOn gulp_test
test.dependsOn webpack_test
bootRun.dependsOn gulp_test
    <%_ } else { _%>
processResources.dependsOn webpack
    <%_ } _%>
<%_ } _%>

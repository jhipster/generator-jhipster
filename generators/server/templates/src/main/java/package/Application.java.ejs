<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>;

<%_ if (applicationType === 'microservice' && authenticationType === 'uaa') { _%>
import <%=packageName%>.client.OAuth2InterceptedFeignConfiguration;
<%_ } _%>
import <%=packageName%>.config.ApplicationProperties;
import <%=packageName%>.config.DefaultProfileUtil;

<%_ if (messageBroker === 'kafka') { _%>
import <%=packageName%>.service.<%= upperFirstCamelCase(baseName) %>KafkaConsumer;
import <%=packageName%>.service.<%= upperFirstCamelCase(baseName) %>KafkaProducer;
import org.springframework.context.ConfigurableApplicationContext;
<%_ } _%>
import io.github.jhipster.config.JHipsterConstants;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.InitializingBean;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
<%_ if (databaseType === 'sql') { _%>
import org.springframework.boot.autoconfigure.liquibase.LiquibaseProperties;
<%_ } _%>
import org.springframework.boot.context.properties.EnableConfigurationProperties;
<%_ if (serviceDiscoveryType) { _%>
import org.springframework.cloud.client.discovery.EnableDiscoveryClient;
<%_ } _%>
<%_ if (applicationType === 'gateway' && serviceDiscoveryType) { _%>
import org.springframework.cloud.netflix.zuul.EnableZuulProxy;
<%_ } _%>
<%_ if (applicationType === 'microservice' && authenticationType === 'uaa') { _%>
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.FilterType;
<%_ } _%>
import org.springframework.core.env.Environment;

import java.net.InetAddress;
import java.net.UnknownHostException;
import java.util.Arrays;
import java.util.Collection;

<%_ if (applicationType === 'microservice' && authenticationType === 'uaa') { _%>
@ComponentScan(
    excludeFilters = @ComponentScan.Filter(type = FilterType.ASSIGNABLE_TYPE, classes = OAuth2InterceptedFeignConfiguration.class)
)
<%_ } _%>
@SpringBootApplication
@EnableConfigurationProperties({<% if (databaseType === 'sql') { %>LiquibaseProperties.class, <% } %>ApplicationProperties.class})
<%_ if (serviceDiscoveryType) { _%>
@EnableDiscoveryClient
<%_ } _%>
<%_ if (applicationType === 'gateway' && serviceDiscoveryType) { _%>
@EnableZuulProxy
<%_ } _%>
public class <%= mainClass %> implements InitializingBean {

    private static final Logger log = LoggerFactory.getLogger(<%= mainClass %>.class);

    private final Environment env;

    public <%= mainClass %>(Environment env) {
        this.env = env;
    }

    /**
     * Initializes <%= baseName %>.
     * <p>
     * Spring profiles can be configured with a program argument --spring.profiles.active=your-active-profile
     * <p>
     * You can find more information on how profiles work with JHipster on <a href="https://www.jhipster.tech/profiles/">https://www.jhipster.tech/profiles/</a>.
     */
    @Override
    public void afterPropertiesSet() throws Exception {
        Collection<String> activeProfiles = Arrays.asList(env.getActiveProfiles());
        if (activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_PRODUCTION)) {
            log.error("You have misconfigured your application! It should not run " +
                "with both the 'dev' and 'prod' profiles at the same time.");
        }
        if (activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT) && activeProfiles.contains(JHipsterConstants.SPRING_PROFILE_CLOUD)) {
            log.error("You have misconfigured your application! It should not " +
                "run with both the 'dev' and 'cloud' profiles at the same time.");
        }
    }

    /**
     * Main method, used to run the application.
     *
     * @param args the command line arguments.
     */
    public static void main(String[] args) {
        SpringApplication app = new SpringApplication(<%= mainClass %>.class);
        DefaultProfileUtil.addDefaultProfile(app);
<%_ if (messageBroker === 'kafka') { _%>
        ConfigurableApplicationContext applicationContext = app.run(args);
        applicationContext.getBean(<%= upperFirstCamelCase(baseName) %>KafkaProducer.class).init();
        applicationContext.getBean(<%= upperFirstCamelCase(baseName) %>KafkaConsumer.class).start();
        Environment env = applicationContext.getEnvironment();
<%_ } else {_%>
        Environment env = app.run(args).getEnvironment();
<%_ } _%>
        logApplicationStartup(env);
    }

    private static void logApplicationStartup(Environment env) {
        String protocol = "http";
        if (env.getProperty("server.ssl.key-store") != null) {
            protocol = "https";
        }
        String serverPort = env.getProperty("server.port");
        String contextPath = env.getProperty("server.servlet.context-path");
        if (StringUtils.isBlank(contextPath)) {
            contextPath = "/";
        }
        String hostAddress = "localhost";
        try {
            hostAddress = InetAddress.getLocalHost().getHostAddress();
        } catch (UnknownHostException e) {
            log.warn("The host name could not be determined, using `localhost` as fallback");
        }
        log.info("\n----------------------------------------------------------\n\t" +
                "Application '{}' is running! Access URLs:\n\t" +
                "Local: \t\t{}://localhost:{}{}\n\t" +
                "External: \t{}://{}:{}{}\n\t" +
                "Profile(s): \t{}\n----------------------------------------------------------",
            env.getProperty("spring.application.name"),
            protocol,
            serverPort,
            contextPath,
            protocol,
            hostAddress,
            serverPort,
            contextPath,
            env.getActiveProfiles());
        <%_ if (serviceDiscoveryType && (applicationType === 'microservice' || applicationType === 'gateway' || applicationType === 'uaa')) { _%>

        String configServerStatus = env.getProperty("configserver.status");
        if (configServerStatus == null) {
            configServerStatus = "Not found or not setup for this application";
        }
        log.info("\n----------------------------------------------------------\n\t" +
                "Config Server: \t{}\n----------------------------------------------------------", configServerStatus);
        <%_ } _%>
    }
}

<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config;

import com.datastax.oss.driver.api.core.data.TupleValue;
import com.datastax.oss.driver.api.core.type.DataTypes;
import com.datastax.oss.driver.api.core.type.TupleType;
import io.github.jhipster.config.JHipsterConstants;
<%_ if (applicationType === 'gateway' && databaseType !== 'cassandra') { _%>
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
<%_ } _%>
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Profile;
import org.springframework.core.convert.converter.Converter;
import org.springframework.data.cassandra.core.convert.CassandraCustomConversions;
import org.springframework.data.convert.ReadingConverter;
import org.springframework.data.convert.WritingConverter;

import javax.annotation.Nonnull;
import java.time.Instant;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.ArrayList;
import java.util.List;

@Configuration<% if (applicationType === 'gateway' && databaseType !== 'cassandra') { %>
@ConditionalOnProperty("jhipster.gateway.rate-limiting.enabled")<% } %>
public class CassandraConfiguration {

    @Bean
    public CassandraCustomConversions cassandraCustomConversions() {
        List<Converter<?, ?>> converters = new ArrayList<>();
        converters.add(new TupleToZonedDateTimeConverter());
        converters.add(new ZonedDateTimeToTupleConverter());
        return new CassandraCustomConversions(converters);
    }

    @ReadingConverter
    class TupleToZonedDateTimeConverter implements Converter<TupleValue, ZonedDateTime> {
        @Override
        public ZonedDateTime convert(TupleValue source) {
            Instant instant = source.getInstant(0);
            ZoneId zoneId = ZoneId.of(source.getString(1));
            return instant.atZone(zoneId);
        }
    }

    @WritingConverter
    class ZonedDateTimeToTupleConverter implements Converter<ZonedDateTime, TupleValue> {
        private TupleType type = DataTypes.tupleOf(DataTypes.TIMESTAMP, DataTypes.ASCII);

        @Override
        public TupleValue convert(@Nonnull ZonedDateTime source) {
            TupleValue tupleValue = type.newValue();
            tupleValue.setInstant(0, source.toInstant());
            tupleValue.setString(1, source.getZone().toString());
            return tupleValue;
        }
    }

}

<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.config;

import <%= packageName %>.security.AuthoritiesConstants;
<%_ if (authenticationType === 'jwt') { _%>
import <%= packageName %>.security.jwt.JWTFilter;
import <%= packageName %>.security.jwt.TokenProvider;
<%_ } _%>
<%_ if (authenticationType === 'session') { _%>
    <%_ if (!skipUserManagement) { _%>
import <%= packageName %>.service.AuditEventService;
    <%_ } _%>
import io.github.jhipster.web.filter.reactive.CookieCsrfFilter;
<%_ } _%>
<%_ if (skipUserManagement) { _%>
import org.springframework.boot.autoconfigure.security.SecurityProperties;
<%_ } _%>
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.context.annotation.Import;
import org.springframework.http.HttpMethod;
<%_ if (authenticationType === 'session') { _%>
import org.springframework.http.HttpStatus;
<%_ } _%>
import org.springframework.security.authentication.ReactiveAuthenticationManager;
import org.springframework.security.authentication.UserDetailsRepositoryReactiveAuthenticationManager;
import org.springframework.security.config.annotation.method.configuration.EnableReactiveMethodSecurity;
import org.springframework.security.config.annotation.web.reactive.EnableWebFluxSecurity;
import org.springframework.security.config.web.server.SecurityWebFiltersOrder;
import org.springframework.security.config.web.server.ServerHttpSecurity;
<%_ if (authenticationType === 'session') { _%>
import org.springframework.security.core.Authentication;
import org.springframework.security.core.AuthenticationException;
<%_ } _%>
<%_ if (skipUserManagement) { _%>
import org.springframework.security.core.userdetails.MapReactiveUserDetailsService;
<%_ } _%>
import org.springframework.security.core.userdetails.ReactiveUserDetailsService;
<%_ if (authenticationType === 'session' || skipUserManagement) { _%>
import org.springframework.security.core.userdetails.User;
<%_ } _%>
<%_ if (skipUserManagement) { _%>
import org.springframework.security.core.userdetails.UserDetails;
<%_ } _%>
<%_ if (!skipUserManagement) { _%>
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
<%_ } _%>
import org.springframework.security.web.server.SecurityWebFilterChain;
<%_ if (authenticationType === 'session') { _%>
import org.springframework.security.web.server.WebFilterExchange;
import org.springframework.security.web.server.authentication.HttpStatusServerEntryPoint;
import org.springframework.security.web.server.authentication.logout.HttpStatusReturningServerLogoutSuccessHandler;
import org.springframework.security.web.server.csrf.CookieServerCsrfTokenRepository;
<%_ } _%>
import org.springframework.security.web.server.util.matcher.NegatedServerWebExchangeMatcher;
import org.springframework.security.web.server.util.matcher.OrServerWebExchangeMatcher;
<%_ if (skipUserManagement) { _%>
import org.springframework.util.StringUtils;
<%_ } _%>
import org.zalando.problem.spring.webflux.advice.security.SecurityProblemSupport;
<%_ if (authenticationType === 'session') { _%>
import reactor.core.publisher.Mono;
<%_ } _%>

import static org.springframework.security.web.server.util.matcher.ServerWebExchangeMatchers.pathMatchers;

@Configuration
@EnableWebFluxSecurity
@EnableReactiveMethodSecurity
@Import(SecurityProblemSupport.class)
public class SecurityConfiguration {

    <%_ if (!skipUserManagement) { _%>
    private final ReactiveUserDetailsService userDetailsService;

    <%_ } _%>
    <%_ if (authenticationType === 'jwt') { _%>
    private final TokenProvider tokenProvider;

    <%_ } _%>
    <%_ if (authenticationType === 'session' && !skipUserManagement) { _%>
    private final AuditEventService auditEventService;

    <%_ } _%>
    private final SecurityProblemSupport problemSupport;

    public SecurityConfiguration(<% if (!skipUserManagement) { %>ReactiveUserDetailsService userDetailsService, <% } %><% if (authenticationType === 'jwt') { %>TokenProvider tokenProvider,  <% } %><% if (authenticationType === 'session' && !skipUserManagement) { %>AuditEventService auditEventService, <% } %>SecurityProblemSupport problemSupport) {
        <%_ if (!skipUserManagement) { _%>
        this.userDetailsService = userDetailsService;
        <%_ } _%>
        <%_ if (authenticationType === 'jwt') { _%>
        this.tokenProvider = tokenProvider;
        <%_ } _%>
        <%_ if (authenticationType === 'session' && !skipUserManagement) { _%>
        this.auditEventService = auditEventService;
        <%_ } _%>
        this.problemSupport = problemSupport;
    }

    <%_ if (!skipUserManagement) { _%>
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public ReactiveAuthenticationManager reactiveAuthenticationManager() {
        UserDetailsRepositoryReactiveAuthenticationManager authenticationManager = new UserDetailsRepositoryReactiveAuthenticationManager(userDetailsService);
        authenticationManager.setPasswordEncoder(passwordEncoder());
        return authenticationManager;
    }

    <%_ } else { _%>
    @Bean
    public MapReactiveUserDetailsService userDetailsService(SecurityProperties properties) {
        SecurityProperties.User user = properties.getUser();
        UserDetails userDetails = User
            .withUsername(user.getName())
            .password("{noop}" + user.getPassword())
            .roles(StringUtils.toStringArray(user.getRoles()))
            .build();
        return new MapReactiveUserDetailsService(userDetails);
    }

    @Bean
    public ReactiveAuthenticationManager reactiveAuthenticationManager(ReactiveUserDetailsService userDetailsService) {
        return new UserDetailsRepositoryReactiveAuthenticationManager(userDetailsService);
    }

    <%_ } _%>
    @Bean
    public SecurityWebFilterChain springSecurityFilterChain(ServerHttpSecurity http) {
        // @formatter:off
        http
            .securityMatcher(new NegatedServerWebExchangeMatcher(new OrServerWebExchangeMatcher(
                pathMatchers("/app/**", "/i18n/**", "/content/**", "/swagger-ui/index.html", "/test/**"),
                pathMatchers(HttpMethod.OPTIONS, "/**")
            )))
            .csrf()
            <%_ if (['session','oauth2'].includes(authenticationType) && applicationType !== 'microservice') { _%>
            .csrfTokenRepository(CookieServerCsrfTokenRepository.withHttpOnlyFalse())
        .and()
            // See https://github.com/spring-projects/spring-security/issues/5766
            .addFilterAt(new CookieCsrfFilter(), SecurityWebFiltersOrder.REACTOR_CONTEXT)
            <%_ } else { _%>
            .disable()
            <%_ } _%>
            <%_ if (authenticationType === 'jwt') { _%>
            .addFilterAt(new JWTFilter(tokenProvider), SecurityWebFiltersOrder.HTTP_BASIC)
            <%_ } _%>
            <%_ if (!skipUserManagement) { _%>
            .authenticationManager(reactiveAuthenticationManager())
            <%_ } _%>
            .exceptionHandling()
            .accessDeniedHandler(problemSupport)
            .authenticationEntryPoint(problemSupport)
            <%_ if (authenticationType === 'session') { _%>
        .and()
            .formLogin()
            .requiresAuthenticationMatcher(pathMatchers(HttpMethod.POST, "/api/authentication"))
            .authenticationEntryPoint(new HttpStatusServerEntryPoint(HttpStatus.OK))
            .authenticationSuccessHandler(this::onAuthenticationSuccess)
            .authenticationFailureHandler(this::onAuthenticationError)
        .and()
            .logout()
            .logoutUrl("/api/logout")
            .logoutSuccessHandler(new HttpStatusReturningServerLogoutSuccessHandler())
            <%_ } _%>
        .and()
            .headers()
            .frameOptions()
            .disable()
        .and()
            .authorizeExchange()
            <%_ if (!skipClient) { _%>
            .pathMatchers("/").permitAll()
            .pathMatchers("/*.*").permitAll()
            <%_ } _%>
            <%_ if (!skipUserManagement) { _%>
            .pathMatchers("/api/register").permitAll()
            .pathMatchers("/api/activate").permitAll()
            .pathMatchers("/api/authenticate").permitAll()
            .pathMatchers("/api/account/reset-password/init").permitAll()
            .pathMatchers("/api/account/reset-password/finish").permitAll()
            <%_ } _%>
            .pathMatchers("/api/**").authenticated()
            .pathMatchers("/management/health").permitAll()
            .pathMatchers("/management/info").permitAll()
            .pathMatchers("/management/prometheus").permitAll()
            .pathMatchers("/management/**").hasAuthority(AuthoritiesConstants.ADMIN);
        // @formatter:on
        return http.build();
    }
    <%_ if (authenticationType === 'session') { _%>

    private Mono<Void> onAuthenticationError(WebFilterExchange exchange, AuthenticationException e) {
        exchange.getExchange().getResponse().setStatusCode(HttpStatus.UNAUTHORIZED);
        <%_ if (!skipUserManagement) { _%>
        return exchange.getExchange()
                .getFormData()
                .map(data -> data.getFirst("username"))
                .filter(login -> !Constants.ANONYMOUS_USER.equals(login))
                .flatMap(login -> auditEventService.saveAuthenticationError(login, e))
                .then();
        <%_ } else { _%>
        return Mono.empty();
        <%_ } _%>
    }

    private Mono<Void> onAuthenticationSuccess(WebFilterExchange exchange, Authentication authentication) {
        exchange.getExchange().getResponse().setStatusCode(HttpStatus.OK);
        <%_ if (!skipUserManagement) { _%>
        return Mono.just(authentication.getPrincipal())
                .filter(principal -> principal instanceof User)
                .map(principal -> ((User) principal).getUsername())
                .filter(login -> !Constants.ANONYMOUS_USER.equals(login))
                .flatMap(auditEventService::saveAuthenticationSuccess)
                .then();
        <%_ } else { _%>
        return Mono.empty();
        <%_ } _%>
    }
    <%_ } _%>
}

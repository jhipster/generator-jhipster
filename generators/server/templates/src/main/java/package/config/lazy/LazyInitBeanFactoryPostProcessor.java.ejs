<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package  <%=packageName%>.config.lazy;

import io.github.jhipster.config.JHipsterConstants;

import org.springframework.beans.BeansException;
import org.springframework.beans.factory.config.BeanDefinition;
import org.springframework.beans.factory.config.BeanFactoryPostProcessor;
import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;
<%_ if (authenticationType === 'oauth2' && applicationType === 'gateway') { _%>
import org.springframework.cloud.netflix.zuul.ZuulFilterInitializer;
<%_ } _%>
import org.springframework.context.annotation.Profile;
import org.springframework.stereotype.Component;

/**
 * Lazy initialize all Spring Beans, which boosts up start-up performance.
 *
 * This class originally comes from https://github.com/dsyer/spring-boot-allocations where it is written
 * it can be copied on a project.
 *
 * As this is an experimental feature, we only recommend to use it in "dev" mode for the moment.
 */
@Component
@Profile(JHipsterConstants.SPRING_PROFILE_DEVELOPMENT)
public class LazyInitBeanFactoryPostProcessor implements BeanFactoryPostProcessor {

    private Class<?>[] exclusionList = {<% if (authenticationType === 'oauth2' && applicationType === 'gateway') { %>ZuulFilterInitializer.class<% } %>};

    public LazyInitBeanFactoryPostProcessor() {
    }

    public LazyInitBeanFactoryPostProcessor(Class<?>[] exclusionList) {
        this.exclusionList = exclusionList;
    }

    @Override
    public void postProcessBeanFactory(ConfigurableListableBeanFactory beanFactory)
        throws BeansException {

        // Iterate over all beans, mark them as lazy if they are not in the exclusion list.
        for (String beanName : beanFactory.getBeanDefinitionNames()) {
            if (isLazy(beanName, beanFactory)) {
                BeanDefinition definition = beanFactory.getBeanDefinition(beanName);
                definition.setLazyInit(true);
            }
        }
    }

    private boolean isLazy(String beanName, ConfigurableListableBeanFactory beanFactory) {
        if (exclusionList == null || exclusionList.length == 0) {
            return true;
        }
        for (Class<?> clazz : exclusionList) {
            if (beanFactory.isTypeMatch(beanName, clazz)) {
                return false;
            }
        }
        return true;
    }
}

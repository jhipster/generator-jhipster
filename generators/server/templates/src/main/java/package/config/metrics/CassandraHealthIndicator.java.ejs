<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package  <%=packageName%>.config.metrics;

import com.datastax.driver.core.PreparedStatement;
import com.datastax.driver.core.ResultSet;
import com.datastax.driver.core.Session;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;
import org.springframework.boot.actuate.health.AbstractHealthIndicator;
import org.springframework.boot.actuate.health.Health;
import org.springframework.util.Assert;

/**
 * Simple implementation of a {@link org.springframework.boot.actuate.health.HealthIndicator} returning status information for
 * Cassandra data stores.
 */
public class CassandraHealthIndicator extends AbstractHealthIndicator {

    private static Log log = LogFactory.getLog(CassandraHealthIndicator.class);

    private Session session;

    private PreparedStatement validationStmt;

    public CassandraHealthIndicator(Session session) {
        Assert.notNull(session, "Cassandra session must not be null");
        this.session = session;
        this.validationStmt = session.prepare(
            "SELECT release_version FROM system.local");
    }

    @Override
    protected void doHealthCheck(Health.Builder builder) throws Exception {
        log.debug("Initializing Cassandra health indicator");
        try {
            ResultSet results = session.execute(validationStmt.bind());
            if (results.isExhausted()) {
                builder.up();
            } else {
                builder.up().withDetail("version", results.one().getString(0));
            }
        } catch (Exception e) {
            log.debug("Cannot connect to Cassandra cluster. Error: {}", e);
            builder.down(e);
        }
    }
}

<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest;

<%_ if (reactive) { _%>
import <%= packageName %>.config.Constants;
import <%= packageName %>.domain.PersistentAuditEvent;
import <%= packageName %>.repository.reactive.PersistenceAuditEventRepository;
<%_ } _%>
import <%= packageName %>.security.jwt.JWTFilter;
import <%= packageName %>.security.jwt.TokenProvider;
import <%= packageName %>.web.rest.vm.LoginVM;

import com.fasterxml.jackson.annotation.JsonProperty;

<%_ if (reactive) { _%>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
<%_ } _%>
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
<%_ if (reactive) { _%>
import org.springframework.security.authentication.ReactiveAuthenticationManager;
<%_ } _%>
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
<%_ if (reactive) { _%>
import org.springframework.security.core.Authentication;
<%_ } _%>
<%_ if (!reactive) { _%>
import org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
<%_ } _%>
import org.springframework.web.bind.annotation.*;
<%_ if (reactive) { _%>
import reactor.core.publisher.Mono;
<%_ } _%>

import javax.validation.Valid;
<%_ if (reactive) { _%>
import java.time.Instant;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
<%_ } _%>

/**
 * Controller to authenticate users.
 */
@RestController
@RequestMapping("/api")
public class UserJWTController {

    <%_ if (!reactive) { _%>
    private final TokenProvider tokenProvider;

    private final AuthenticationManagerBuilder authenticationManagerBuilder;

    public UserJWTController(TokenProvider tokenProvider, AuthenticationManagerBuilder authenticationManagerBuilder) {
        this.tokenProvider = tokenProvider;
        this.authenticationManagerBuilder = authenticationManagerBuilder;
    }

    @PostMapping("/authenticate")
    public ResponseEntity<JWTToken> authorize(@Valid @RequestBody LoginVM loginVM) {

        UsernamePasswordAuthenticationToken authenticationToken =
            new UsernamePasswordAuthenticationToken(loginVM.getUsername(), loginVM.getPassword());

        Authentication authentication = authenticationManagerBuilder.getObject().authenticate(authenticationToken);
        SecurityContextHolder.getContext().setAuthentication(authentication);
        boolean rememberMe = (loginVM.isRememberMe() == null) ? false : loginVM.isRememberMe();
        String jwt = tokenProvider.createToken(authentication, rememberMe);
        HttpHeaders httpHeaders = new HttpHeaders();
        httpHeaders.add(JWTFilter.AUTHORIZATION_HEADER, "Bearer " + jwt);
        return new ResponseEntity<>(new JWTToken(jwt), httpHeaders, HttpStatus.OK);
    }
    <%_ } else { _%>
    /**
     * Authentication success event type.
     */
    public static final String AUTHENTICATION_SUCCESS = "AUTHENTICATION_SUCCESS";

    /**
     * Authentication failure event type.
     */
    public static final String AUTHENTICATION_FAILURE = "AUTHENTICATION_FAILURE";

    /**
     * Should be the same as in Liquibase migration.
     */
    protected static final int EVENT_DATA_COLUMN_MAX_LENGTH = 255;

    private static final Logger log = LoggerFactory.getLogger(UserJWTController.class);

    private final TokenProvider tokenProvider;

    private final ReactiveAuthenticationManager authenticationManager;

    private final PersistenceAuditEventRepository persistenceAuditEventRepository;

    public UserJWTController(TokenProvider tokenProvider, ReactiveAuthenticationManager authenticationManager, PersistenceAuditEventRepository persistenceAuditEventRepository) {
        this.tokenProvider = tokenProvider;
        this.authenticationManager = authenticationManager;
        this.persistenceAuditEventRepository = persistenceAuditEventRepository;
    }

    @PostMapping("/authenticate")
    public Mono<ResponseEntity<JWTToken>> authorize(@Valid @RequestBody Mono<LoginVM> loginVM) {
        return loginVM
            .flatMap(login -> authenticationManager
                .authenticate(new UsernamePasswordAuthenticationToken(login.getUsername(), login.getPassword()))
                .onErrorResume(throwable -> onAuthenticationError(login, throwable))
                .flatMap(auth -> onAuthenticationSuccess(login, auth))
                .map(auth -> tokenProvider.createToken(auth, Boolean.TRUE.equals(login.isRememberMe())))
            )
            .map(jwt -> {
                HttpHeaders httpHeaders = new HttpHeaders();
                httpHeaders.add(JWTFilter.AUTHORIZATION_HEADER, "Bearer " + jwt);
                return new ResponseEntity<>(new JWTToken(jwt), httpHeaders, HttpStatus.OK);
            });
    }

    private Mono<? extends Authentication> onAuthenticationSuccess(LoginVM login, Authentication auth) {
        if (!Constants.ANONYMOUS_USER.equals(login.getUsername())) {
            PersistentAuditEvent persistentAuditEvent = new PersistentAuditEvent();
            persistentAuditEvent.setPrincipal(login.getUsername());
            persistentAuditEvent.setAuditEventType(AUTHENTICATION_SUCCESS);
            persistentAuditEvent.setAuditEventDate(Instant.now());
            return persistenceAuditEventRepository.save(persistentAuditEvent).thenReturn(auth);
        }
        return Mono.just(auth);
    }

    private Mono<? extends Authentication> onAuthenticationError(LoginVM login, Throwable throwable) {
        if (!Constants.ANONYMOUS_USER.equals(login.getUsername())) {
            PersistentAuditEvent persistentAuditEvent = new PersistentAuditEvent();
            persistentAuditEvent.setPrincipal(login.getUsername());
            persistentAuditEvent.setAuditEventType(AUTHENTICATION_FAILURE);
            persistentAuditEvent.setAuditEventDate(Instant.now());
            Map<String, String> eventData = new HashMap<>();
            eventData.put("type", throwable.getClass().getName());
            eventData.put("message", throwable.getMessage());
            persistentAuditEvent.setData(truncate(eventData));
            return persistenceAuditEventRepository.save(persistentAuditEvent).then(Mono.error(throwable));
        }
        return Mono.error(throwable);
    }

    /**
     * Truncate event data that might exceed column length.
     */
    private static Map<String, String> truncate(Map<String, String> data) {
        Map<String, String> results = new HashMap<>();

        if (data != null) {
            for (Map.Entry<String, String> entry : data.entrySet()) {
                String value = entry.getValue();
                if (value != null) {
                    int length = value.length();
                    if (length > EVENT_DATA_COLUMN_MAX_LENGTH) {
                        value = value.substring(0, EVENT_DATA_COLUMN_MAX_LENGTH);
                        log.warn("Event data for {} too long ({}) has been truncated to {}. Consider increasing column width.",
                            entry.getKey(), length, EVENT_DATA_COLUMN_MAX_LENGTH);
                    }
                }
                results.put(entry.getKey(), value);
            }
        }
        return results;
    }
    <%_ } _%>

    /**
     * Object to return as body in JWT Authentication.
     */
    static class JWTToken {

        private String idToken;

        JWTToken(String idToken) {
            this.idToken = idToken;
        }

        @JsonProperty("id_token")
        String getIdToken() {
            return idToken;
        }

        void setIdToken(String idToken) {
            this.idToken = idToken;
        }
    }
}

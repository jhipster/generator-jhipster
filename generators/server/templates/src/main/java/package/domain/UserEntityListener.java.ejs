<%#
 Copyright 2013-2018 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%=packageName%>.domain;

import <%=packageName%>.repository.UserRepository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.BeanFactory;
import org.springframework.data.jpa.domain.support.AuditingEntityListener;

import javax.persistence.PrePersist;
import javax.persistence.PreUpdate;
import java.lang.reflect.Field;

/**
 * <p>This class is responsible for persisting Users when using OAuth 2.0 / OIDC. The user won't exist
 * in a microservice app (since it comes from the gateway). This class will handle persisting the User
 * before an entity is saved.</p>
 *
 * <p><b>NOTE:</b> This class does not currently handle many-to-many relationships with User, just
 * many-to-one and one-to-one.</p>
 *
 * @since 5.0.0
 */
public class UserEntityListener extends AuditingEntityListener {

    private final Logger log = LoggerFactory.getLogger(UserEntityListener.class);

    private static BeanFactory beanFactory;

    @PrePersist
    @PreUpdate
    @SuppressWarnings("unchecked")
    public void beforeAnyOperation(Object target) {
        try {
            UserRepository userRepository = beanFactory.getBean(UserRepository.class);
            Class<?> entityClass = target.getClass(); // Retrieve entity class with reflection
            Field privateUserField = entityClass.getDeclaredField("user"); // look for user field
            privateUserField.setAccessible(true);
            final User user = (User) privateUserField.get(target);
            privateUserField.setAccessible(false);
            if (user != null) {
                // Spring Data handles update vs insert (merge vs update), so no need to fetch and do logic here
                userRepository.saveAndFlush(user);
            }
        } catch (NoSuchFieldException e) {
            // No user field found on entity, ignore so as not to clutter the logs
            // This shouldn't happen since the UserEntityListener is only added to entities with a User relationship
        } catch (Exception e) {
            log.error("Exception while configuring user relationship(s) on entity {}", e);
        }
    }

    public static void setBeanFactory(BeanFactory beanFactory) {
        UserEntityListener.beanFactory = beanFactory;
    }
}

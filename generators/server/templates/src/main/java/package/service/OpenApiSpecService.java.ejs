<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import org.apache.commons.io.IOUtils;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;
import org.springframework.beans.factory.annotation.Value;

import java.io.IOException;

@Service
public class OpenApiSpecService {

    private final String basePath;
    private final ObjectMapper objectMapper;
    private final ObjectNode ymlJsonNode;

    public OpenApiSpecService(@Value("${openapi.apispec-2.base-path:/api}") String basePath) throws IOException {
        this.basePath = basePath;
        objectMapper = new ObjectMapper(new YAMLFactory());
        byte[] ymlContent = IOUtils.toByteArray(new ClassPathResource("swagger/api.yml").getInputStream());
        ymlJsonNode = (ObjectNode) objectMapper.readTree(ymlContent);
    }

    /**
     * Returns the yml file content. Replaces servers list to add the endpoint passed as parameter
     * @param apiEndpoint the api endpoint to be inserted into the yml file
     * @return the content of the yml, with the dynamically replaced server list
     * @throws IOException
     */
    public byte[] getYmlContent(String apiEndpoint) throws IOException {

        ObjectNode objectNode = objectMapper.createObjectNode()
            .put("url", apiEndpoint + basePath);

        if(!ymlJsonNode.has("servers")) {
            ymlJsonNode.set("servers", objectMapper.createArrayNode());
        }

        ((ArrayNode) ymlJsonNode.get("servers")).set(0, objectNode);
        return objectMapper.writeValueAsBytes(ymlJsonNode);
    }


    /**
     * Returns the api version written into the api.yml file
     * @return the api version
     * @throws IOException
     */
    public String getApiVersion() {
        return ymlJsonNode.get("info").get("version").textValue();
    }

    /**
     * Openapi version (swagger 2.0, openapi 3.0)
     * @return the spec version (swagger/openapi)
     * @throws IOException
     */
    public String getSpecVersion() {
        if(ymlJsonNode.has("openapi")) {
            return ymlJsonNode.get("openapi").textValue();
        } else if(ymlJsonNode.has("swagger")){
            return ymlJsonNode.get("swagger").textValue();
        } else {
            return null;
        }
    }

}

<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ObjectNode;
import com.fasterxml.jackson.dataformat.yaml.YAMLFactory;
import io.github.jhipster.config.JHipsterConstants;
import org.springframework.context.annotation.Profile;
import org.springframework.core.io.ClassPathResource;
import org.springframework.stereotype.Service;

import java.io.IOException;

@Service
@Profile(JHipsterConstants.SPRING_PROFILE_SWAGGER)
public class OpenApiSpecService {

    private final ObjectMapper objectMapper;
    private final ObjectNode openApiSpec;

    public OpenApiSpecService() throws IOException {
        objectMapper = new ObjectMapper(new YAMLFactory());
        openApiSpec = (ObjectNode) objectMapper.readTree(new ClassPathResource("swagger/api.yml").getInputStream());
    }

    /**
     * Returns the yml file content
     * @return the content of the yml
     * @throws IOException
     */
    public byte[] getYmlContent() throws IOException {
        return objectMapper.writeValueAsBytes(openApiSpec);
    }

    /**
     * Returns the api version written into the api.yml file
     * @return the api version
     */
    public String getApiVersion() {
        return openApiSpec.get("info").get("version").textValue();
    }

    /**
     * Openapi version (swagger 2.0, openapi 3.0)
     * @return the spec version (swagger/openapi)
     */
    public String getSpecVersion() {
        if(openApiSpec.has("openapi")) {
            return openApiSpec.get("openapi").textValue();
        } else if(openApiSpec.has("swagger")){
            return openApiSpec.get("swagger").textValue();
        } else {
            return null;
        }
    }

}

package <%= packageName %>.config;

import org.junit.jupiter.api.extension.AfterAllCallback;
import org.junit.jupiter.api.extension.BeforeAllCallback;
import org.junit.jupiter.api.extension.ExtensionContext;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.context.ApplicationContext;
import org.springframework.test.context.junit.jupiter.SpringExtension;
import org.testcontainers.containers.KafkaContainer;
import org.testcontainers.containers.output.Slf4jLogConsumer;
import org.testcontainers.utility.DockerImageName;

public class KafkaTestContainerExtension implements BeforeAllCallback, AfterAllCallback {

    private static final ThreadLocal<KafkaContainer> THREAD_CONTAINER = new ThreadLocal<>();
    private static final Logger log = LoggerFactory.getLogger(KafkaTestContainerExtension.class);

    @Override
    public void beforeAll(ExtensionContext context) {
        if (null == THREAD_CONTAINER.get()) {
            KafkaContainer kafkaContainer = new KafkaContainer(DockerImageName.parse("<%= DOCKER_KAFKA %>"))
                .withLogConsumer(new Slf4jLogConsumer(log))
                .withReuse(true);
            kafkaContainer.start();
            THREAD_CONTAINER.set(kafkaContainer);
        }
    }

    public static ThreadLocal<?> getThreadContainer() {
        return THREAD_CONTAINER;
    }

    @Override
    public void afterAll(ExtensionContext context) {
        ApplicationContext appContext = SpringExtension.getApplicationContext(context);
        JhipsterIntegrationTestProperties props = appContext.getBean(JhipsterIntegrationTestProperties.class);
        if (null != THREAD_CONTAINER.get() && props.getKeepContainersRunning().equals(Boolean.FALSE)) {
            THREAD_CONTAINER.get().stop();
            THREAD_CONTAINER.remove();
        }
    }
}

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`generator - Kubernetes Kafka application should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["09-kafka"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "monolith",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": null,
    "ingressType": null,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "no"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag samplekafka jhipster/samplekafka
$ docker push jhipster/samplekafka
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc samplekafka
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f samplekafka-\${suffix}/
    kubectl apply -f messagebroker-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - samplekafka-k8s/samplekafka-deployment.yml
  - samplekafka-k8s/samplekafka-service.yml
  - samplekafka-k8s/samplekafka-mysql.yml
  # messagebroker
  - messagebroker-k8s/kafka.yml
# service discovery eureka/consul

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "messagebroker-k8s/kafka.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhipster-kafka
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhipster-kafka
  template:
    metadata:
      labels:
        app: jhipster-kafka
    spec:
      containers:
        - name: kafka
          image: kafka-placeholder
          env:
            - name: KAFKA_ADVERTISED_LISTENERS
              value: "PLAINTEXT://jhipster-kafka.default.svc.cluster.local:9092"
            - name: KAFKA_ZOOKEEPER_CONNECT
              value: "jhipster-zookeeper.default.svc.cluster.local:2181"
            - name: KAFKA_BROKER_ID
              value: "2"
            - name: KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR
              value: "1"
          ports:
            - containerPort: 9092
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-kafka
  namespace: default
spec:
  selector:
    app: jhipster-kafka
  ports:
    - port: 9092
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhipster-zookeeper
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhipster-zookeeper
  template:
    metadata:
      labels:
        app: jhipster-zookeeper
    spec:
      containers:
        - name: zookeeper
          image: zookeeper-placeholder
          env:
            - name: ZOOKEEPER_CLIENT_PORT
              value: "2181"
            - name: ZOOKEEPER_TICK_TIME
              value: "2000"
            - name: ZOOKEEPER_SYNC_LIMIT
              value: "2"
          ports:
            - containerPort: 2181
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-zookeeper
  namespace: default
spec:
  selector:
    app: jhipster-zookeeper
  ports:
    - port: 2181
",
    "stateCleared": "modified",
  },
  "samplekafka-k8s/samplekafka-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplekafka
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplekafka
      version: "v1"
  template:
    metadata:
      labels:
        app: samplekafka
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - samplekafka
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 samplekafka-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: samplekafka-app
          image: jhipster/samplekafka
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://samplekafka-mysql.default.svc.cluster.local:3306/samplekafka?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://samplekafka-mysql.default.svc.cluster.local:3306/samplekafka?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: KAFKA_CONSUMER_KEY_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_CONSUMER_VALUE_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_CONSUMER_BOOTSTRAP_SERVERS
              value: "jhipster-kafka.default.svc.cluster.local:9092"
            - name: KAFKA_CONSUMER_GROUP_ID
              value: "samplekafka"
            - name: KAFKA_CONSUMER_AUTO_OFFSET_RESET
              value: "earliest"
            - name: KAFKA_PRODUCER_BOOTSTRAP_SERVERS
              value: "jhipster-kafka.default.svc.cluster.local:9092"
            - name: KAFKA_PRODUCER_KEY_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: KAFKA_PRODUCER_VALUE_DESERIALIZER
              value: "org.apache.kafka.common.serialization.StringDeserializer"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "samplekafka-k8s/samplekafka-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: samplekafka-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplekafka-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplekafka-mysql
  template:
    metadata:
      labels:
        app: samplekafka-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: samplekafka-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: samplekafka
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: samplekafka-mysql
  namespace: default
spec:
  selector:
    app: samplekafka-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "samplekafka-k8s/samplekafka-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: samplekafka
  namespace: default
  labels:
    app: samplekafka
spec:
  selector:
    app: samplekafka
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/samplekafka
      context: ./09-kafka
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes Kafka application should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes MySQL and PostgreSQL microservices without gateway should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql", "03-psql"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": null,
    "ingressType": null,
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
$ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`

kubectl scale deployment <app-name> --replicas <replica-count>

\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`

kubectl set image deployment/<app-name>-app <app-name>=<new-image>

\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.




## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!

\`\`\`
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/
    kubectl apply -f mspsql-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  - mspsql-k8s/mspsql-deployment.yml
  - mspsql-k8s/mspsql-service.yml
  - mspsql-k8s/mspsql-postgresql.yml
  - mspsql-k8s/mspsql-elasticsearch.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql
      version: "v1"
  template:
    metadata:
      labels:
        app: mspsql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mspsql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 mspsql-postgresql 5432)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: mspsql-app
          image: jhipster/mspsql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_DATASOURCE_USERNAME
              value: mspsql
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-elasticsearch.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-elasticsearch-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-elasticsearch-pvc
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-postgresql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mspsql-postgresql
  namespace: default
  labels:
    app: mspsql-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-postgresql
  template:
    metadata:
      labels:
        app: mspsql-postgresql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-postgresql-pvc
      containers:
        - name: postgres
          image: postgresql-placeholder
          env:
            - name: POSTGRES_USER
              value: mspsql
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  selector:
    app: mspsql-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: mspsql
  namespace: default
  labels:
    app: mspsql
spec:
  selector:
    app: mspsql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
    - image: jhipster/mspsql
      context: ./03-psql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes MySQL and PostgreSQL microservices without gateway should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes gateway and ingress should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "example.com",
    "ingressType": "nginx",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "Ingress",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-ingress.yml": {
    "contents": "apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jhgate
  namespace: default
spec:
  ingressClassName: nginx
  rules:
    - host: jhgate.default.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: jhgate
                port:
                  name: http
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: ClusterIP
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
        echo "#####################################################"
        echo "Please find the below useful endpoints,"
        echo "Gateway - http://jhgate.default.example.com"
        echo "#####################################################"
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - jhgate-k8s/jhgate-ingress.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway and ingress should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes gateway and ingressType gke should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "example.com",
    "ingressType": "gke",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "Ingress",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Keycloak

Keycloak deployment in production mode requires the installation of [cert-manager](https://cert-manager.io/docs/installation/) Kubernetes add-on for the TLS certificate generation.

\`\`\`
kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.10.1/cert-manager.yaml
\`\`\`

The certificate will be issued automatically by Let's Encrypt staging environment. You must set your email address in the issuer definition in \`cert-manager/letsencrypt-staging-issuer.yml\`.

Keycloak ingress is defined with the application ingress, and requires a static IP with the name specified in the ingress annotation \`kubernetes.io/ingress.global-static-ip-name\`.

You can create a global public IP with \`gcloud\` before running \`jhipster k8s\` with the following command:

\`\`\`
gcloud compute addresses create <ip-name> --global
\`\`\`

You can find out the assigned IP address using:

\`\`\`
gcloud compute addresses describe <ip-name> --global --format='value(address)'
\`\`\`

When running the \`jhipster k8s\` generator, it will prompt for a root FQDN (fully qualified domain name). You can use \`nip.io\` as the DNS provider and set \`<ip-address>.nip.io\`.

It might take up to 15 minutes for the Let's Encrypt certificates to be issued. Use the following command to check the status:

\`\`\`
kubectl describe certificate keycloak-ssl
\`\`\`

You need to look for the following two events to determine success:

\`\`\`text
Events:
  Type    Reason     Age   From                                       Message
  ----    ------     ----  ----                                       -------
  ...
  Normal  Issuing    10m   cert-manager-certificates-issuing          Issued temporary certificate
  Normal  Issuing    4m    cert-manager-certificates-issuing          The certificate has been successfully issued
\`\`\`

cert-manager first creates a temporary certificate. Once you see the event "The certificate has been successfully issued", it means Let's Encrypt staging has issued the certificate. The staging certificate will be trusted by deployed applications, but not by browsers. Let's Encrypt production certificates are trusted by browsers, but the production issuer will probably not work with nip.io, and fail with "too many certificates already issued for nip.io".

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!

> my applications don't start, because of 'Remote host terminated the handshake' or 'PKIX path building failed'

The k8s sub-generator configures Let's Encrypt staging environment, which is not trusted by browsers and Java applications by default. In the Kubernetes descriptors, the staging CAs are added to the applications truststore and registry truststore. Note that cert-manager issues a temporary certificate first, but the applications and registry don't trust the ad-hoc CA, and will fail the startup until the Let's Encrypt certificate is ready and updated in the ingress service. You will see the application pod STATUS as Error and CrashLoopBackOff during the multiple startup attempts. You can check the certificate status with the following command:

\`\`\`
kubectl describe certificate keycloak-ssl
\`\`\`
",
    "stateCleared": "modified",
  },
  "cert-manager/letsencrypt-staging-ca-secret.yml": {
    "contents": "# The truststore contains  "(STAGING) Artificial Apricot R3" and "(STAGING) Pretend Pear X1" certificates
# https://letsencrypt.org/docs/staging-environment/
# Truststore password is 123456
apiVersion: v1
kind: Secret
metadata:
  name: letsencrypt-ca-secret
  namespace: default
type: Opaque
data:
  truststore.jks: MIIM8gIBAzCCDJwGCSqGSIb3DQEHAaCCDI0EggyJMIIMhTCCDIEGCSqGSIb3DQEHBqCCDHIwggxuAgEAMIIMZwYJKoZIhvcNAQcBMGYGCSqGSIb3DQEFDTBZMDgGCSqGSIb3DQEFDDArBBR281D4LxSgSumjYm7vQzqxgA4pMAICJxACASAwDAYIKoZIhvcNAgkFADAdBglghkgBZQMEASoEEHzsdnFwbRxr2Q/TZfF1gCuAggvw6NDi0FawkKeVYA66bJ+WpSzZt9dMrg5Z1blkPVs1gQWXSOikwnHIjidbUhvGg4H281+XYLezklsi6w60FHEpjTrD/+fAUMiykLDpfxOSKcEG2iPPUDuFeCZqORtoSa+ENBHYnw/L/tjXx9+IlNrrBgIQrV+p7WRfliOsEy4wr+wrcvl+JHSYi1AoTYtkMuRKe84Hsp3gTBYKZU+Va0QdRfXFsLLzI4ftcZZfwA56sTZngR5fPJ7mx7pE9OOTZWOS1meZ+QjDHlPickiM3E1ny29wmo5Xx0E01FjhOmQ8vxbqmF5k0N01UmFZcdHeIq2u+q1lyloynozqoP+RGJKfjryIGy4luOTHptIK3N0nPUivKIIaP+fOpc2liY5HXfa64Imuh4R5BP+AdzvoOvq2iCyM1JWeF5meXxudVNYwpGSdrlHSYJ3olyQqKBzrapOXiOEoiSCxZI1jFPpEgdK0RTLUQ3mtpkGIQnj5sjyNfQjv1bZWi2HRXoguhz0/68gZMQWwGTIjb6oCE/RO3oQ3HI6auKP8Rg59BD4+de94ZKSHcN6BqEPRMELv+doKBRJgRBvg30QJsMC60diGrHqeNiC4PmorpM2qyIjRPp6GY7hZN7fKPs9aEnMGAj2Elu6w4D0LLMYo0rvaegqWeBwjK7ehih2tVH5dknqj2/B6qVqZrSuduZaCR+2/TeLZI2VrlMJsx4LRD9kBA5Ffe6rtMqEieD7e3hNXGTEvRKNuSv95xkHoDKs1fHsqAvzvW36iS1xE04TzK/UTYatVUo7bZi40dAMuTAelauEFQiF8HFApYO095659uSMHh07mgxW8NVNHNU9+CZzf8tFmXpNOqVWsatuwicwR4q+hvQjCr5jbG4kqBK1nmbzZTFE49EJmOiMRFMElwZTz+UPlSIFotQ82DvjBjyACBospaeYuJ+xdPW6/UIz3USZoapEe4iZli+ZQp8t7HuFAZlFiFQObLJ3ozplUICbIIuPAwK/pOQCSzelytN0s5I9naK0fp0Ib8MkTd7VYbamPsMeSLJ0VUtcjnyPXd/6Qm4wAIrmGecDl8xnaUgihQZONsZRb/iEOzaRQDVUWPOSqJMLMn7Fpsq00jHPAPeeUfDMUDc8SsW9RV5/oNeoCINuvI/fDTuaY3q71qiMa+PQOgMFdaXW5GFWdPWaHK1bdOp7nbzm2umKraNMlSJ6kal863WiFeJMYKpp575ff52QCRiR4ZR8o+my0pqxnq8XAzu5HNtgO3KxgtiwQxufywODY3JgBA+7SPX3CAusQW4Sm9yRIqS2IpsdnTtoUduo/xybalkfKb6aDpJEWhJXTekyP6+7cZaKihj2FFJlPivrZ0VIwqu+z+IBjnX9KBWBz5xs4JW8yPuo3vwU8Ohgh7PcWayAnKPNrm2B3U6YlsjnSNtfbvjTcGv1BpKuirDQCb8aiq2od+GpGFilD4MmIcyq2OxB/FFinqguYSiIMNGkvffyU2vzwUv02xUmwqODg+FuJ4iwjLmNQmGLHKfx/QBwdQJKK3kPlW/D4CyiyxKrXQ9O3JkI4cBKrHk4xKZF9xktNk1xoBVPHehmO7RsYjOjJP6UYaVHOPgTNyXp4DVMee/3lKyNdZDwp9syux7izJ02CFNVaoh0eBxrAj9rCGUtojyyibuADYUQS9mPL//LzMntNtm0YvMJADGc3LUMwMXTBgTv7nTSomKKXws8wMwWp3XRMQTo+tsV8P3gPKM+G5maOMSZCQ2BEi94pgs9d2PtlYC1is9uvY+4RS7ouoOBvvH3+Pr7S2arKe2ZsMsbdLuZMweho56gYG2dPVnknobdKl+8axWp3VsPZmyTuQfyOci7rSUXPw+dHLg6WyHibETuAyHmkt+eLXPt9ofgIqa/apH1sc8Wv93TeoJoCIG8uk1OOCxDyb7Fjbt+EVkxRC9TOx+4NJpkWLRvcpBjGbN2wMTpucL9ZuRk6zZx6GOXEE8KIoLhV74RQ8HP22fuv00kjH8QBoetqyslFLWl3rmixITp9JzWdeqxO7TgrdnOtZ30YgSsbOy63xOXAtN/fDFUvNyOsD/QBj5S9oCu0oAym/plZ4A9GLp340Mo1AV6navk1ECK3Fm9rtvqPv/qpVsJ2JDoeSfPmPpn37+VcP7pIa8LqecAszapW3W6mDfNQhX1M0xjHOiRhXra1xP9gApG/z9WfkWvl34icWz635fb0mr+mg6KZRXOR2mOt5IpwTqacP+Vrr3cIkqWm7gnQk6tU5wHFGI0tyKHPuMz9rdxQwN2HB4+BH5T1//FNcA5qLovRSln22+Sh9oVRmj/dQwAY4ENtF2cEZxC7uum3BgeEi/vPZVHDPcuD7qeYmC/Xt/b4ELavJGues2pbOagXrf+dTDbJAinmGuf6N1cBeWtUBX0Q3R1Ndct2xJaOG9IMpqqKimK7AiSPGVg7cjvTjrapHmFlJBeWzoDqBLWSo/zGiIDBnx17mNd5f8oS+GYzAkO1AWiY1DYheh4cTPAxvv5KB7JoFw55XfA3zyiDZBKzmQOr648c9/ERma1HmQ9SjPGg2FMnwOpRMQL6FgIwavKPpqReq8GxVJRURIUf8XJhzvqrqv7PO1ZQUHs4egYaNClcbWQ4/dvqAM6uJ8npCpAlyEKRAhi5T7buYNu2olie1ZMulBSQKbpk8O/bX/EI9P8tJwSYvAHBch+hHhAQATZUI3yJ/4KQpW9AYG50FcI5ZGVEoIZ6FtRri2yUjGuPw//YA8tFS2WbDiv3gk7O6kFko+50sqiYYLJ1dwj3DljvwlxXsKercZ7VXD6mvOQjQA1K4bH2lG3SID2BtkT4JeYu5eWBdEudw63+TdbwT+7jTKbWGEFhCSaTmjNjUXm7QWaIdJdRDBkCSAjWG1s9sHHRyuf4mNHf+jSkjRepUMfr24WJdW0+FDKsMO7f5g4moJwPL4aUgmYm/CBPlZmn51BvE7GCStRsj5PGdcmHkjF561CyLt3hhmLRGd1dTIW6mEoJDCvenHPf/OfNmDC29aM7BE0yGqsBCTF8ORhTqSC2C2I+il9fNl2/bpf9m/BeOAwI0MFo6RAfPYoPdl2gONlVZxRzjy83NAc+FiERv3WBAfe6iEWWsjKV8iV1usJ35V9FU12mqE5Fzd2ix0oVIjevo9e6l+lLXwci9mKi9sI9WXG/97W/7uuYaZMIGlYY0aLONgkqveBMW04T/g89P6ghVJOhD/bb5fLDgVYf8hIXUh5nBNQEJhK8Us+pW+cOSeQpwReV/a6D9/ImvpoQcFK1wYCMmAPGFw7RyakSoBhfwMvINhwQdSB/45GfXymTUjf5eTfcLEmUgdSmPv6vgQJu2ClyQraapt6AYKTM+ddGWcw/U3HRSK+ptZVXBmmecbvCnSTlF2mZuL3TXCYN4DBASZ0pSLGpCkOrDuhvM2M9YW/bK0z28YZWVAF5hObA6uTxVCvnDIsDukXqQNDdN5eyU2MaWAXVunw50YdQihNQEf3HGWY2Rm/iMAuh6pNg99dXDZLXWtgCKoXl/lH9IOO7cg2uz2yrAWXkujRpPVW6CuIM2pcl0H6s5i7/mUW5rdgEX5rIUQLYVDCiADuWM3UUjBCgcaOM4EDTCMYRI0ELrIbHU3FKClDeeLdr7hMBPassWMlZFfO/bHQg/YrwdD0bcmEDjXPIprrA/fcb9lHU7wGxVqw3WVRdggw62ufmFbcyMZhRSUfQcbOcSS9bI1G/2m5XYmIe6zrSjv7n2p0ExPVD/FnkcU4b3OxzvVRZYyz5b+1fAuxl2LWA0CTgwb7h+iTA0UWnmZT2SsQdOb16ZgZdpJJcYcpqLlBabCuUu+HfehY9gczqH5+ET6jFHKOgxbf6PNyXE2y1JA2v2A2eIZ3gmEMsfZ0bHkWvtxmw+qp93bMa137jU7vrXdXNaXLAAAjWRr6G1IaSpsnQVGLAfIH8NlmNkW1yZ2HZ2SajDcYzdsC3MBYBfEY/K5grGZMT7PBu3KVCV0SxTvUaXLaSSMysNBRN1IcJ96er+EivYFamVrhfR8D2gsYuiax3lWIwjTeE3o3O5eJJJdhgT8Jk+n8AZbQwTTAxMA0GCWCGSAFlAwQCAQUABCBY3bHkvPayRA0gqLCPhPJxw4jgA2kLISJtqzFZfHqy/gQUNElj1rRfftSsbdj7vrKhdp7I6I8CAicQ
",
    "stateCleared": "modified",
  },
  "cert-manager/letsencrypt-staging-issuer.yml": {
    "contents": "apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: letsencrypt-staging
  namespace: default
spec:
  acme:
    server: https://acme-staging-v02.api.letsencrypt.org/directory
    email:
    privateKeySecretRef:
      name: letsencrypt-staging
    solvers:
      - http01:
          ingress:
            class: ingress-gce
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            # Custom trustStore required when using Let's Encrypt staging
            - name: JAVA_OPTS
              value: "-Djavax.net.ssl.trustStore=/etc/pki/java/cacerts -Djavax.net.ssl.trustStorePassword=123456 -Xmx256m -Xms256m"
            - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI
              value: https://keycloak.default.example.com/realms/jhipster
            - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID
              value: web_app
            - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET
              value: web_app
            - name: SERVER_SHUTDOWN
              value: graceful
          # Custom trustStore required when using Let's Encrypt staging
          volumeMounts:
            - name: java-truststore
              mountPath: /etc/pki/java
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
      volumes:
        # When using Let's Encrypt staging certificates, for a successful start, add CAs to java truststore
        - name: java-truststore
          secret:
            secretName: letsencrypt-ca-secret
            items:
              - key: truststore.jks
                path: cacerts
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-ingress.yml": {
    "contents": "apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jhgate
  namespace: default
  annotations:
    kubernetes.io/ingress.allow-http: "true"
    kubernetes.io/ingress.global-static-ip-name: jhgate-ip
    cert-manager.io/issuer: letsencrypt-staging
    acme.cert-manager.io/http01-edit-in-place: "true"
    cert-manager.io/issue-temporary-certificate: "true"
spec:
  rules:
    - host: jhgate.default.example.com
      http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: jhgate
                port:
                  name: http
    - host: keycloak.default.example.com
      http:
        paths:
          - path: /*
            pathType: ImplementationSpecific
            backend:
              service:
                name: keycloak
                port:
                  number: 9080
  tls:
    - secretName: keycloak-ssl
      hosts:
        - keycloak.default.example.com
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: NodePort
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "keycloak-k8s/keycloak-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-config
  namespace: default
#common configuration shared between all applications
data:
  jhipster-realm.json: |
    {
      "id": "jhipster",
      "realm": "jhipster",
      "displayName": "JHipster",
      "notBefore": 0,
      "defaultSignatureAlgorithm": "RS256",
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "ssoSessionIdleTimeoutRememberMe": 0,
      "ssoSessionMaxLifespanRememberMe": 0,
      "offlineSessionIdleTimeout": 2592000,
      "offlineSessionMaxLifespanEnabled": false,
      "offlineSessionMaxLifespan": 5184000,
      "clientSessionIdleTimeout": 0,
      "clientSessionMaxLifespan": 0,
      "clientOfflineSessionIdleTimeout": 0,
      "clientOfflineSessionMaxLifespan": 0,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "oauth2DeviceCodeLifespan": 600,
      "oauth2DevicePollingInterval": 5,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "roles": {
        "realm": [
          {
            "id": "8e986fb5-dafb-43bf-a7c2-7e57572d3d80",
            "name": "ROLE_ADMIN",
            "description": "Jhipster administrator role",
            "composite": false,
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          },
          {
            "id": "e1b19afd-f612-4a79-bdf8-26a99b89b10b",
            "name": "offline_access",
            "description": "\${role_offline-access}",
            "composite": false,
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          },
          {
            "id": "ec5705e1-fc1d-4d21-8364-abd3bd4efcd0",
            "name": "ROLE_USER",
            "description": "Jhipster user role",
            "composite": false,
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          },
          {
            "id": "d2b73e7b-a2d7-40e9-8ebc-2af00454e8aa",
            "name": "default-roles-jhipster",
            "description": "\${role_default-roles}",
            "composite": true,
            "composites": {
              "realm": [
                "offline_access",
                "uma_authorization"
              ],
              "client": {
                "account": [
                  "view-profile",
                  "manage-account"
                ]
              }
            },
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          },
          {
            "id": "2eec61d0-9581-4dbf-8c7b-f32dc5fac3ce",
            "name": "uma_authorization",
            "description": "\${role_uma_authorization}",
            "composite": false,
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          }
        ],
        "client": {
          "internal": [],
          "realm-management": [
            {
              "id": "a6249a12-d76c-4514-b137-e3018b243e25",
              "name": "manage-authorization",
              "description": "\${role_manage-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "a28bc401-c5ad-4fab-aef4-42629988c10b",
              "name": "view-realm",
              "description": "\${role_view-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "464bca1f-136f-45de-a7fc-b976a185ce7e",
              "name": "view-users",
              "description": "\${role_view-users}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-users",
                    "query-groups"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "98c2fa77-d3c8-4f68-b9f4-b79f87efd4a9",
              "name": "query-users",
              "description": "\${role_query-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "6b82bfdb-c8de-4274-95b4-a683eb4ead50",
              "name": "view-identity-providers",
              "description": "\${role_view-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "3c6b9cfe-80c4-41d5-a5ac-0cadebacfc8d",
              "name": "manage-identity-providers",
              "description": "\${role_manage-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "23676fb8-235a-4e54-a0d0-9bed1ccbe2f8",
              "name": "query-groups",
              "description": "\${role_query-groups}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "b71fe952-bb06-4e4a-91ef-2d2714f770e1",
              "name": "impersonation",
              "description": "\${role_impersonation}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "0813cbd0-c73d-469d-a54d-84a865c302af",
              "name": "manage-events",
              "description": "\${role_manage-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "c7a4f4c1-9089-458c-a765-f6d22ea94690",
              "name": "view-authorization",
              "description": "\${role_view-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "2e1bc884-e9d3-45d2-909c-2777a78ca8ae",
              "name": "manage-realm",
              "description": "\${role_manage-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "0a05451e-7d64-4e87-b585-f1143ce5752e",
              "name": "query-clients",
              "description": "\${role_query-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "dfad4d08-6d75-42b6-8699-4886e47bc464",
              "name": "view-events",
              "description": "\${role_view-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "392ed0a3-f6ad-48a1-b201-648037d2b4bd",
              "name": "realm-admin",
              "description": "\${role_realm-admin}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "manage-authorization",
                    "view-realm",
                    "view-users",
                    "query-users",
                    "manage-identity-providers",
                    "view-identity-providers",
                    "query-groups",
                    "impersonation",
                    "manage-events",
                    "query-clients",
                    "manage-realm",
                    "view-authorization",
                    "view-events",
                    "view-clients",
                    "create-client",
                    "manage-clients",
                    "manage-users",
                    "query-realms"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "d7efdf61-affb-42a1-bcb0-b2c30d87a39e",
              "name": "view-clients",
              "description": "\${role_view-clients}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-clients"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "14da8e56-5c8b-4764-96da-250449a32fd4",
              "name": "create-client",
              "description": "\${role_create-client}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "88e6a9f5-259c-487d-af35-2a98da066816",
              "name": "manage-clients",
              "description": "\${role_manage-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "932273a7-c02b-43db-81c5-96a0dc45e454",
              "name": "manage-users",
              "description": "\${role_manage-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "e3edf335-cec5-4012-a00d-fcac045052e1",
              "name": "query-realms",
              "description": "\${role_query-realms}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            }
          ],
          "jhipster-control-center": [],
          "security-admin-console": [],
          "web_app": [],
          "admin-cli": [],
          "account-console": [],
          "broker": [
            {
              "id": "5b08a930-9f1d-4030-ae75-92c1e4c9352c",
              "name": "read-token",
              "description": "\${role_read-token}",
              "composite": false,
              "clientRole": true,
              "containerId": "88e1225b-f0b9-46ba-8efd-f2c10ce23058",
              "attributes": {}
            }
          ],
          "account": [
            {
              "id": "a88c56b8-6bc9-418a-92bc-7a17e7707f60",
              "name": "view-profile",
              "description": "\${role_view-profile}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "0cb954ab-987f-482a-b2d7-0d481ba1d532",
              "name": "view-applications",
              "description": "\${role_view-applications}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "6450156d-7526-48f2-8ea0-bb1e51f9eefa",
              "name": "manage-account",
              "description": "\${role_manage-account}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "manage-account-links"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "e5b2ba76-4c36-4ba1-b210-89a1ac3c6bbe",
              "name": "view-consent",
              "description": "\${role_view-consent}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "35537940-67a6-4217-881b-1ff98109b374",
              "name": "manage-consent",
              "description": "\${role_manage-consent}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "view-consent"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "5ebf404b-7805-4da2-abb4-9db7d3b36120",
              "name": "delete-account",
              "description": "\${role_delete-account}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "a7f45fab-19c3-4c48-aca3-85f828ca0fed",
              "name": "manage-account-links",
              "description": "\${role_manage-account-links}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            }
          ]
        }
      },
      "groups": [
        {
          "id": "afb0c768-ab0f-454c-a8ea-bc9e70b50248",
          "name": "Admins",
          "path": "/Admins",
          "attributes": {},
          "realmRoles": [
            "ROLE_ADMIN"
          ],
          "clientRoles": {},
          "subGroups": []
        },
        {
          "id": "672767bb-4ab0-4d37-93a1-9b6c2416b6b2",
          "name": "Users",
          "path": "/Users",
          "attributes": {},
          "realmRoles": [
            "ROLE_USER"
          ],
          "clientRoles": {},
          "subGroups": []
        }
      ],
      "defaultRole": {
        "id": "d2b73e7b-a2d7-40e9-8ebc-2af00454e8aa",
        "name": "default-roles-jhipster",
        "description": "\${role_default-roles}",
        "composite": true,
        "clientRole": false,
        "containerId": "jhipster"
      },
      "requiredCredentials": [
        "password"
      ],
      "otpPolicyType": "totp",
      "otpPolicyAlgorithm": "HmacSHA1",
      "otpPolicyInitialCounter": 0,
      "otpPolicyDigits": 6,
      "otpPolicyLookAheadWindow": 1,
      "otpPolicyPeriod": 30,
      "otpSupportedApplications": [
        "FreeOTP",
        "Google Authenticator"
      ],
      "localizationTexts": {},
      "webAuthnPolicyRpEntityName": "keycloak",
      "webAuthnPolicySignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyRpId": "",
      "webAuthnPolicyAttestationConveyancePreference": "not specified",
      "webAuthnPolicyAuthenticatorAttachment": "not specified",
      "webAuthnPolicyRequireResidentKey": "not specified",
      "webAuthnPolicyUserVerificationRequirement": "not specified",
      "webAuthnPolicyCreateTimeout": 0,
      "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyAcceptableAaguids": [],
      "webAuthnPolicyExtraOrigins": [],
      "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
      "webAuthnPolicyPasswordlessSignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyPasswordlessRpId": "",
      "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
      "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
      "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
      "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
      "webAuthnPolicyPasswordlessCreateTimeout": 0,
      "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyPasswordlessAcceptableAaguids": [],
      "webAuthnPolicyPasswordlessExtraOrigins": [],
      "scopeMappings": [
        {
          "clientScope": "offline_access",
          "roles": [
            "offline_access"
          ]
        }
      ],
      "clientScopeMappings": {
        "account": [
          {
            "client": "account-console",
            "roles": [
              "manage-account"
            ]
          }
        ]
      },
      "clients": [
        {
          "id": "6cc5a716-0880-47dc-b714-9a4967246b2f",
          "clientId": "account",
          "name": "\${client_account}",
          "rootUrl": "\${authBaseUrl}",
          "baseUrl": "/realms/jhipster/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "/realms/jhipster/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "fb0a4870-06db-4f9d-9d44-baf51a00cc34",
          "clientId": "account-console",
          "name": "\${client_account-console}",
          "rootUrl": "\${authBaseUrl}",
          "baseUrl": "/realms/jhipster/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "/realms/jhipster/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "c5c4ebe5-d009-4f96-b143-1b36d770eafb",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "bb166356-838d-445e-94e3-9330ad7ab51b",
          "clientId": "admin-cli",
          "name": "\${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "88e1225b-f0b9-46ba-8efd-f2c10ce23058",
          "clientId": "broker",
          "name": "\${client_broker}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "10e6ea34-9f1e-49ef-8e28-7eb851459694",
          "clientId": "internal",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "internal",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "post.logout.redirect.uris": "+",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "ff2f50b4-5409-4789-bdda-fe731f14fbff",
              "name": "Client IP Address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientAddress",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientAddress",
                "jsonType.label": "String"
              }
            },
            {
              "id": "72f9ae74-9e95-4b7b-a709-5086137410bb",
              "name": "Client ID",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientId",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientId",
                "jsonType.label": "String"
              }
            },
            {
              "id": "029bf6c8-5a19-4798-984c-bdb205d752d5",
              "name": "Client Host",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientHost",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientHost",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "1acf7ad0-68cb-46a6-a3e4-8b2f2abecb85",
          "clientId": "jhipster-control-center",
          "rootUrl": "http://localhost:7419",
          "adminUrl": "http://localhost:7419",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "jhipster-control-center",
          "redirectUris": [
            "dev.localhost.ionic:*",
            "http://127.0.0.1:*",
            "http://localhost:*",
            "https://127.0.0.1:*",
            "https://localhost:*"
          ],
          "webOrigins": [
            "*"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": true,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "post.logout.redirect.uris": "+",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "jhipster",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "898488c8-e260-41c5-a463-7ceea14d587a",
          "clientId": "realm-management",
          "name": "\${client_realm-management}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "989d2b96-b820-4f9b-aa17-55e6488b08c8",
          "clientId": "security-admin-console",
          "name": "\${client_security-admin-console}",
          "rootUrl": "\${authAdminUrl}",
          "baseUrl": "/admin/jhipster/console/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "/admin/jhipster/console/*"
          ],
          "webOrigins": [
            "+"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "5fd34289-c644-411a-874c-849475d9d102",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "6e8deddb-b4d6-4e2e-b389-b397d3f74fcd",
          "clientId": "web_app",
          "rootUrl": "http://localhost:8080",
          "adminUrl": "http://localhost:8080",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "web_app",
          "redirectUris": [
            "http://jhgate.default.example.com/*",
            "https://jhgate.default.example.com/*", "http://localhost:8080/*",
            "https://localhost:8080/*", 
            "http://localhost:8100/*",
            "http://127.0.0.1:8761/*",
            "http://localhost:9000/*",
            "dev.localhost.ionic:*"
          ],
          "webOrigins": [
            "http://jhgate.default.example.com",
            "https://jhgate.default.example.com", "http://localhost:8080",
            "https://localhost:8080", 
            "http://localhost:8100",
            "http://127.0.0.1:8761",
            "http://localhost:9000"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": true,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "post.logout.redirect.uris": "+",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "jhipster",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        }
      ],
      "clientScopes": [
        {
          "id": "52d73c82-423c-44a8-b2ec-1e13f4cd6065",
          "name": "address",
          "description": "OpenID Connect built-in scope: address",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${addressScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "98230752-36b9-4755-8661-a7de1926d0d4",
              "name": "address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-address-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute.formatted": "formatted",
                "user.attribute.country": "country",
                "user.attribute.postal_code": "postal_code",
                "userinfo.token.claim": "true",
                "user.attribute.street": "street",
                "id.token.claim": "true",
                "user.attribute.region": "region",
                "access.token.claim": "true",
                "user.attribute.locality": "locality"
              }
            }
          ]
        },
        {
          "id": "44d24405-87bf-4b37-a627-e3fdabb93f50",
          "name": "email",
          "description": "OpenID Connect built-in scope: email",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${emailScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "36800088-6d17-4c18-93e8-2bc93901d8b7",
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            },
            {
              "id": "3ea34afd-30b5-4e5d-a836-dbda439dce6f",
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            }
          ]
        },
        {
          "id": "9816de82-24b7-42fe-a85a-1264868ec293",
          "name": "jhipster",
          "description": "Jhipster specific claims",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "0f9c9347-aad6-4bff-94f4-e11937f2ad33",
              "name": "langKey",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "langKey",
                "id.token.claim": "false",
                "access.token.claim": "false",
                "claim.name": "langKey",
                "jsonType.label": "String"
              }
            },
            {
              "id": "69729907-8d1c-4961-81c0-91766f548cc9",
              "name": "roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "id.token.claim": "false",
                "access.token.claim": "true",
                "claim.name": "roles",
                "jsonType.label": "String"
              }
            },
            {
              "id": "336acfe2-a717-492a-9055-5b70e808f42f",
              "name": "login",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "preferred_username",
                "id.token.claim": "false",
                "access.token.claim": "false",
                "claim.name": "login",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "87d299f2-434f-4abd-8cb0-a16231acd713",
          "name": "microprofile-jwt",
          "description": "Microprofile - JWT built-in scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "fce09d51-cb85-4ccd-b83d-865a4d4bf650",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "jsonType.label": "String"
              }
            },
            {
              "id": "3d1ee7e2-b7e1-4504-bd52-b47a2cb10eec",
              "name": "upn",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "upn",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "0399b625-22d7-4d68-b4db-fd1dc2effacc",
          "name": "offline_access",
          "description": "OpenID Connect built-in scope: offline_access",
          "protocol": "openid-connect",
          "attributes": {
            "consent.screen.text": "\${offlineAccessScopeConsentText}",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "2b867b2d-3373-43ff-b50f-ea37a5e1c390",
          "name": "phone",
          "description": "OpenID Connect built-in scope: phone",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${phoneScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "daa0191b-20d1-4f71-b191-6c48a37e3677",
              "name": "phone number",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumber",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number",
                "jsonType.label": "String"
              }
            },
            {
              "id": "32213de7-12f7-4864-b696-c8e6c5e0c26e",
              "name": "phone number verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumberVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number_verified",
                "jsonType.label": "boolean"
              }
            }
          ]
        },
        {
          "id": "60a44832-9776-449f-94cd-fa8c24a75f35",
          "name": "profile",
          "description": "OpenID Connect built-in scope: profile",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${profileScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "a59584ab-7a7c-4b23-95b5-be8dbbfadc6f",
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "d382c1dc-d5d8-479e-8809-f0a618113a07",
              "name": "website",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "website",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "website",
                "jsonType.label": "String"
              }
            },
            {
              "id": "559f86c1-1187-498d-8354-723f4ea5721c",
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "0925e106-a8e2-4ad1-b75e-4147d185894a",
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "String"
              }
            },
            {
              "id": "eb8e2c73-5c65-4b53-8d55-46edef61315b",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            },
            {
              "id": "4c109376-01bc-4b69-a3c0-4b830ecad674",
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "b3813956-e556-4b57-a06b-f71b0d6f3d47",
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            },
            {
              "id": "28beb4c0-029b-4aa5-ad5f-6d824ca67e15",
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "53d681bc-ec29-4f57-924b-ff5bd22d4093",
              "name": "profile",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "profile",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "profile",
                "jsonType.label": "String"
              }
            },
            {
              "id": "12ba8e12-157d-4729-918b-0d74fa444fba",
              "name": "picture",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "picture",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "picture",
                "jsonType.label": "String"
              }
            },
            {
              "id": "ddb818fe-8e4a-4b26-9c5d-2467a26af6dc",
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            },
            {
              "id": "f78b1746-2be1-45f4-9c1e-1f6141ccdb65",
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "id": "7723245c-4952-4822-86ae-084048b1f2f2",
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "b192fe9f-aa82-4d7d-b8c7-eb7d1ba888d4",
              "name": "zoneinfo",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "zoneinfo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "zoneinfo",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "d181691e-b4a6-4063-9eba-6b984402a9a7",
          "name": "role_list",
          "description": "SAML role list",
          "protocol": "saml",
          "attributes": {
            "consent.screen.text": "\${samlRoleListScopeConsentText}",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "724b16d4-8a9b-42d8-850f-99ca1ab3c958",
              "name": "role list",
              "protocol": "saml",
              "protocolMapper": "saml-role-list-mapper",
              "consentRequired": false,
              "config": {
                "single": "false",
                "attribute.nameformat": "Basic",
                "attribute.name": "Role"
              }
            }
          ]
        },
        {
          "id": "915fcb95-81da-4e4c-86ee-73f3b52c83e9",
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${rolesScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "12f0b32d-8911-4028-809b-fc1c0e5e9207",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            },
            {
              "id": "5b997b66-937f-46d3-9e8b-70dca949f682",
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "cdcd6969-a9aa-4de5-adbe-dc83da4184c5",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.\${client_id}.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            }
          ]
        },
        {
          "id": "2daaac74-636f-4074-87a9-d1aba9dffb96",
          "name": "web-origins",
          "description": "OpenID Connect scope for add allowed web origins to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false",
            "consent.screen.text": ""
          },
          "protocolMappers": [
            {
              "id": "752e035f-038d-46ac-b65d-91f863fdd986",
              "name": "allowed web origins",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-allowed-origins-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        }
      ],
      "defaultDefaultClientScopes": [
        "web-origins",
        "email",
        "profile",
        "roles",
        "role_list"
      ],
      "defaultOptionalClientScopes": [
        "offline_access",
        "phone",
        "address",
        "microprofile-jwt"
      ],
      "browserSecurityHeaders": {
        "contentSecurityPolicyReportOnly": "",
        "xContentTypeOptions": "nosniff",
        "xRobotsTag": "none",
        "xFrameOptions": "SAMEORIGIN",
        "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
        "xXSSProtection": "1; mode=block",
        "strictTransportSecurity": "max-age=31536000; includeSubDomains"
      },
      "smtpServer": {},
      "eventsEnabled": false,
      "eventsListeners": [
        "jboss-logging"
      ],
      "enabledEventTypes": [],
      "adminEventsEnabled": false,
      "adminEventsDetailsEnabled": false,
      "identityProviders": [],
      "identityProviderMappers": [],
      "components": {
        "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
          {
            "id": "827fde01-dc1b-4c1f-a529-9ef833ca3432",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "oidc-usermodel-property-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "saml-user-attribute-mapper",
                "saml-user-property-mapper",
                "oidc-address-mapper",
                "oidc-full-name-mapper",
                "saml-role-list-mapper",
                "oidc-usermodel-attribute-mapper"
              ]
            }
          },
          {
            "id": "0a429e7e-be7a-46b4-b42a-d1f8b265ff16",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "5a1ff0b4-250f-48ee-8169-abff30cf7534",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "c79f6629-84a9-467c-81d0-63e20b19f916",
            "name": "Full Scope Disabled",
            "providerId": "scope",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "b6b23ef8-96e8-4e2e-8efe-8003057a8d42",
            "name": "Max Clients Limit",
            "providerId": "max-clients",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "max-clients": [
                "200"
              ]
            }
          },
          {
            "id": "36dfaa02-0252-4448-9cdf-a17abf239f78",
            "name": "Trusted Hosts",
            "providerId": "trusted-hosts",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "host-sending-registration-request-must-match": [
                "true"
              ],
              "client-uris-must-match": [
                "true"
              ]
            }
          },
          {
            "id": "8216421d-34fb-4726-8331-137217657bdb",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "oidc-address-mapper",
                "oidc-usermodel-attribute-mapper",
                "saml-user-property-mapper",
                "saml-user-attribute-mapper",
                "saml-role-list-mapper",
                "oidc-full-name-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-sha256-pairwise-sub-mapper"
              ]
            }
          },
          {
            "id": "d045f3f9-15e6-4e69-a419-0e7ff8a635ef",
            "name": "Consent Required",
            "providerId": "consent-required",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          }
        ],
        "org.keycloak.userprofile.UserProfileProvider": [
          {
            "id": "b05ccf0d-d8ac-4695-bd60-37018f8f94b4",
            "providerId": "declarative-user-profile",
            "subComponents": {},
            "config": {}
          }
        ],
        "org.keycloak.keys.KeyProvider": [
          {
            "id": "62707fae-58f9-4fc2-89fb-0c5d212dc3dc",
            "name": "rsa-generated",
            "providerId": "rsa-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "4a8480bc-96fd-4906-a907-f948a73bab38",
            "name": "hmac-generated",
            "providerId": "hmac-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "HS256"
              ]
            }
          },
          {
            "id": "40c01a32-0c0b-4dbb-9595-e5a5c8d26bc4",
            "name": "aes-generated",
            "providerId": "aes-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          }
        ]
      },
      "internationalizationEnabled": false,
      "supportedLocales": [],
      "authenticationFlows": [
        {
          "id": "491fbbc9-b70b-45bd-8243-2039ae3f115d",
          "alias": "Account verification options",
          "description": "Method with which to verity the existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-email-verification",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "flowAlias": "Verify Existing Account by Re-authentication",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "2c63ad60-76ab-4350-9def-74328bab70d0",
          "alias": "Authentication Options",
          "description": "Authentication options.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "basic-auth",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "basic-auth-otp",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "82b9b584-2243-4893-b58c-4567f34434a6",
          "alias": "Browser - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "e70e7c74-8ab5-411c-b06c-d478a452bee3",
          "alias": "Direct Grant - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "direct-grant-validate-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "4f3e6fdd-9b4d-4dc0-946a-1e1ccae7af71",
          "alias": "First broker login - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "aa66c794-f21b-4663-9de1-9e27a7e425ab",
          "alias": "Handle Existing Account",
          "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-confirm-link",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "Account verification options",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "2d4499a0-399c-4b6c-970c-7b441498f7b9",
          "alias": "Reset - Conditional OTP",
          "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "710f4172-56a5-466e-bc75-ad7405ff62b5",
          "alias": "User creation or linking",
          "description": "Flow for the existing/non-existing user alternatives",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "create unique user config",
              "authenticator": "idp-create-user-if-unique",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "flowAlias": "Handle Existing Account",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "da7d3a39-7077-4354-9ffc-5b9f79fbaf0d",
          "alias": "Verify Existing Account by Re-authentication",
          "description": "Reauthentication of existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "flowAlias": "First broker login - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "6285968e-6200-463a-a329-8c60bc8fe9fc",
          "alias": "browser",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "flowAlias": "forms",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "10393f04-3922-40db-a622-2655dfcae45d",
          "alias": "clients",
          "description": "Base authentication for clients",
          "providerId": "client-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "client-secret",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-secret-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-x509",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 40,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "4e5e164e-3c7e-4ca5-a10c-d7b817a7d468",
          "alias": "direct grant",
          "description": "OpenID Connect Resource Owner Grant",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "direct-grant-validate-username",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "direct-grant-validate-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 30,
              "flowAlias": "Direct Grant - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "80f88b0b-70de-4e4c-ae56-0293558301c5",
          "alias": "docker auth",
          "description": "Used by Docker clients to authenticate against the IDP",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "docker-http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "821af41a-6e77-4e8c-85a6-0280d5268909",
          "alias": "first broker login",
          "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "review profile config",
              "authenticator": "idp-review-profile",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "User creation or linking",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "c4058fb0-ad93-4595-96ef-7d4bc5cbef4d",
          "alias": "forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "flowAlias": "Browser - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "a2a1d056-2521-498f-b345-b7db56f9342c",
          "alias": "http challenge",
          "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "no-cookie-redirect",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "Authentication Options",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "13e68e1b-4b44-4f21-a253-5b2dea24404b",
          "alias": "registration",
          "description": "registration flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 10,
              "flowAlias": "registration form",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "e7588789-22d4-459b-96d6-1b480520f487",
          "alias": "registration form",
          "description": "registration form",
          "providerId": "form-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-user-creation",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-profile-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 40,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-password-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 50,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-recaptcha-action",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 60,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "8dc399ef-cf7d-46d5-9688-678c146ea8c4",
          "alias": "reset credentials",
          "description": "Reset credentials for a user if they forgot their password or something",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "reset-credentials-choose-user",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-credential-email",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 40,
              "flowAlias": "Reset - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "47ab5a7a-f67a-4a66-bdac-932ee230000d",
          "alias": "saml ecp",
          "description": "SAML ECP Profile Authentication Flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        }
      ],
      "authenticatorConfig": [
        {
          "id": "b12be521-4e2b-42f0-a1a2-f1ba47ab4854",
          "alias": "create unique user config",
          "config": {
            "require.password.update.after.registration": "false"
          }
        },
        {
          "id": "58bf2d56-1c45-4acc-9005-23b978d961d7",
          "alias": "review profile config",
          "config": {
            "update.profile.on.first.login": "missing"
          }
        }
      ],
      "requiredActions": [
        {
          "alias": "CONFIGURE_TOTP",
          "name": "Configure OTP",
          "providerId": "CONFIGURE_TOTP",
          "enabled": true,
          "defaultAction": false,
          "priority": 10,
          "config": {}
        },
        {
          "alias": "terms_and_conditions",
          "name": "Terms and Conditions",
          "providerId": "terms_and_conditions",
          "enabled": false,
          "defaultAction": false,
          "priority": 20,
          "config": {}
        },
        {
          "alias": "UPDATE_PASSWORD",
          "name": "Update Password",
          "providerId": "UPDATE_PASSWORD",
          "enabled": true,
          "defaultAction": false,
          "priority": 30,
          "config": {}
        },
        {
          "alias": "UPDATE_PROFILE",
          "name": "Update Profile",
          "providerId": "UPDATE_PROFILE",
          "enabled": true,
          "defaultAction": false,
          "priority": 40,
          "config": {}
        },
        {
          "alias": "VERIFY_EMAIL",
          "name": "Verify Email",
          "providerId": "VERIFY_EMAIL",
          "enabled": true,
          "defaultAction": false,
          "priority": 50,
          "config": {}
        },
        {
          "alias": "delete_account",
          "name": "Delete Account",
          "providerId": "delete_account",
          "enabled": false,
          "defaultAction": false,
          "priority": 60,
          "config": {}
        },
        {
          "alias": "update_user_locale",
          "name": "Update User Locale",
          "providerId": "update_user_locale",
          "enabled": true,
          "defaultAction": false,
          "priority": 1000,
          "config": {}
        }
      ],
      "browserFlow": "browser",
      "registrationFlow": "registration",
      "directGrantFlow": "direct grant",
      "resetCredentialsFlow": "reset credentials",
      "clientAuthenticationFlow": "clients",
      "dockerAuthenticationFlow": "docker auth",
      "attributes": {
        "cibaBackchannelTokenDeliveryMode": "poll",
        "cibaExpiresIn": "120",
        "cibaAuthRequestedUserHint": "login_hint",
        "oauth2DeviceCodeLifespan": "600",
        "clientOfflineSessionMaxLifespan": "0",
        "oauth2DevicePollingInterval": "5",
        "clientSessionIdleTimeout": "0",
        "clientSessionMaxLifespan": "0",
        "parRequestUriLifespan": "60",
        "clientOfflineSessionIdleTimeout": "0",
        "cibaInterval": "5",
        "frontendUrl": ""
      },
      "keycloakVersion": "23.0.1",
      "userManagedAccessAllowed": false,
      "clientProfiles": {
        "profiles": []
      },
      "clientPolicies": {
        "policies": []
      },
      "users": [
        {
          "id": "f742ba6f-1d8a-4dec-bf15-e02dab508283",
          "createdTimestamp": 1598681172054,
          "username": "service-account-internal",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "serviceAccountClientId": "internal",
          "disableableCredentialTypes": [],
          "requiredActions": [],
          "realmRoles": [
            "default-roles-jhipster"
          ],
          "notBefore": 0,
          "groups": []
        },
        {
          "id": "4c973896-5761-41fc-8217-07c5d13a004b",
          "createdTimestamp": 1505479415590,
          "username": "admin",
          "enabled": true,
          "totp": false,
          "emailVerified": true,
          "firstName": "Admin",
          "lastName": "Administrator",
          "email": "admin@localhost",
          "credentials": [
            {
              "id": "b860462b-9b02-48ba-9523-d3a8926a917b",
              "type": "password",
              "createdDate": 1505479429154,
              "secretData": "{\\"value\\":\\"4pf9K2jWSCcHC+CwsZP/qidN5pSmDUe6AX6wBerSGdBVKkExay8MWKx+EKmaaObZW6FVsD8vdW/ZsyUFD9gJ1Q==\\",\\"salt\\":\\"1/qNkZ5kr77jOMOBPBogGw==\\"}",
              "credentialData": "{\\"hashIterations\\":27500,\\"algorithm\\":\\"pbkdf2-sha256\\"}"
            }
          ],
          "disableableCredentialTypes": [],
          "requiredActions": [],
          "realmRoles": ["offline_access", "uma_authorization"],
          "clientRoles": {
            "account": ["view-profile", "manage-account"]
          },
          "notBefore": 0,
          "groups": ["/Admins", "/Users"]
        },
        {
          "id": "c4af4e2f-b432-4c3b-8405-cca86cd5b97b",
          "createdTimestamp": 1505479373742,
          "username": "user",
          "enabled": true,
          "totp": false,
          "emailVerified": true,
          "firstName": "",
          "lastName": "User",
          "email": "user@localhost",
          "credentials": [
            {
              "id": "7821832b-1e82-45a2-b8d3-f1a6ad909e64",
              "type": "password",
              "createdDate": 1505479392766,
              "secretData": "{\\"value\\":\\"MbKsMgWPnZyImih8s4SaoCSCq+XIY/c6S9F93sXEidHF1TjPWxCqMkec0+o3860CMLXHt3az61cIJOWI0FW9aw==\\",\\"salt\\":\\"fmpBI1r8R1u75hDLMUlwBw==\\"}",
              "credentialData": "{\\"hashIterations\\":27500,\\"algorithm\\":\\"pbkdf2-sha256\\"}"
            }
          ],
          "disableableCredentialTypes": [],
          "requiredActions": [],
          "realmRoles": ["offline_access", "uma_authorization"],
          "clientRoles": {
            "account": ["view-profile", "manage-account"]
          },
          "notBefore": 0,
          "groups": ["/Users"]
        }
      ]
    }
",
    "stateCleared": "modified",
  },
  "keycloak-k8s/keycloak-postgresql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: keycloak-postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-postgresql
  namespace: default
  labels:
    app: keycloak-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak-postgresql
  template:
    metadata:
      labels:
        app: keycloak-postgresql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: keycloak-postgresql-pvc
      containers:
        - name: postgres
          image: postgresql-placeholder
          env:
            - name: POSTGRES_USER
              value: keycloak
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgresql
  namespace: default
spec:
  selector:
    app: keycloak-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "keycloak-k8s/keycloak.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: default
  labels:
    app: keycloak
spec:
  ports:
    - name: http
      port: 9080
      targetPort: 8080
    - name: https
      port: 9443
      targetPort: 8443
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: keycloak
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: default
spec:
  volumeClaimTemplates: []
  replicas: 2
  serviceName: keycloak
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: keycloak-placeholder
          args: "start --import-realm"
          env:
            - name: KEYCLOAK_ADMIN
              value: "admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: "admin"
            - name: KC_DB
              value: postgres
            - name: KC_DB_URL_HOST
              value: keycloak-postgresql.default.svc.cluster.local
            - name: KC_DB_USERNAME
              value: keycloak
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgresql-password
            - name: KC_FEATURES
              value: scripts
            - name: KC_PROXY
              value: "edge"
            - name: KC_HOSTNAME_URL
              value: https://keycloak.default.example.com
            - name: KC_HOSTNAME_ADMIN_URL
              value: https://keycloak.default.example.com
            - name: KC_CACHE_STACK
              value: "kubernetes"
            - name: JAVA_OPTS_APPEND
              value: "-Djgroups.dns.query=keycloak.default.svc.cluster.local"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          readinessProbe:
            httpGet:
              path: /realms/master
              port: 8080
          volumeMounts:
            - name: keycloak-volume
              mountPath: /opt/keycloak/data/import
      volumes:
        - name: keycloak-volume
          configMap:
            name: keycloak-config
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
        echo "#####################################################"
        echo "Please find the below useful endpoints,"
        echo "Gateway - http://jhgate.default.example.com"
        echo "Keycloak - https://keycloak.default.example.com"
        echo "#####################################################"
}

default() {
    suffix=k8s
    kubectl apply -f cert-manager/
    kubectl apply -f keycloak-\${suffix}/
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - jhgate-k8s/jhgate-ingress.yml
  # cert-manager
  - cert-manager/letsencrypt-staging-ca-secret.yml
  - cert-manager/letsencrypt-staging-issuer.yml
  # keycloak
  - keycloak-k8s/keycloak-configmap.yml
  - keycloak-k8s/keycloak-postgresql.yml
  - keycloak-k8s/keycloak.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway and ingressType gke should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes gateway and ingressType nginx should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "example.com",
    "ingressType": "nginx",
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "Ingress",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Keycloak

The following Keycloak [best practices](https://www.keycloak.org/server/configuration-production) for production are included in the generated k8s: a production grade database PostgreSQL, the \`edge\` deployment mode, high availability through clustered deployment, and \`HOSTNAME\` configuration. HTTP/TLS is not enabled for ease of deployment, but it is required for a secure exchange of credentials and other sensitive data with Keycloak, preventing several attack vectors.

If you are using minikube, install the ingress controller for [cloud deployment](https://kubernetes.github.io/ingress-nginx/deploy/#gce-gke) (the minikube ingress add on does not work on macOS or Windows).

\`\`\`
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.7.0/deploy/static/provider/cloud/deploy.yaml
\`\`\`

Then run \`minikube tunnel\` in a separate terminal window.
Get the \`ingress-nginx-controller\` external IP:

\`\`\`
kubectl get svc/ingress-nginx-controller -n ingress-nginx
\`\`\`

The output will look like the following:

\`\`\`
NAME                       TYPE           CLUSTER-IP      EXTERNAL-IP     PORT(S)                      AGE
ingress-nginx-controller   LoadBalancer   10.103.44.162   10.103.44.162   80:30982/TCP,443:32664/TCP   27s
\`\`\`

When running the \`jhipster k8s\` generator, it will prompt for a root FQDN (fully qualified domain name). You can use \`nip.io\` as the DNS provider and set \`<external-ip>.nip.io\`.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: "-Xmx256m -Xms256m"
            - name: SPRING_SECURITY_OAUTH2_CLIENT_PROVIDER_OIDC_ISSUER_URI
              value: http://keycloak.default.example.com/realms/jhipster
            - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_ID
              value: web_app
            - name: SPRING_SECURITY_OAUTH2_CLIENT_REGISTRATION_OIDC_CLIENT_SECRET
              value: web_app
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-ingress.yml": {
    "contents": "apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: jhgate
  namespace: default
spec:
  ingressClassName: nginx
  rules:
    - host: jhgate.default.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: jhgate
                port:
                  name: http
    - host: keycloak.default.example.com
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: keycloak
                port:
                  number: 9080
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: ClusterIP
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "keycloak-k8s/keycloak-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: keycloak-config
  namespace: default
#common configuration shared between all applications
data:
  jhipster-realm.json: |
    {
      "id": "jhipster",
      "realm": "jhipster",
      "displayName": "JHipster",
      "notBefore": 0,
      "defaultSignatureAlgorithm": "RS256",
      "revokeRefreshToken": false,
      "refreshTokenMaxReuse": 0,
      "accessTokenLifespan": 300,
      "accessTokenLifespanForImplicitFlow": 900,
      "ssoSessionIdleTimeout": 1800,
      "ssoSessionMaxLifespan": 36000,
      "ssoSessionIdleTimeoutRememberMe": 0,
      "ssoSessionMaxLifespanRememberMe": 0,
      "offlineSessionIdleTimeout": 2592000,
      "offlineSessionMaxLifespanEnabled": false,
      "offlineSessionMaxLifespan": 5184000,
      "clientSessionIdleTimeout": 0,
      "clientSessionMaxLifespan": 0,
      "clientOfflineSessionIdleTimeout": 0,
      "clientOfflineSessionMaxLifespan": 0,
      "accessCodeLifespan": 60,
      "accessCodeLifespanUserAction": 300,
      "accessCodeLifespanLogin": 1800,
      "actionTokenGeneratedByAdminLifespan": 43200,
      "actionTokenGeneratedByUserLifespan": 300,
      "oauth2DeviceCodeLifespan": 600,
      "oauth2DevicePollingInterval": 5,
      "enabled": true,
      "sslRequired": "external",
      "registrationAllowed": false,
      "registrationEmailAsUsername": false,
      "rememberMe": false,
      "verifyEmail": false,
      "loginWithEmailAllowed": true,
      "duplicateEmailsAllowed": false,
      "resetPasswordAllowed": false,
      "editUsernameAllowed": false,
      "bruteForceProtected": false,
      "permanentLockout": false,
      "maxFailureWaitSeconds": 900,
      "minimumQuickLoginWaitSeconds": 60,
      "waitIncrementSeconds": 60,
      "quickLoginCheckMilliSeconds": 1000,
      "maxDeltaTimeSeconds": 43200,
      "failureFactor": 30,
      "roles": {
        "realm": [
          {
            "id": "8e986fb5-dafb-43bf-a7c2-7e57572d3d80",
            "name": "ROLE_ADMIN",
            "description": "Jhipster administrator role",
            "composite": false,
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          },
          {
            "id": "e1b19afd-f612-4a79-bdf8-26a99b89b10b",
            "name": "offline_access",
            "description": "\${role_offline-access}",
            "composite": false,
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          },
          {
            "id": "ec5705e1-fc1d-4d21-8364-abd3bd4efcd0",
            "name": "ROLE_USER",
            "description": "Jhipster user role",
            "composite": false,
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          },
          {
            "id": "d2b73e7b-a2d7-40e9-8ebc-2af00454e8aa",
            "name": "default-roles-jhipster",
            "description": "\${role_default-roles}",
            "composite": true,
            "composites": {
              "realm": [
                "offline_access",
                "uma_authorization"
              ],
              "client": {
                "account": [
                  "view-profile",
                  "manage-account"
                ]
              }
            },
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          },
          {
            "id": "2eec61d0-9581-4dbf-8c7b-f32dc5fac3ce",
            "name": "uma_authorization",
            "description": "\${role_uma_authorization}",
            "composite": false,
            "clientRole": false,
            "containerId": "jhipster",
            "attributes": {}
          }
        ],
        "client": {
          "internal": [],
          "realm-management": [
            {
              "id": "a6249a12-d76c-4514-b137-e3018b243e25",
              "name": "manage-authorization",
              "description": "\${role_manage-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "a28bc401-c5ad-4fab-aef4-42629988c10b",
              "name": "view-realm",
              "description": "\${role_view-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "464bca1f-136f-45de-a7fc-b976a185ce7e",
              "name": "view-users",
              "description": "\${role_view-users}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-users",
                    "query-groups"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "98c2fa77-d3c8-4f68-b9f4-b79f87efd4a9",
              "name": "query-users",
              "description": "\${role_query-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "6b82bfdb-c8de-4274-95b4-a683eb4ead50",
              "name": "view-identity-providers",
              "description": "\${role_view-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "3c6b9cfe-80c4-41d5-a5ac-0cadebacfc8d",
              "name": "manage-identity-providers",
              "description": "\${role_manage-identity-providers}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "23676fb8-235a-4e54-a0d0-9bed1ccbe2f8",
              "name": "query-groups",
              "description": "\${role_query-groups}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "b71fe952-bb06-4e4a-91ef-2d2714f770e1",
              "name": "impersonation",
              "description": "\${role_impersonation}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "0813cbd0-c73d-469d-a54d-84a865c302af",
              "name": "manage-events",
              "description": "\${role_manage-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "c7a4f4c1-9089-458c-a765-f6d22ea94690",
              "name": "view-authorization",
              "description": "\${role_view-authorization}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "2e1bc884-e9d3-45d2-909c-2777a78ca8ae",
              "name": "manage-realm",
              "description": "\${role_manage-realm}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "0a05451e-7d64-4e87-b585-f1143ce5752e",
              "name": "query-clients",
              "description": "\${role_query-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "dfad4d08-6d75-42b6-8699-4886e47bc464",
              "name": "view-events",
              "description": "\${role_view-events}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "392ed0a3-f6ad-48a1-b201-648037d2b4bd",
              "name": "realm-admin",
              "description": "\${role_realm-admin}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "manage-authorization",
                    "view-realm",
                    "view-users",
                    "query-users",
                    "manage-identity-providers",
                    "view-identity-providers",
                    "query-groups",
                    "impersonation",
                    "manage-events",
                    "query-clients",
                    "manage-realm",
                    "view-authorization",
                    "view-events",
                    "view-clients",
                    "create-client",
                    "manage-clients",
                    "manage-users",
                    "query-realms"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "d7efdf61-affb-42a1-bcb0-b2c30d87a39e",
              "name": "view-clients",
              "description": "\${role_view-clients}",
              "composite": true,
              "composites": {
                "client": {
                  "realm-management": [
                    "query-clients"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "14da8e56-5c8b-4764-96da-250449a32fd4",
              "name": "create-client",
              "description": "\${role_create-client}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "88e6a9f5-259c-487d-af35-2a98da066816",
              "name": "manage-clients",
              "description": "\${role_manage-clients}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "932273a7-c02b-43db-81c5-96a0dc45e454",
              "name": "manage-users",
              "description": "\${role_manage-users}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            },
            {
              "id": "e3edf335-cec5-4012-a00d-fcac045052e1",
              "name": "query-realms",
              "description": "\${role_query-realms}",
              "composite": false,
              "clientRole": true,
              "containerId": "898488c8-e260-41c5-a463-7ceea14d587a",
              "attributes": {}
            }
          ],
          "jhipster-control-center": [],
          "security-admin-console": [],
          "web_app": [],
          "admin-cli": [],
          "account-console": [],
          "broker": [
            {
              "id": "5b08a930-9f1d-4030-ae75-92c1e4c9352c",
              "name": "read-token",
              "description": "\${role_read-token}",
              "composite": false,
              "clientRole": true,
              "containerId": "88e1225b-f0b9-46ba-8efd-f2c10ce23058",
              "attributes": {}
            }
          ],
          "account": [
            {
              "id": "a88c56b8-6bc9-418a-92bc-7a17e7707f60",
              "name": "view-profile",
              "description": "\${role_view-profile}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "0cb954ab-987f-482a-b2d7-0d481ba1d532",
              "name": "view-applications",
              "description": "\${role_view-applications}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "6450156d-7526-48f2-8ea0-bb1e51f9eefa",
              "name": "manage-account",
              "description": "\${role_manage-account}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "manage-account-links"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "e5b2ba76-4c36-4ba1-b210-89a1ac3c6bbe",
              "name": "view-consent",
              "description": "\${role_view-consent}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "35537940-67a6-4217-881b-1ff98109b374",
              "name": "manage-consent",
              "description": "\${role_manage-consent}",
              "composite": true,
              "composites": {
                "client": {
                  "account": [
                    "view-consent"
                  ]
                }
              },
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "5ebf404b-7805-4da2-abb4-9db7d3b36120",
              "name": "delete-account",
              "description": "\${role_delete-account}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            },
            {
              "id": "a7f45fab-19c3-4c48-aca3-85f828ca0fed",
              "name": "manage-account-links",
              "description": "\${role_manage-account-links}",
              "composite": false,
              "clientRole": true,
              "containerId": "6cc5a716-0880-47dc-b714-9a4967246b2f",
              "attributes": {}
            }
          ]
        }
      },
      "groups": [
        {
          "id": "afb0c768-ab0f-454c-a8ea-bc9e70b50248",
          "name": "Admins",
          "path": "/Admins",
          "attributes": {},
          "realmRoles": [
            "ROLE_ADMIN"
          ],
          "clientRoles": {},
          "subGroups": []
        },
        {
          "id": "672767bb-4ab0-4d37-93a1-9b6c2416b6b2",
          "name": "Users",
          "path": "/Users",
          "attributes": {},
          "realmRoles": [
            "ROLE_USER"
          ],
          "clientRoles": {},
          "subGroups": []
        }
      ],
      "defaultRole": {
        "id": "d2b73e7b-a2d7-40e9-8ebc-2af00454e8aa",
        "name": "default-roles-jhipster",
        "description": "\${role_default-roles}",
        "composite": true,
        "clientRole": false,
        "containerId": "jhipster"
      },
      "requiredCredentials": [
        "password"
      ],
      "otpPolicyType": "totp",
      "otpPolicyAlgorithm": "HmacSHA1",
      "otpPolicyInitialCounter": 0,
      "otpPolicyDigits": 6,
      "otpPolicyLookAheadWindow": 1,
      "otpPolicyPeriod": 30,
      "otpSupportedApplications": [
        "FreeOTP",
        "Google Authenticator"
      ],
      "localizationTexts": {},
      "webAuthnPolicyRpEntityName": "keycloak",
      "webAuthnPolicySignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyRpId": "",
      "webAuthnPolicyAttestationConveyancePreference": "not specified",
      "webAuthnPolicyAuthenticatorAttachment": "not specified",
      "webAuthnPolicyRequireResidentKey": "not specified",
      "webAuthnPolicyUserVerificationRequirement": "not specified",
      "webAuthnPolicyCreateTimeout": 0,
      "webAuthnPolicyAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyAcceptableAaguids": [],
      "webAuthnPolicyExtraOrigins": [],
      "webAuthnPolicyPasswordlessRpEntityName": "keycloak",
      "webAuthnPolicyPasswordlessSignatureAlgorithms": [
        "ES256"
      ],
      "webAuthnPolicyPasswordlessRpId": "",
      "webAuthnPolicyPasswordlessAttestationConveyancePreference": "not specified",
      "webAuthnPolicyPasswordlessAuthenticatorAttachment": "not specified",
      "webAuthnPolicyPasswordlessRequireResidentKey": "not specified",
      "webAuthnPolicyPasswordlessUserVerificationRequirement": "not specified",
      "webAuthnPolicyPasswordlessCreateTimeout": 0,
      "webAuthnPolicyPasswordlessAvoidSameAuthenticatorRegister": false,
      "webAuthnPolicyPasswordlessAcceptableAaguids": [],
      "webAuthnPolicyPasswordlessExtraOrigins": [],
      "scopeMappings": [
        {
          "clientScope": "offline_access",
          "roles": [
            "offline_access"
          ]
        }
      ],
      "clientScopeMappings": {
        "account": [
          {
            "client": "account-console",
            "roles": [
              "manage-account"
            ]
          }
        ]
      },
      "clients": [
        {
          "id": "6cc5a716-0880-47dc-b714-9a4967246b2f",
          "clientId": "account",
          "name": "\${client_account}",
          "rootUrl": "\${authBaseUrl}",
          "baseUrl": "/realms/jhipster/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "/realms/jhipster/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "fb0a4870-06db-4f9d-9d44-baf51a00cc34",
          "clientId": "account-console",
          "name": "\${client_account-console}",
          "rootUrl": "\${authBaseUrl}",
          "baseUrl": "/realms/jhipster/account/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "/realms/jhipster/account/*"
          ],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "c5c4ebe5-d009-4f96-b143-1b36d770eafb",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "bb166356-838d-445e-94e3-9330ad7ab51b",
          "clientId": "admin-cli",
          "name": "\${client_admin-cli}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": true,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "88e1225b-f0b9-46ba-8efd-f2c10ce23058",
          "clientId": "broker",
          "name": "\${client_broker}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "10e6ea34-9f1e-49ef-8e28-7eb851459694",
          "clientId": "internal",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "internal",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": false,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": true,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "post.logout.redirect.uris": "+",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "protocolMappers": [
            {
              "id": "ff2f50b4-5409-4789-bdda-fe731f14fbff",
              "name": "Client IP Address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientAddress",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientAddress",
                "jsonType.label": "String"
              }
            },
            {
              "id": "72f9ae74-9e95-4b7b-a709-5086137410bb",
              "name": "Client ID",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientId",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientId",
                "jsonType.label": "String"
              }
            },
            {
              "id": "029bf6c8-5a19-4798-984c-bdb205d752d5",
              "name": "Client Host",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usersessionmodel-note-mapper",
              "consentRequired": false,
              "config": {
                "user.session.note": "clientHost",
                "userinfo.token.claim": "true",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "clientHost",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "1acf7ad0-68cb-46a6-a3e4-8b2f2abecb85",
          "clientId": "jhipster-control-center",
          "rootUrl": "http://localhost:7419",
          "adminUrl": "http://localhost:7419",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "jhipster-control-center",
          "redirectUris": [
            "dev.localhost.ionic:*",
            "http://127.0.0.1:*",
            "http://localhost:*",
            "https://127.0.0.1:*",
            "https://localhost:*"
          ],
          "webOrigins": [
            "*"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": true,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "post.logout.redirect.uris": "+",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "jhipster",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "898488c8-e260-41c5-a463-7ceea14d587a",
          "clientId": "realm-management",
          "name": "\${client_realm-management}",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [],
          "webOrigins": [],
          "notBefore": 0,
          "bearerOnly": true,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": false,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "989d2b96-b820-4f9b-aa17-55e6488b08c8",
          "clientId": "security-admin-console",
          "name": "\${client_security-admin-console}",
          "rootUrl": "\${authAdminUrl}",
          "baseUrl": "/admin/jhipster/console/",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "**********",
          "redirectUris": [
            "/admin/jhipster/console/*"
          ],
          "webOrigins": [
            "+"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": false,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "post.logout.redirect.uris": "+",
            "pkce.code.challenge.method": "S256"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": false,
          "nodeReRegistrationTimeout": 0,
          "protocolMappers": [
            {
              "id": "5fd34289-c644-411a-874c-849475d9d102",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            }
          ],
          "defaultClientScopes": [
            "web-origins",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        },
        {
          "id": "6e8deddb-b4d6-4e2e-b389-b397d3f74fcd",
          "clientId": "web_app",
          "rootUrl": "http://localhost:8080",
          "adminUrl": "http://localhost:8080",
          "surrogateAuthRequired": false,
          "enabled": true,
          "alwaysDisplayInConsole": false,
          "clientAuthenticatorType": "client-secret",
          "secret": "web_app",
          "redirectUris": [
            "http://jhgate.default.example.com/*",
            "https://jhgate.default.example.com/*", "http://localhost:8080/*",
            "https://localhost:8080/*", 
            "http://localhost:8100/*",
            "http://127.0.0.1:8761/*",
            "http://localhost:9000/*",
            "dev.localhost.ionic:*"
          ],
          "webOrigins": [
            "http://jhgate.default.example.com",
            "https://jhgate.default.example.com", "http://localhost:8080",
            "https://localhost:8080", 
            "http://localhost:8100",
            "http://127.0.0.1:8761",
            "http://localhost:9000"
          ],
          "notBefore": 0,
          "bearerOnly": false,
          "consentRequired": false,
          "standardFlowEnabled": true,
          "implicitFlowEnabled": true,
          "directAccessGrantsEnabled": false,
          "serviceAccountsEnabled": false,
          "publicClient": true,
          "frontchannelLogout": false,
          "protocol": "openid-connect",
          "attributes": {
            "saml.assertion.signature": "false",
            "saml.force.post.binding": "false",
            "saml.multivalued.roles": "false",
            "saml.encrypt": "false",
            "post.logout.redirect.uris": "+",
            "saml.server.signature": "false",
            "saml.server.signature.keyinfo.ext": "false",
            "exclude.session.state.from.auth.response": "false",
            "saml_force_name_id_format": "false",
            "saml.client.signature": "false",
            "tls.client.certificate.bound.access.tokens": "false",
            "saml.authnstatement": "false",
            "display.on.consent.screen": "false",
            "saml.onetimeuse.condition": "false"
          },
          "authenticationFlowBindingOverrides": {},
          "fullScopeAllowed": true,
          "nodeReRegistrationTimeout": -1,
          "defaultClientScopes": [
            "web-origins",
            "jhipster",
            "roles",
            "profile",
            "email"
          ],
          "optionalClientScopes": [
            "address",
            "phone",
            "offline_access",
            "microprofile-jwt"
          ]
        }
      ],
      "clientScopes": [
        {
          "id": "52d73c82-423c-44a8-b2ec-1e13f4cd6065",
          "name": "address",
          "description": "OpenID Connect built-in scope: address",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${addressScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "98230752-36b9-4755-8661-a7de1926d0d4",
              "name": "address",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-address-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute.formatted": "formatted",
                "user.attribute.country": "country",
                "user.attribute.postal_code": "postal_code",
                "userinfo.token.claim": "true",
                "user.attribute.street": "street",
                "id.token.claim": "true",
                "user.attribute.region": "region",
                "access.token.claim": "true",
                "user.attribute.locality": "locality"
              }
            }
          ]
        },
        {
          "id": "44d24405-87bf-4b37-a627-e3fdabb93f50",
          "name": "email",
          "description": "OpenID Connect built-in scope: email",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${emailScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "36800088-6d17-4c18-93e8-2bc93901d8b7",
              "name": "email",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "email",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email",
                "jsonType.label": "String"
              }
            },
            {
              "id": "3ea34afd-30b5-4e5d-a836-dbda439dce6f",
              "name": "email verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "emailVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "email_verified",
                "jsonType.label": "boolean"
              }
            }
          ]
        },
        {
          "id": "9816de82-24b7-42fe-a85a-1264868ec293",
          "name": "jhipster",
          "description": "Jhipster specific claims",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "0f9c9347-aad6-4bff-94f4-e11937f2ad33",
              "name": "langKey",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "langKey",
                "id.token.claim": "false",
                "access.token.claim": "false",
                "claim.name": "langKey",
                "jsonType.label": "String"
              }
            },
            {
              "id": "69729907-8d1c-4961-81c0-91766f548cc9",
              "name": "roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "id.token.claim": "false",
                "access.token.claim": "true",
                "claim.name": "roles",
                "jsonType.label": "String"
              }
            },
            {
              "id": "336acfe2-a717-492a-9055-5b70e808f42f",
              "name": "login",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "preferred_username",
                "id.token.claim": "false",
                "access.token.claim": "false",
                "claim.name": "login",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "87d299f2-434f-4abd-8cb0-a16231acd713",
          "name": "microprofile-jwt",
          "description": "Microprofile - JWT built-in scope",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "false"
          },
          "protocolMappers": [
            {
              "id": "fce09d51-cb85-4ccd-b83d-865a4d4bf650",
              "name": "groups",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "multivalued": "true",
                "userinfo.token.claim": "true",
                "user.attribute": "foo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "groups",
                "jsonType.label": "String"
              }
            },
            {
              "id": "3d1ee7e2-b7e1-4504-bd52-b47a2cb10eec",
              "name": "upn",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "upn",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "0399b625-22d7-4d68-b4db-fd1dc2effacc",
          "name": "offline_access",
          "description": "OpenID Connect built-in scope: offline_access",
          "protocol": "openid-connect",
          "attributes": {
            "consent.screen.text": "\${offlineAccessScopeConsentText}",
            "display.on.consent.screen": "true"
          }
        },
        {
          "id": "2b867b2d-3373-43ff-b50f-ea37a5e1c390",
          "name": "phone",
          "description": "OpenID Connect built-in scope: phone",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${phoneScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "daa0191b-20d1-4f71-b191-6c48a37e3677",
              "name": "phone number",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumber",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number",
                "jsonType.label": "String"
              }
            },
            {
              "id": "32213de7-12f7-4864-b696-c8e6c5e0c26e",
              "name": "phone number verified",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "phoneNumberVerified",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "phone_number_verified",
                "jsonType.label": "boolean"
              }
            }
          ]
        },
        {
          "id": "60a44832-9776-449f-94cd-fa8c24a75f35",
          "name": "profile",
          "description": "OpenID Connect built-in scope: profile",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "true",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${profileScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "a59584ab-7a7c-4b23-95b5-be8dbbfadc6f",
              "name": "family name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "lastName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "family_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "d382c1dc-d5d8-479e-8809-f0a618113a07",
              "name": "website",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "website",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "website",
                "jsonType.label": "String"
              }
            },
            {
              "id": "559f86c1-1187-498d-8354-723f4ea5721c",
              "name": "full name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-full-name-mapper",
              "consentRequired": false,
              "config": {
                "id.token.claim": "true",
                "access.token.claim": "true",
                "userinfo.token.claim": "true"
              }
            },
            {
              "id": "0925e106-a8e2-4ad1-b75e-4147d185894a",
              "name": "updated at",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "updatedAt",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "updated_at",
                "jsonType.label": "String"
              }
            },
            {
              "id": "eb8e2c73-5c65-4b53-8d55-46edef61315b",
              "name": "locale",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "locale",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "locale",
                "jsonType.label": "String"
              }
            },
            {
              "id": "4c109376-01bc-4b69-a3c0-4b830ecad674",
              "name": "middle name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "middleName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "middle_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "b3813956-e556-4b57-a06b-f71b0d6f3d47",
              "name": "nickname",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "nickname",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "nickname",
                "jsonType.label": "String"
              }
            },
            {
              "id": "28beb4c0-029b-4aa5-ad5f-6d824ca67e15",
              "name": "username",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "username",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "preferred_username",
                "jsonType.label": "String"
              }
            },
            {
              "id": "53d681bc-ec29-4f57-924b-ff5bd22d4093",
              "name": "profile",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "profile",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "profile",
                "jsonType.label": "String"
              }
            },
            {
              "id": "12ba8e12-157d-4729-918b-0d74fa444fba",
              "name": "picture",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "picture",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "picture",
                "jsonType.label": "String"
              }
            },
            {
              "id": "ddb818fe-8e4a-4b26-9c5d-2467a26af6dc",
              "name": "gender",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "gender",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "gender",
                "jsonType.label": "String"
              }
            },
            {
              "id": "f78b1746-2be1-45f4-9c1e-1f6141ccdb65",
              "name": "birthdate",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "birthdate",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "birthdate",
                "jsonType.label": "String"
              }
            },
            {
              "id": "7723245c-4952-4822-86ae-084048b1f2f2",
              "name": "given name",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-property-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "firstName",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "given_name",
                "jsonType.label": "String"
              }
            },
            {
              "id": "b192fe9f-aa82-4d7d-b8c7-eb7d1ba888d4",
              "name": "zoneinfo",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-attribute-mapper",
              "consentRequired": false,
              "config": {
                "userinfo.token.claim": "true",
                "user.attribute": "zoneinfo",
                "id.token.claim": "true",
                "access.token.claim": "true",
                "claim.name": "zoneinfo",
                "jsonType.label": "String"
              }
            }
          ]
        },
        {
          "id": "d181691e-b4a6-4063-9eba-6b984402a9a7",
          "name": "role_list",
          "description": "SAML role list",
          "protocol": "saml",
          "attributes": {
            "consent.screen.text": "\${samlRoleListScopeConsentText}",
            "display.on.consent.screen": "true"
          },
          "protocolMappers": [
            {
              "id": "724b16d4-8a9b-42d8-850f-99ca1ab3c958",
              "name": "role list",
              "protocol": "saml",
              "protocolMapper": "saml-role-list-mapper",
              "consentRequired": false,
              "config": {
                "single": "false",
                "attribute.nameformat": "Basic",
                "attribute.name": "Role"
              }
            }
          ]
        },
        {
          "id": "915fcb95-81da-4e4c-86ee-73f3b52c83e9",
          "name": "roles",
          "description": "OpenID Connect scope for add user roles to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "true",
            "consent.screen.text": "\${rolesScopeConsentText}"
          },
          "protocolMappers": [
            {
              "id": "12f0b32d-8911-4028-809b-fc1c0e5e9207",
              "name": "audience resolve",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-audience-resolve-mapper",
              "consentRequired": false,
              "config": {}
            },
            {
              "id": "5b997b66-937f-46d3-9e8b-70dca949f682",
              "name": "realm roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-realm-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "realm_access.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            },
            {
              "id": "cdcd6969-a9aa-4de5-adbe-dc83da4184c5",
              "name": "client roles",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-usermodel-client-role-mapper",
              "consentRequired": false,
              "config": {
                "user.attribute": "foo",
                "access.token.claim": "true",
                "claim.name": "resource_access.\${client_id}.roles",
                "jsonType.label": "String",
                "multivalued": "true"
              }
            }
          ]
        },
        {
          "id": "2daaac74-636f-4074-87a9-d1aba9dffb96",
          "name": "web-origins",
          "description": "OpenID Connect scope for add allowed web origins to the access token",
          "protocol": "openid-connect",
          "attributes": {
            "include.in.token.scope": "false",
            "display.on.consent.screen": "false",
            "consent.screen.text": ""
          },
          "protocolMappers": [
            {
              "id": "752e035f-038d-46ac-b65d-91f863fdd986",
              "name": "allowed web origins",
              "protocol": "openid-connect",
              "protocolMapper": "oidc-allowed-origins-mapper",
              "consentRequired": false,
              "config": {}
            }
          ]
        }
      ],
      "defaultDefaultClientScopes": [
        "web-origins",
        "email",
        "profile",
        "roles",
        "role_list"
      ],
      "defaultOptionalClientScopes": [
        "offline_access",
        "phone",
        "address",
        "microprofile-jwt"
      ],
      "browserSecurityHeaders": {
        "contentSecurityPolicyReportOnly": "",
        "xContentTypeOptions": "nosniff",
        "xRobotsTag": "none",
        "xFrameOptions": "SAMEORIGIN",
        "contentSecurityPolicy": "frame-src 'self'; frame-ancestors 'self'; object-src 'none';",
        "xXSSProtection": "1; mode=block",
        "strictTransportSecurity": "max-age=31536000; includeSubDomains"
      },
      "smtpServer": {},
      "eventsEnabled": false,
      "eventsListeners": [
        "jboss-logging"
      ],
      "enabledEventTypes": [],
      "adminEventsEnabled": false,
      "adminEventsDetailsEnabled": false,
      "identityProviders": [],
      "identityProviderMappers": [],
      "components": {
        "org.keycloak.services.clientregistration.policy.ClientRegistrationPolicy": [
          {
            "id": "827fde01-dc1b-4c1f-a529-9ef833ca3432",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "oidc-usermodel-property-mapper",
                "oidc-sha256-pairwise-sub-mapper",
                "saml-user-attribute-mapper",
                "saml-user-property-mapper",
                "oidc-address-mapper",
                "oidc-full-name-mapper",
                "saml-role-list-mapper",
                "oidc-usermodel-attribute-mapper"
              ]
            }
          },
          {
            "id": "0a429e7e-be7a-46b4-b42a-d1f8b265ff16",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "authenticated",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "5a1ff0b4-250f-48ee-8169-abff30cf7534",
            "name": "Allowed Client Scopes",
            "providerId": "allowed-client-templates",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allow-default-scopes": [
                "true"
              ]
            }
          },
          {
            "id": "c79f6629-84a9-467c-81d0-63e20b19f916",
            "name": "Full Scope Disabled",
            "providerId": "scope",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          },
          {
            "id": "b6b23ef8-96e8-4e2e-8efe-8003057a8d42",
            "name": "Max Clients Limit",
            "providerId": "max-clients",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "max-clients": [
                "200"
              ]
            }
          },
          {
            "id": "36dfaa02-0252-4448-9cdf-a17abf239f78",
            "name": "Trusted Hosts",
            "providerId": "trusted-hosts",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "host-sending-registration-request-must-match": [
                "true"
              ],
              "client-uris-must-match": [
                "true"
              ]
            }
          },
          {
            "id": "8216421d-34fb-4726-8331-137217657bdb",
            "name": "Allowed Protocol Mapper Types",
            "providerId": "allowed-protocol-mappers",
            "subType": "anonymous",
            "subComponents": {},
            "config": {
              "allowed-protocol-mapper-types": [
                "oidc-address-mapper",
                "oidc-usermodel-attribute-mapper",
                "saml-user-property-mapper",
                "saml-user-attribute-mapper",
                "saml-role-list-mapper",
                "oidc-full-name-mapper",
                "oidc-usermodel-property-mapper",
                "oidc-sha256-pairwise-sub-mapper"
              ]
            }
          },
          {
            "id": "d045f3f9-15e6-4e69-a419-0e7ff8a635ef",
            "name": "Consent Required",
            "providerId": "consent-required",
            "subType": "anonymous",
            "subComponents": {},
            "config": {}
          }
        ],
        "org.keycloak.userprofile.UserProfileProvider": [
          {
            "id": "b05ccf0d-d8ac-4695-bd60-37018f8f94b4",
            "providerId": "declarative-user-profile",
            "subComponents": {},
            "config": {}
          }
        ],
        "org.keycloak.keys.KeyProvider": [
          {
            "id": "62707fae-58f9-4fc2-89fb-0c5d212dc3dc",
            "name": "rsa-generated",
            "providerId": "rsa-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          },
          {
            "id": "4a8480bc-96fd-4906-a907-f948a73bab38",
            "name": "hmac-generated",
            "providerId": "hmac-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ],
              "algorithm": [
                "HS256"
              ]
            }
          },
          {
            "id": "40c01a32-0c0b-4dbb-9595-e5a5c8d26bc4",
            "name": "aes-generated",
            "providerId": "aes-generated",
            "subComponents": {},
            "config": {
              "priority": [
                "100"
              ]
            }
          }
        ]
      },
      "internationalizationEnabled": false,
      "supportedLocales": [],
      "authenticationFlows": [
        {
          "id": "491fbbc9-b70b-45bd-8243-2039ae3f115d",
          "alias": "Account verification options",
          "description": "Method with which to verity the existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-email-verification",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "flowAlias": "Verify Existing Account by Re-authentication",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "2c63ad60-76ab-4350-9def-74328bab70d0",
          "alias": "Authentication Options",
          "description": "Authentication options.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "basic-auth",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "basic-auth-otp",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "82b9b584-2243-4893-b58c-4567f34434a6",
          "alias": "Browser - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "e70e7c74-8ab5-411c-b06c-d478a452bee3",
          "alias": "Direct Grant - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "direct-grant-validate-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "4f3e6fdd-9b4d-4dc0-946a-1e1ccae7af71",
          "alias": "First broker login - Conditional OTP",
          "description": "Flow to determine if the OTP is required for the authentication",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-otp-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "aa66c794-f21b-4663-9de1-9e27a7e425ab",
          "alias": "Handle Existing Account",
          "description": "Handle what to do if there is existing account with same email/username like authenticated identity provider",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-confirm-link",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "Account verification options",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "2d4499a0-399c-4b6c-970c-7b441498f7b9",
          "alias": "Reset - Conditional OTP",
          "description": "Flow to determine if the OTP should be reset or not. Set to REQUIRED to force.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "conditional-user-configured",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-otp",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "710f4172-56a5-466e-bc75-ad7405ff62b5",
          "alias": "User creation or linking",
          "description": "Flow for the existing/non-existing user alternatives",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "create unique user config",
              "authenticator": "idp-create-user-if-unique",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "flowAlias": "Handle Existing Account",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "da7d3a39-7077-4354-9ffc-5b9f79fbaf0d",
          "alias": "Verify Existing Account by Re-authentication",
          "description": "Reauthentication of existing account",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "idp-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "flowAlias": "First broker login - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "6285968e-6200-463a-a329-8c60bc8fe9fc",
          "alias": "browser",
          "description": "browser based authentication",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-cookie",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "auth-spnego",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "identity-provider-redirector",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 25,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "flowAlias": "forms",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "10393f04-3922-40db-a622-2655dfcae45d",
          "alias": "clients",
          "description": "Base authentication for clients",
          "providerId": "client-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "client-secret",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-secret-jwt",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "client-x509",
              "authenticatorFlow": false,
              "requirement": "ALTERNATIVE",
              "priority": 40,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "4e5e164e-3c7e-4ca5-a10c-d7b817a7d468",
          "alias": "direct grant",
          "description": "OpenID Connect Resource Owner Grant",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "direct-grant-validate-username",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "direct-grant-validate-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 30,
              "flowAlias": "Direct Grant - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "80f88b0b-70de-4e4c-ae56-0293558301c5",
          "alias": "docker auth",
          "description": "Used by Docker clients to authenticate against the IDP",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "docker-http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "821af41a-6e77-4e8c-85a6-0280d5268909",
          "alias": "first broker login",
          "description": "Actions taken after first broker login with identity provider account, which is not yet linked to any Keycloak account",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticatorConfig": "review profile config",
              "authenticator": "idp-review-profile",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "User creation or linking",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "c4058fb0-ad93-4595-96ef-7d4bc5cbef4d",
          "alias": "forms",
          "description": "Username, password, otp and other auth forms.",
          "providerId": "basic-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "auth-username-password-form",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 20,
              "flowAlias": "Browser - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "a2a1d056-2521-498f-b345-b7db56f9342c",
          "alias": "http challenge",
          "description": "An authentication flow based on challenge-response HTTP Authentication Schemes",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "no-cookie-redirect",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 20,
              "flowAlias": "Authentication Options",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "13e68e1b-4b44-4f21-a253-5b2dea24404b",
          "alias": "registration",
          "description": "registration flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-page-form",
              "authenticatorFlow": true,
              "requirement": "REQUIRED",
              "priority": 10,
              "flowAlias": "registration form",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "e7588789-22d4-459b-96d6-1b480520f487",
          "alias": "registration form",
          "description": "registration form",
          "providerId": "form-flow",
          "topLevel": false,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "registration-user-creation",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-profile-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 40,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-password-action",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 50,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "registration-recaptcha-action",
              "authenticatorFlow": false,
              "requirement": "DISABLED",
              "priority": 60,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        },
        {
          "id": "8dc399ef-cf7d-46d5-9688-678c146ea8c4",
          "alias": "reset credentials",
          "description": "Reset credentials for a user if they forgot their password or something",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "reset-credentials-choose-user",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-credential-email",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 20,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticator": "reset-password",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 30,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            },
            {
              "authenticatorFlow": true,
              "requirement": "CONDITIONAL",
              "priority": 40,
              "flowAlias": "Reset - Conditional OTP",
              "userSetupAllowed": false,
              "autheticatorFlow": true
            }
          ]
        },
        {
          "id": "47ab5a7a-f67a-4a66-bdac-932ee230000d",
          "alias": "saml ecp",
          "description": "SAML ECP Profile Authentication Flow",
          "providerId": "basic-flow",
          "topLevel": true,
          "builtIn": true,
          "authenticationExecutions": [
            {
              "authenticator": "http-basic-authenticator",
              "authenticatorFlow": false,
              "requirement": "REQUIRED",
              "priority": 10,
              "userSetupAllowed": false,
              "autheticatorFlow": false
            }
          ]
        }
      ],
      "authenticatorConfig": [
        {
          "id": "b12be521-4e2b-42f0-a1a2-f1ba47ab4854",
          "alias": "create unique user config",
          "config": {
            "require.password.update.after.registration": "false"
          }
        },
        {
          "id": "58bf2d56-1c45-4acc-9005-23b978d961d7",
          "alias": "review profile config",
          "config": {
            "update.profile.on.first.login": "missing"
          }
        }
      ],
      "requiredActions": [
        {
          "alias": "CONFIGURE_TOTP",
          "name": "Configure OTP",
          "providerId": "CONFIGURE_TOTP",
          "enabled": true,
          "defaultAction": false,
          "priority": 10,
          "config": {}
        },
        {
          "alias": "terms_and_conditions",
          "name": "Terms and Conditions",
          "providerId": "terms_and_conditions",
          "enabled": false,
          "defaultAction": false,
          "priority": 20,
          "config": {}
        },
        {
          "alias": "UPDATE_PASSWORD",
          "name": "Update Password",
          "providerId": "UPDATE_PASSWORD",
          "enabled": true,
          "defaultAction": false,
          "priority": 30,
          "config": {}
        },
        {
          "alias": "UPDATE_PROFILE",
          "name": "Update Profile",
          "providerId": "UPDATE_PROFILE",
          "enabled": true,
          "defaultAction": false,
          "priority": 40,
          "config": {}
        },
        {
          "alias": "VERIFY_EMAIL",
          "name": "Verify Email",
          "providerId": "VERIFY_EMAIL",
          "enabled": true,
          "defaultAction": false,
          "priority": 50,
          "config": {}
        },
        {
          "alias": "delete_account",
          "name": "Delete Account",
          "providerId": "delete_account",
          "enabled": false,
          "defaultAction": false,
          "priority": 60,
          "config": {}
        },
        {
          "alias": "update_user_locale",
          "name": "Update User Locale",
          "providerId": "update_user_locale",
          "enabled": true,
          "defaultAction": false,
          "priority": 1000,
          "config": {}
        }
      ],
      "browserFlow": "browser",
      "registrationFlow": "registration",
      "directGrantFlow": "direct grant",
      "resetCredentialsFlow": "reset credentials",
      "clientAuthenticationFlow": "clients",
      "dockerAuthenticationFlow": "docker auth",
      "attributes": {
        "cibaBackchannelTokenDeliveryMode": "poll",
        "cibaExpiresIn": "120",
        "cibaAuthRequestedUserHint": "login_hint",
        "oauth2DeviceCodeLifespan": "600",
        "clientOfflineSessionMaxLifespan": "0",
        "oauth2DevicePollingInterval": "5",
        "clientSessionIdleTimeout": "0",
        "clientSessionMaxLifespan": "0",
        "parRequestUriLifespan": "60",
        "clientOfflineSessionIdleTimeout": "0",
        "cibaInterval": "5",
        "frontendUrl": ""
      },
      "keycloakVersion": "23.0.1",
      "userManagedAccessAllowed": false,
      "clientProfiles": {
        "profiles": []
      },
      "clientPolicies": {
        "policies": []
      },
      "users": [
        {
          "id": "f742ba6f-1d8a-4dec-bf15-e02dab508283",
          "createdTimestamp": 1598681172054,
          "username": "service-account-internal",
          "enabled": true,
          "totp": false,
          "emailVerified": false,
          "serviceAccountClientId": "internal",
          "disableableCredentialTypes": [],
          "requiredActions": [],
          "realmRoles": [
            "default-roles-jhipster"
          ],
          "notBefore": 0,
          "groups": []
        },
        {
          "id": "4c973896-5761-41fc-8217-07c5d13a004b",
          "createdTimestamp": 1505479415590,
          "username": "admin",
          "enabled": true,
          "totp": false,
          "emailVerified": true,
          "firstName": "Admin",
          "lastName": "Administrator",
          "email": "admin@localhost",
          "credentials": [
            {
              "id": "b860462b-9b02-48ba-9523-d3a8926a917b",
              "type": "password",
              "createdDate": 1505479429154,
              "secretData": "{\\"value\\":\\"4pf9K2jWSCcHC+CwsZP/qidN5pSmDUe6AX6wBerSGdBVKkExay8MWKx+EKmaaObZW6FVsD8vdW/ZsyUFD9gJ1Q==\\",\\"salt\\":\\"1/qNkZ5kr77jOMOBPBogGw==\\"}",
              "credentialData": "{\\"hashIterations\\":27500,\\"algorithm\\":\\"pbkdf2-sha256\\"}"
            }
          ],
          "disableableCredentialTypes": [],
          "requiredActions": [],
          "realmRoles": ["offline_access", "uma_authorization"],
          "clientRoles": {
            "account": ["view-profile", "manage-account"]
          },
          "notBefore": 0,
          "groups": ["/Admins", "/Users"]
        },
        {
          "id": "c4af4e2f-b432-4c3b-8405-cca86cd5b97b",
          "createdTimestamp": 1505479373742,
          "username": "user",
          "enabled": true,
          "totp": false,
          "emailVerified": true,
          "firstName": "",
          "lastName": "User",
          "email": "user@localhost",
          "credentials": [
            {
              "id": "7821832b-1e82-45a2-b8d3-f1a6ad909e64",
              "type": "password",
              "createdDate": 1505479392766,
              "secretData": "{\\"value\\":\\"MbKsMgWPnZyImih8s4SaoCSCq+XIY/c6S9F93sXEidHF1TjPWxCqMkec0+o3860CMLXHt3az61cIJOWI0FW9aw==\\",\\"salt\\":\\"fmpBI1r8R1u75hDLMUlwBw==\\"}",
              "credentialData": "{\\"hashIterations\\":27500,\\"algorithm\\":\\"pbkdf2-sha256\\"}"
            }
          ],
          "disableableCredentialTypes": [],
          "requiredActions": [],
          "realmRoles": ["offline_access", "uma_authorization"],
          "clientRoles": {
            "account": ["view-profile", "manage-account"]
          },
          "notBefore": 0,
          "groups": ["/Users"]
        }
      ]
    }
",
    "stateCleared": "modified",
  },
  "keycloak-k8s/keycloak-postgresql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: keycloak-postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: keycloak-postgresql
  namespace: default
  labels:
    app: keycloak-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: keycloak-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: keycloak-postgresql
  template:
    metadata:
      labels:
        app: keycloak-postgresql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: keycloak-postgresql-pvc
      containers:
        - name: postgres
          image: postgresql-placeholder
          env:
            - name: POSTGRES_USER
              value: keycloak
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: keycloak-postgresql
  namespace: default
spec:
  selector:
    app: keycloak-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "keycloak-k8s/keycloak.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: keycloak
  namespace: default
  labels:
    app: keycloak
spec:
  ports:
    - name: http
      port: 9080
      targetPort: 8080
    - name: https
      port: 9443
      targetPort: 8443
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: keycloak
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: keycloak
  namespace: default
spec:
  volumeClaimTemplates: []
  replicas: 2
  serviceName: keycloak
  selector:
    matchLabels:
      app: keycloak
  template:
    metadata:
      labels:
        app: keycloak
    spec:
      containers:
        - name: keycloak
          image: keycloak-placeholder
          args: "start --import-realm"
          env:
            - name: KEYCLOAK_ADMIN
              value: "admin"
            - name: KEYCLOAK_ADMIN_PASSWORD
              value: "admin"
            - name: KC_DB
              value: postgres
            - name: KC_DB_URL_HOST
              value: keycloak-postgresql.default.svc.cluster.local
            - name: KC_DB_USERNAME
              value: keycloak
            - name: KC_DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: keycloak-postgresql
                  key: postgresql-password
            - name: KC_FEATURES
              value: scripts
            - name: KC_PROXY
              value: "edge"
            - name: KC_HOSTNAME_URL
              value: http://keycloak.default.example.com
            - name: KC_HOSTNAME_ADMIN_URL
              value: http://keycloak.default.example.com
            - name: KC_CACHE_STACK
              value: "kubernetes"
            - name: JAVA_OPTS_APPEND
              value: "-Djgroups.dns.query=keycloak.default.svc.cluster.local"
          ports:
            - name: http
              containerPort: 8080
            - name: https
              containerPort: 8443
          readinessProbe:
            httpGet:
              path: /realms/master
              port: 8080
          volumeMounts:
            - name: keycloak-volume
              mountPath: /opt/keycloak/data/import
      volumes:
        - name: keycloak-volume
          configMap:
            name: keycloak-config
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
        echo "#####################################################"
        echo "Please find the below useful endpoints,"
        echo "Gateway - http://jhgate.default.example.com"
        echo "Keycloak - http://keycloak.default.example.com"
        echo "#####################################################"
}

default() {
    suffix=k8s
    kubectl apply -f keycloak-\${suffix}/
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - jhgate-k8s/jhgate-ingress.yml
  # keycloak
  - keycloak-k8s/keycloak-configmap.yml
  - keycloak-k8s/keycloak-postgresql.yml
  - keycloak-k8s/keycloak.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway and ingressType nginx should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes gateway and mysql microservice should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway", "02-mysql"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": null,
    "ingressType": null,
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway and mysql microservice should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes gateway with istio routing should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": "example.com",
    "ingressType": null,
    "istio": true,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": null,
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "istio-k8s/grafana-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: grafana-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - grafana.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - grafana.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: grafana-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - grafana.istio-system.example.com
  gateways:
    - grafana-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: grafana
",
    "stateCleared": "modified",
  },
  "istio-k8s/kiali-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: kiali-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - kiali.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - kiali.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: kiali-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - kiali.istio-system.example.com
  gateways:
    - kiali-observability-gateway
  http:
    - route:
        - destination:
            host: kiali
            port:
              number: 20001
",
    "stateCleared": "modified",
  },
  "istio-k8s/zipkin-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/tasks/observability/gateways/ for a more secure 'https' config
# using a self signed certificate and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: zipkin-observability-gateway
  namespace: istio-system
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - zipkin.istio-system.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - zipkin.istio-system.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: zipkin-gw-virtualservice
  namespace: istio-system
spec:
  hosts:
    - zipkin.istio-system.example.com
  gateways:
    - zipkin-observability-gateway
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            host: zipkin
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_PREFER_IP_ADDRESS
              value: "false"
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_HOSTNAME
              value: jhgate
            - name: SPRING_CLOUD_CONSUL_DISCOVERY_SERVICE_NAME
              value: jhgate
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-destination-rule.yml": {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: DestinationRule
metadata:
  name: jhgate-destinationrule
  namespace: default
spec:
  host: jhgate
  trafficPolicy:
    loadBalancer:
      simple: RANDOM
    connectionPool:
      tcp:
        maxConnections: 30
        connectTimeout: 100ms
      http:
        http1MaxPendingRequests: 10
        http2MaxRequests: 100
        maxRequestsPerConnection: 10
        maxRetries: 5
    outlierDetection:
      consecutive5xxErrors: 5
      interval: 30s
      baseEjectionTime: 60s
  subsets:
    - name: v1
      labels:
        version: "v1"
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-gateway.yml": {
    "contents": "# This configuration uses 'http' and is not recommended for production use.
# Refer https://istio.io/latest/docs/reference/config/networking/gateway/ for a more secure 'https' config
# using certificates and prefer that for production use
apiVersion: networking.istio.io/v1beta1
kind: Gateway
metadata:
  name: jhgate-gateway
  namespace: default
  labels:
    gateway: jhgate-gateway
    istio: ingressgateway
spec:
  selector:
    istio: ingressgateway
  servers:
    - port:
        number: 80
        name: http
        protocol: HTTP
      hosts:
        - jhgate.default.example.com
    - port:
        number: 80
        name: http2
        protocol: HTTP2
      hosts:
        - jhgate.default.example.com
---
apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-gw-virtualservice
  namespace: default
  labels:
    service: jhgate-gw-virtualservice
spec:
  hosts:
    - jhgate.default.example.com
  gateways:
    - jhgate-gateway
  http:
    - route:
        - destination:
            host: jhgate
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type:
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-virtual-service.yml": {
    "contents": "apiVersion: networking.istio.io/v1beta1
kind: VirtualService
metadata:
  name: jhgate-virtualservice
  namespace: default
spec:
  hosts:
    - jhgate
  http:
    - route:
        - destination:
            host: jhgate
            subset: "v1"
          weight: 100
      retries:
        attempts: 3
        perTryTimeout: 2s
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
        echo "#####################################################"
        echo "Please find the below useful endpoints,"
        echo "#####################################################"
}

default() {
    suffix=k8s
    kubectl label namespace default istio-injection=enabled --overwrite=true
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - jhgate-k8s/jhgate-gateway.yml
  - jhgate-k8s/jhgate-destination-rule.yml
  - jhgate-k8s/jhgate-virtual-service.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml
  # istio
  - istio-k8s/grafana-gateway.yml
  - istio-k8s/zipkin-gateway.yml
  - istio-k8s/kiali-gateway.yml

patchesJson6902:
  - target:
      version: v1
      kind: Namespace
      name: default
    path: patch-k8s/istio-label.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      kind: Gateway
      name: grafana-observability-gateway
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      name: grafana-gw-virtualservice
      kind: VirtualService
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      kind: Gateway
      name: kiali-observability-gateway
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      name: kiali-gw-virtualservice
      kind: VirtualService
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      kind: Gateway
      name: zipkin-observability-gateway
      namespace: default
    path: patch-k8s/istio-namespace.yml
  - target:
      group: networking.istio.io
      version: v1alpha3
      name: zipkin-gw-virtualservice
      kind: VirtualService
      namespace: default
    path: patch-k8s/istio-namespace.yml
",
    "stateCleared": "modified",
  },
  "patch-k8s/istio-label.yml": {
    "contents": "- op: add
  path: "/metadata/labels/istio-injection"
  value: "enabled"
",
    "stateCleared": "modified",
  },
  "patch-k8s/istio-namespace.yml": {
    "contents": "- op: replace
  path: "/metadata/namespace"
  value: "istio-system"
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
      annotations:
        sidecar.istio.io/inject: "false"
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway with istio routing should match spawn calls snapshot 1`] = `
[
  [
    "spawnCommandSync",
    "kubectl -n istio-system get svc istio-ingressgateway -o jsonpath='{.status.loadBalancer.ingress[0].ip}'",
    {
      "stdio": "pipe",
    },
  ],
]
`;

exports[`generator - Kubernetes gateway, mysql, psql, mongodb, mariadb, mssql microservices should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": [
      "01-gateway",
      "02-mysql",
      "03-psql",
      "04-mongo",
      "07-mariadb",
      "11-mssql"
    ],
    "baseName": "workspaces",
    "clusteredDbApps": [],
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": null,
    "ingressType": null,
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
$ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
$ docker image tag msmongodb jhipster/msmongodb
$ docker push jhipster/msmongodb
$ docker image tag msmariadb jhipster/msmariadb
$ docker push jhipster/msmariadb
$ docker image tag msmssqldb jhipster/msmssqldb
$ docker push jhipster/msmssqldb
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/
    kubectl apply -f mspsql-\${suffix}/
    kubectl apply -f msmongodb-\${suffix}/
    kubectl apply -f msmariadb-\${suffix}/
    kubectl apply -f msmssqldb-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  - mspsql-k8s/mspsql-deployment.yml
  - mspsql-k8s/mspsql-service.yml
  - mspsql-k8s/mspsql-postgresql.yml
  - mspsql-k8s/mspsql-elasticsearch.yml
  - msmongodb-k8s/msmongodb-deployment.yml
  - msmongodb-k8s/msmongodb-service.yml
  - msmongodb-k8s/msmongodb-mongodb.yml
  - msmariadb-k8s/msmariadb-deployment.yml
  - msmariadb-k8s/msmariadb-service.yml
  - msmariadb-k8s/msmariadb-mariadb.yml
  - msmssqldb-k8s/msmssqldb-deployment.yml
  - msmssqldb-k8s/msmssqldb-service.yml
  - msmssqldb-k8s/msmssqldb-mssql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmariadb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmariadb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmariadb-mariadb 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmariadb-app
          image: jhipster/msmariadb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-mariadb.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmariadb-mariadb-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: msmariadb-mariadb
  namespace: default
  labels:
    app: msmariadb-mariadb
type: Opaque
data:
  mariadb-root-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb-mariadb
  template:
    metadata:
      labels:
        app: msmariadb-mariadb
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmariadb-mariadb-pvc
      containers:
        - name: mariadb
          image: mariadb-placeholder
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MYSQL_DATABASE
              value: msmariadb
          #        command:
          #        - mysqld
          #        - --lower_case_table_names=1
          #        - --skip-ssl
          #        - --character_set_server=utf8mb4
          #        - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  selector:
    app: msmariadb-mariadb
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmariadb
  namespace: default
  labels:
    app: msmariadb
spec:
  selector:
    app: msmariadb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmongodb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmongodb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmongodb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmongodb-mongodb 27017)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmongodb-app
          image: jhipster/msmongodb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://msmongodb-mongodb-0.msmongodb-mongodb.default:27017/msmongodb"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-mongodb.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-config
data:
  mongod.conf: |
    net:
      port: 27017
    replication:
      replSetName: rs0
    storage:
      dbPath: /data/db
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-init
data:
  on-start.sh: |
    script_name=\${0##*/}

    log() {
        local msg="$1"
        local timestamp
        timestamp=$(date --iso-8601=ns)
        echo "[$timestamp] [$script_name] $msg" >> /work-dir/log.txt
    }

    shutdown_mongo() {
        if [[ $# -eq 1 ]]; then
            args="timeoutSecs: $1"
        else
            args='force: true'
        fi
        log "Shutting down MongoDB ($args)..."
        mongo admin "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "db.shutdownServer({$args})"
    }

    my_hostname=$(hostname)
    log "Bootstrapping MongoDB replica set member: $my_hostname"

    log "Reading standard input..."
    while read -ra line; do
        if [[ "\${line}" == *"\${my_hostname}"* ]]; then
            service_name="$line"
            continue
        fi
        peers=("\${peers[@]}" "$line")
    done

    # Generate the ca cert
    ca_crt=/data/configdb/tls.crt
    if [ -f "$ca_crt"  ]; then
        log "Generating certificate"
        ca_key=/data/configdb/tls.key
        pem=/work-dir/mongo.pem
        ssl_args=(--ssl --sslCAFile "$ca_crt" --sslPEMKeyFile "$pem")

    # Move into /work-dir
    pushd /work-dir

    cat >openssl.cnf <<EOL
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = $(echo -n "$my_hostname" | sed s/-[0-9]*$//)
    DNS.2 = $my_hostname
    DNS.3 = $service_name
    DNS.4 = localhost
    DNS.5 = 127.0.0.1
    EOL

        # Generate the certs
        openssl genrsa -out mongo.key 2048
        openssl req -new -key mongo.key -out mongo.csr -subj "/CN=$my_hostname" -config openssl.cnf
        openssl x509 -req -in mongo.csr \\
            -CA "$ca_crt" -CAkey "$ca_key" -CAcreateserial \\
            -out mongo.crt -days 3650 -extensions v3_req -extfile openssl.cnf

        rm mongo.csr
        cat mongo.crt mongo.key > $pem
        rm mongo.key mongo.crt
    fi


    log "Peers: \${peers[*]}"

    log "Starting a MongoDB instance..."
    mongod --config /data/configdb/mongod.conf --dbpath="$DATA_PATH" --replSet="$REPLICA_SET" --port=$PORT "\${auth_args[@]}" --bind_ip=0.0.0.0 >> /work-dir/log.txt 2>&1 &

    log "Waiting for MongoDB to be ready..."
    until mongo "\${ssl_args[@]}" --eval "db.adminCommand('ping')"; do
        log "Retrying..."
        sleep 2
    done

    log "Initialized."

    # try to find a master and add yourself to its replica set.
    for peer in "\${peers[@]}"; do
        if mongo admin --host "$peer" "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "rs.isMaster()" | grep '"ismaster" : true'; then
            log "Found master: $peer"
            log "Adding myself ($service_name) to replica set..."
            if mongo admin --host "$peer" "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "rs.add('$service_name')" | grep 'Quorum check failed'; then
                log 'Quorum check failed, unable to join replicaset. Exiting prematurely.'
                shutdown_mongo
                exit 1
            fi

            sleep 3

            log 'Waiting for replica to reach SECONDARY state...'
            until printf '.' && [[ $(mongo admin "\${admin_creds[@]}" "\${ssl_args[@]}" --quiet --eval "rs.status().myState") == '2' ]]; do
                sleep 1
            done

            log '✓ Replica reached SECONDARY state.'

            shutdown_mongo "60"
            log "Good bye."
            exit 0
        fi
    done

    # else initiate a replica set with yourself.
    if mongo "\${ssl_args[@]}" --eval "rs.status()" | grep "no replset config has been received"; then
        log "Initiating a new replica set with myself ($service_name)..."
        mongo "\${ssl_args[@]}" --eval "rs.initiate({'_id': '$REPLICA_SET', 'members': [{'_id': 0, 'host': '$service_name'}]})"

        sleep 3

        log 'Waiting for replica to reach PRIMARY state...'
        until printf '.' && [[ $(mongo "\${ssl_args[@]}" --quiet --eval "rs.status().myState") == '1' ]]; do
            sleep 1
        done

        log '✓ Replica reached PRIMARY state.'

        log "Done."
    fi

    shutdown_mongo
    log "Good bye."
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  serviceName: msmongodb-mongodb
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb-mongodb
  template:
    metadata:
      labels:
        app: msmongodb-mongodb
    spec:
      initContainers:
        - name: config
          image: busybox
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x
              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
        - name: install
          image: "k8s.gcr.io/mongodb-install:0.6"
          args:
            - --work-dir=/work-dir
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
        - name: boot
          image: mongodb-placeholder
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - "-service=msmongodb-mongodb"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: "27017"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: mongodb
          image: mongodb-placeholder
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: "27017"
          ports:
            - name: peer
              containerPort: 27017
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=$(DATA_PATH)
            - --replSet=$(REPLICA_SET)
            - --port=$(PORT)
            - --bind_ip=0.0.0.0
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
      volumes:
        - name: config
          configMap:
            name: msmongodb-mongodb-config
        - name: workdir
          emptyDir: {}
        - name: init
          configMap:
            defaultMode: 0755
            name: msmongodb-mongodb-init
        - name: configdir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Headless service for DNS record
apiVersion: v1
kind: Service
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: peer
      port: 27017
  selector:
    app: msmongodb-mongodb
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmongodb
  namespace: default
  labels:
    app: msmongodb
spec:
  selector:
    app: msmongodb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmssqldb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmssqldb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmssqldb-app
          image: jhipster/msmssqldb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-mssql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmssqldb-mssql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb-mssql
  template:
    metadata:
      labels:
        app: msmssqldb-mssql
    spec:
      volumes:
        - name: mssqldb
          persistentVolumeClaim:
            claimName: mssql-data
        - name: data
          persistentVolumeClaim:
            claimName: msmssqldb-mssql-pvc
      containers:
        - name: mysql
          image: mssql-placeholder
          env:
            - name: MSSQL_PID
              value: "Express"
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql
                  key: SA_PASSWORD
          ports:
            - containerPort: 1433
          volumeMounts:
            - name: mssqldb
              mountPath: /var/opt/mssql
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"

---
apiVersion: v1
kind: Service
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  selector:
    app: msmssqldb-mssql
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433
  type: LoadBalancer
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mssql-data
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 8Gi
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmssqldb
  namespace: default
  labels:
    app: msmssqldb
spec:
  selector:
    app: msmssqldb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql
      version: "v1"
  template:
    metadata:
      labels:
        app: mspsql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mspsql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 mspsql-postgresql 5432)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: mspsql-app
          image: jhipster/mspsql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_DATASOURCE_USERNAME
              value: mspsql
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-elasticsearch.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-elasticsearch-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-elasticsearch-pvc
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-postgresql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mspsql-postgresql
  namespace: default
  labels:
    app: mspsql-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-postgresql
  template:
    metadata:
      labels:
        app: mspsql-postgresql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-postgresql-pvc
      containers:
        - name: postgres
          image: postgresql-placeholder
          env:
            - name: POSTGRES_USER
              value: mspsql
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  selector:
    app: mspsql-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: mspsql
  namespace: default
  labels:
    app: mspsql
spec:
  selector:
    app: mspsql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
    - image: jhipster/mspsql
      context: ./03-psql
      jib: {}
    - image: jhipster/msmongodb
      context: ./04-mongo
      jib: {}
    - image: jhipster/msmariadb
      context: ./07-mariadb
      jib: {}
    - image: jhipster/msmssqldb
      context: ./11-mssql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes gateway, mysql, psql, mongodb, mariadb, mssql microservices should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes monolith application should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["08-monolith"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "monolith",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": null,
    "ingressType": null,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "no"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag samplemysql jhipster/samplemysql
$ docker push jhipster/samplemysql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc samplemysql
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f samplemysql-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - samplemysql-k8s/samplemysql-deployment.yml
  - samplemysql-k8s/samplemysql-service.yml
  - samplemysql-k8s/samplemysql-mysql.yml
  - samplemysql-k8s/samplemysql-elasticsearch.yml
# service discovery eureka/consul

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "samplemysql-k8s/samplemysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplemysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplemysql
      version: "v1"
  template:
    metadata:
      labels:
        app: samplemysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - samplemysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 samplemysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: samplemysql-app
          image: jhipster/samplemysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://samplemysql-mysql.default.svc.cluster.local:3306/samplemysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://samplemysql-mysql.default.svc.cluster.local:3306/samplemysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://samplemysql-elasticsearch.default.svc.cluster.local:9200
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "samplemysql-k8s/samplemysql-elasticsearch.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: samplemysql-elasticsearch-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplemysql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplemysql-elasticsearch
  template:
    metadata:
      labels:
        app: samplemysql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: samplemysql-elasticsearch-pvc
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: samplemysql-elasticsearch
  namespace: default
spec:
  selector:
    app: samplemysql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "samplemysql-k8s/samplemysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: samplemysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: samplemysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: samplemysql-mysql
  template:
    metadata:
      labels:
        app: samplemysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: samplemysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: samplemysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: samplemysql-mysql
  namespace: default
spec:
  selector:
    app: samplemysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "samplemysql-k8s/samplemysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: samplemysql
  namespace: default
  labels:
    app: samplemysql
spec:
  selector:
    app: samplemysql
  type: LoadBalancer
  ports:
    - name: http
      port: 80
      targetPort: 8080
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/samplemysql
      context: ./08-monolith
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes monolith application should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes mysql microservice with custom namespace and jhipster prometheus monitoring should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": null,
    "ingressType": null,
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "mynamespace",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "prometheus",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`

kubectl scale deployment <app-name> --replicas <replica-count> -n mynamespace

\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`

kubectl set image deployment/<app-name>-app <app-name>=<new-image> -n mynamespace

\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Monitoring tools

### Prometheus metrics

Generator is also packaged with [Prometheus operator by CoreOS](https://github.com/coreos/prometheus-operator).

**Hint**: use must build your apps with \`prometheus\` profile active!

Application metrics can be explored in Prometheus through:

\`\`\`

kubectl get svc jhipster-prometheus -n mynamespace

\`\`\`

Also the visualisation can be explored in Grafana which is pre-configured with a dashboard view. You can find the service details by running:

\`\`\`

kubectl get svc jhipster-grafana -n mynamespace

\`\`\`

* If you have chosen *Ingress*, then you should be able to access Grafana using the given ingress domain.
* If you have chosen *NodePort*, then point your browser to an IP of any of your nodes and use the node port described in the output.
* If you have chosen *LoadBalancer*, then use the IaaS provided load balancer IP




## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!

\`\`\`
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
        echo "#####################################################"
        echo "Please find the below useful endpoints,"
        echo "JHipster Grafana - http://jhipster-grafana.mynamespace."
        echo "#####################################################"
}

default() {
    suffix=k8s
    kubectl apply -f namespace.yml
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/
    kubectl apply -f monitoring-\${suffix}/jhipster-prometheus-crd.yml
    until [ $(kubectl get crd prometheuses.monitoring.coreos.com 2>>/dev/null | wc -l) -ge 2 ]; do
        echo "Waiting for the custom resource prometheus operator to get initialised";
        sleep 5;
    done
    kubectl apply -f monitoring-\${suffix}/jhipster-prometheus-cr.yml
    kubectl apply -f monitoring-\${suffix}/jhipster-grafana.yml
    kubectl apply -f monitoring-\${suffix}/jhipster-grafana-dashboard.yml

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

namespace: mynamespace

resources:
  - namespace.yml
  # Individual apps
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  - msmysql-k8s/msmysql-prometheus-sm.yml
  # monitoring prometheus
  - monitoring-k8s/jhipster-prometheus-cr.yml
  - monitoring-k8s/jhipster-prometheus-crd.yml
  - monitoring-k8s/jhipster-grafana.yml
  - monitoring-k8s/jhipster-grafana-dashboard.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "monitoring-k8s/jhipster-grafana-dashboard.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: jhipster-grafana-dashboard
  namespace: mynamespace
data:
  deployment-dashboard.json: |
    {
        "dashboard": {
            "__inputs": [
                {
                    "name": "DS_PROMETHEUS",
                    "label": "prometheus",
                    "description": "",
                    "type": "datasource",
                    "pluginId": "prometheus",
                    "pluginName": "Prometheus"
                }
            ],
            "__requires": [
                {
                    "type": "grafana",
                    "id": "grafana",
                    "name": "Grafana",
                    "version": "4.6.0"
                },
                {
                    "type": "panel",
                    "id": "graph",
                    "name": "Graph",
                    "version": ""
                },
                {
                    "type": "datasource",
                    "id": "prometheus",
                    "name": "Prometheus",
                    "version": "1.0.0"
                },
                {
                    "type": "panel",
                    "id": "singlestat",
                    "name": "Singlestat",
                    "version": ""
                }
            ],
            "annotations": {
                "list": [
                    {
                        "builtIn": 1,
                        "datasource": "-- Grafana --",
                        "enable": true,
                        "hide": true,
                        "iconColor": "rgba(0, 211, 255, 1)",
                        "name": "Annotations & Alerts",
                        "type": "dashboard"
                    }
                ]
            },
            "description": "JHipster metrics",
            "editable": true,
            "gnetId": 3308,
            "graphTooltip": 0,
            "hideControls": false,
            "id": null,
            "links": [],
            "refresh": false,
            "rows": [
                {
                    "collapse": false,
                    "height": "250px",
                    "panels": [
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": false,
                            "colors": [
                                "rgba(245, 54, 54, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "decimals": null,
                            "description": "Service status",
                            "format": "none",
                            "gauge": {
                                "maxValue": 1,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "height": "",
                            "id": 1,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "100%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 4,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.18)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": false
                            },
                            "tableColumn": "Value",
                            "targets": [
                                {
                                    "expr": "up{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "table",
                                    "intervalFactor": 2,
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "up",
                                    "legendFormat": "service"
                                }
                            ],
                            "thresholds": "0",
                            "title": "Service Status Now",
                            "type": "singlestat",
                            "valueFontSize": "120%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "Down",
                                    "value": "0"
                                },
                                {
                                    "value": "1",
                                    "op": "=",
                                    "text": "Up"
                                }
                            ],
                            "valueName": "current",
                            "hideTimeOverride": false,
                            "minSpan": null,
                            "repeat": null,
                            "transparent": false
                        },
                        {
                            "id": 29,
                            "title": "Service Uptime",
                            "span": 8,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "up{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{pod}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": "1",
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": "1",
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": true,
                            "pointradius": 3,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": false,
                                "min": false,
                                "max": false,
                                "current": false,
                                "total": false,
                                "avg": false,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": true,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": true,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The uptime of the service"
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Uptime Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": true,
                            "colors": [
                                "rgba(32, 176, 9, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Total requests count",
                            "format": "none",
                            "gauge": {
                                "maxValue": 10000000000000,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "id": 5,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "50%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 3,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.18)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": false
                            },
                            "tableColumn": "Value",
                            "targets": [
                                {
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_requests_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "table",
                                    "intervalFactor": 2,
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_requests_count"
                                }
                            ],
                            "thresholds": "",
                            "title": "Total Requests",
                            "type": "singlestat",
                            "valueFontSize": "70%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "N/A",
                                    "value": "null"
                                }
                            ],
                            "valueName": "total",
                            "transparent": false
                        },
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": false,
                            "colors": [
                                "rgba(245, 54, 54, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Number of 200 OK requests",
                            "format": "none",
                            "gauge": {
                                "maxValue": 10000000000000000,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "id": 6,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "50%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 3,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.78)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": true
                            },
                            "tableColumn": "Value",
                            "targets": [
                                {
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "table",
                                    "intervalFactor": 2,
                                    "legendFormat": "",
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_ok_total"
                                }
                            ],
                            "thresholds": "",
                            "title": "Total Successful hits",
                            "type": "singlestat",
                            "valueFontSize": "80%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "N/A",
                                    "value": "null"
                                }
                            ],
                            "valueName": "total"
                        },
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": false,
                            "colors": [
                                "rgba(245, 54, 54, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Number of server errors and bad requests",
                            "format": "none",
                            "gauge": {
                                "maxValue": 1,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "id": 7,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "50%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 3,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.18)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": false
                            },
                            "tableColumn": "Value",
                            "targets": [
                                {
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total{namespace =\\"$namespace\\", service =\\"$service_name\\"} + com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_badRequest_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_serverError_total"
                                }
                            ],
                            "thresholds": "1",
                            "title": "Total Bad hits",
                            "type": "singlestat",
                            "valueFontSize": "70%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "N/A",
                                    "value": "null"
                                }
                            ],
                            "valueName": "total"
                        },
                        {
                            "cacheTimeout": null,
                            "colorBackground": false,
                            "colorValue": false,
                            "colors": [
                                "rgba(245, 54, 54, 0.9)",
                                "rgba(237, 129, 40, 0.89)",
                                "rgba(50, 172, 45, 0.97)"
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Number of 404 not found requests",
                            "format": "none",
                            "gauge": {
                                "maxValue": 1,
                                "minValue": 0,
                                "show": true,
                                "thresholdLabels": false,
                                "thresholdMarkers": true
                            },
                            "id": 8,
                            "interval": null,
                            "links": [],
                            "mappingType": 1,
                            "mappingTypes": [
                                {
                                    "name": "value to text",
                                    "value": 1
                                },
                                {
                                    "name": "range to text",
                                    "value": 2
                                }
                            ],
                            "maxDataPoints": 100,
                            "nullPointMode": "connected",
                            "nullText": null,
                            "postfix": "",
                            "postfixFontSize": "50%",
                            "prefix": "",
                            "prefixFontSize": "50%",
                            "rangeMaps": [
                                {
                                    "from": "null",
                                    "text": "N/A",
                                    "to": "null"
                                }
                            ],
                            "span": 3,
                            "sparkline": {
                                "fillColor": "rgba(31, 118, 189, 0.18)",
                                "full": false,
                                "lineColor": "rgb(31, 120, 193)",
                                "show": false
                            },
                            "tableColumn": "",
                            "targets": [
                                {
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "refId": "A",
                                    "step": 20,
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_responseCodes_notFound_total"
                                }
                            ],
                            "thresholds": "1",
                            "title": "Trace 404 hits",
                            "type": "singlestat",
                            "valueFontSize": "80%",
                            "valueMaps": [
                                {
                                    "op": "=",
                                    "text": "N/A",
                                    "value": "null"
                                }
                            ],
                            "valueName": "total"
                        },
                        {
                            "id": 30,
                            "title": "Active Requests",
                            "span": 12,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "com_codahale_metrics_servlet_InstrumentedFilter_activeRequests{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "metric": "com_codahale_metrics_servlet_InstrumentedFilter_activeRequests",
                                    "step": 2,
                                    "legendFormat": "{{service}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": null,
                                    "max": null,
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": null,
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [
                                    "total"
                                ],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 2,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": false,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": false,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": []
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Requests Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The current number of live threads including daemon and non-daemon and runnable threads",
                            "fill": 4,
                            "id": 10,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true,
                                "rightSide": false,
                                "hideEmpty": false
                            },
                            "lines": true,
                            "linewidth": 2,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": true,
                            "targets": [
                                {
                                    "expr": "jvm_threads_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Total threads",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_threads_count"
                                },
                                {
                                    "expr": "jvm_threads_daemon_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_threads_daemon_count",
                                    "step": 4,
                                    "legendFormat": "Daemon threads"
                                },
                                {
                                    "expr": "jvm_threads_runnable_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "C",
                                    "metric": "jvm_threads_runnable_count",
                                    "step": 4,
                                    "legendFormat": "Runnable threads"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Live Threads",
                            "tooltip": {
                                "shared": false,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": [
                                    "total"
                                ]
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ],
                            "transparent": false
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The current number of blocked and deadlock threads",
                            "fill": 1,
                            "id": 11,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_threads_blocked_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Blocked threads",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_threads_blocked_count"
                                },
                                {
                                    "expr": "jvm_threads_deadlock_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_threads_deadlock_count",
                                    "step": 4,
                                    "legendFormat": "Deadlock threads"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Blocked and Deadlock Threads",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The current number of waiting threads",
                            "fill": 1,
                            "id": 12,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_threads_waiting_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Waiting threads",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_threads_waiting_count"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Waiting Threads",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ]
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Thread Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "An estimate of the number of buffers in the pool",
                            "fill": 1,
                            "id": 13,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_buffers_direct_count{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "{{service}}",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_buffers_direct_count"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Buffer Count",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "An estimate of the memory that the Java virtual machine is using for this buffer pool",
                            "fill": 1,
                            "id": 14,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_buffers_direct_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "{{service}}",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_buffers_direct_used"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Buffer Mem Used",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "An estimate of the total capacity of the buffers in this pool",
                            "fill": 1,
                            "id": 15,
                            "legend": {
                                "alignAsTable": true,
                                "avg": false,
                                "current": true,
                                "max": false,
                                "min": false,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_buffers_direct_capacity{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "{{service}}",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_buffers_direct_capacity"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Buffer Capacity",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The total amount of heap memory",
                            "fill": 1,
                            "id": 18,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_heap_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_memory_heap_used"
                                },
                                {
                                    "expr": "jvm_memory_heap_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_memory_heap_max",
                                    "step": 4,
                                    "legendFormat": "Maximum"
                                },
                                {
                                    "expr": "jvm_memory_heap_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "C",
                                    "metric": "jvm_memory_heap_committed",
                                    "step": 4,
                                    "legendFormat": "Committed"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Heap Memory",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The amount of used, committed and max memory",
                            "fill": 1,
                            "id": 16,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_total_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_memory_total_used"
                                },
                                {
                                    "expr": "jvm_memory_total_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_memory_total_max",
                                    "step": 4,
                                    "legendFormat": "Max"
                                },
                                {
                                    "expr": "jvm_memory_total_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "C",
                                    "metric": "jvm_memory_total_committed",
                                    "step": 4,
                                    "legendFormat": "Committed"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Total Memory",
                            "tooltip": {
                                "shared": false,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": [
                                    "total"
                                ]
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "The total amount of  non heap memory",
                            "fill": 1,
                            "id": 17,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 4,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_non_heap_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Non Heap Used",
                                    "refId": "A",
                                    "step": 4,
                                    "metric": "jvm_memory_non_heap_used"
                                },
                                {
                                    "expr": "jvm_memory_non_heap_committed{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_memory_non_heap_max",
                                    "step": 4,
                                    "legendFormat": "Non Heap Committed"
                                },
                                {
                                    "expr": "jvm_memory_pools_Metaspace_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "C",
                                    "metric": "jvm_memory_pools_Metaspace_used",
                                    "step": 4,
                                    "legendFormat": "Metaspace Used"
                                },
                                {
                                    "expr": "jvm_memory_pools_Code_Cache_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "D",
                                    "metric": "jvm_memory_pools_Code_Cache_used",
                                    "step": 4,
                                    "legendFormat": "Code Cache Used"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Other Memory",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Memory Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Memory space of new generation",
                            "fill": 2,
                            "id": 19,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 2,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 6,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_pools_PS_Eden_Space_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 2,
                                    "metric": "jvm_memory_pools_PS_Eden_Space_used"
                                },
                                {
                                    "expr": "jvm_memory_pools_PS_Eden_Space_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "jvm_memory_pools_PS_Eden_Space_max",
                                    "step": 2,
                                    "legendFormat": "Max"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Eden Space",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Memory space of new generation",
                            "fill": 1,
                            "id": 20,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 6,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_pools_PS_Survivor_Space_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 2,
                                    "metric": "jvm_memory_pools_PS_Old_Gen_used"
                                },
                                {
                                    "expr": "jvm_memory_pools_PS_Survivor_Space_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "metric": "",
                                    "step": 2,
                                    "legendFormat": "Max"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Survivor Space",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        },
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Memory space of old generation",
                            "fill": 1,
                            "id": 24,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 12,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "jvm_memory_pools_PS_Old_Gen_used{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "Used",
                                    "refId": "A",
                                    "step": 2,
                                    "metric": "jvm_memory_pools_PS_Old_Gen_used"
                                },
                                {
                                    "expr": "jvm_memory_pools_PS_Old_Gen_max{namespace =\\"$namespace\\", service =\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "refId": "B",
                                    "step": 2,
                                    "legendFormat": "Max"
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "Old Generation",
                            "tooltip": {
                                "shared": true,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": []
                            },
                            "yaxes": [
                                {
                                    "format": "decbytes",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                },
                                {
                                    "format": "s",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": null,
                                    "show": true
                                }
                            ]
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Memory Space Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "id": 31,
                            "title": "Cache Hits",
                            "span": 6,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "{__name__=~\\"^jcache_statistics.*cache_hits\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{__name__}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "none"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [
                                    "total"
                                ],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": true,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": false,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The total number of cache hits"
                        },
                        {
                            "id": 32,
                            "title": "Cache Misses",
                            "span": 6,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "{__name__=~\\"^jcache_statistics.*cache_misses\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{__name__}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": true,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": true,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The total number of cache misses"
                        },
                        {
                            "id": 33,
                            "title": "Cache Gets",
                            "span": 6,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "{__name__=~\\"^jcache_statistics.*cache_gets\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{__name__}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": true,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": true,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The total number of cache gets"
                        },
                        {
                            "id": 34,
                            "title": "Cache Puts",
                            "span": 6,
                            "type": "graph",
                            "targets": [
                                {
                                    "refId": "A",
                                    "expr": "{__name__=~\\"^jcache_statistics.*cache_puts\\", namespace=\\"$namespace\\", service=\\"$service_name\\"}",
                                    "intervalFactor": 2,
                                    "format": "time_series",
                                    "step": 2,
                                    "legendFormat": "{{__name__}}"
                                }
                            ],
                            "datasource": "\${DS_PROMETHEUS}",
                            "renderer": "flot",
                            "yaxes": [
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                },
                                {
                                    "label": null,
                                    "show": true,
                                    "logBase": 1,
                                    "min": "0",
                                    "max": null,
                                    "format": "short"
                                }
                            ],
                            "xaxis": {
                                "show": true,
                                "mode": "time",
                                "name": null,
                                "values": [],
                                "buckets": null
                            },
                            "lines": true,
                            "fill": 1,
                            "linewidth": 1,
                            "dashes": false,
                            "dashLength": 10,
                            "spaceLength": 10,
                            "points": false,
                            "pointradius": 5,
                            "bars": false,
                            "stack": false,
                            "percentage": false,
                            "legend": {
                                "show": true,
                                "values": true,
                                "min": true,
                                "max": true,
                                "current": true,
                                "total": true,
                                "avg": true,
                                "alignAsTable": true
                            },
                            "nullPointMode": "null",
                            "steppedLine": false,
                            "tooltip": {
                                "value_type": "individual",
                                "shared": true,
                                "sort": 0
                            },
                            "timeFrom": null,
                            "timeShift": null,
                            "aliasColors": {},
                            "seriesOverrides": [],
                            "thresholds": [],
                            "links": [],
                            "description": "The total number of cache puts"
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "Cache Metrics",
                    "titleSize": "h6"
                },
                {
                    "collapse": false,
                    "height": 250,
                    "panels": [
                        {
                            "aliasColors": {},
                            "bars": false,
                            "dashLength": 10,
                            "dashes": false,
                            "datasource": "\${DS_PROMETHEUS}",
                            "description": "Count of REST requests",
                            "fill": 1,
                            "id": 27,
                            "legend": {
                                "alignAsTable": true,
                                "avg": true,
                                "current": true,
                                "max": true,
                                "min": true,
                                "show": true,
                                "total": false,
                                "values": true
                            },
                            "lines": true,
                            "linewidth": 1,
                            "links": [],
                            "nullPointMode": "null",
                            "percentage": false,
                            "pointradius": 5,
                            "points": false,
                            "renderer": "flot",
                            "seriesOverrides": [],
                            "spaceLength": 10,
                            "span": 12,
                            "stack": false,
                            "steppedLine": false,
                            "targets": [
                                {
                                    "expr": "{__name__=~\\".*rest.*_count\\", namespace=\\"$namespace\\", service=\\"$service_name\\"} ",
                                    "format": "time_series",
                                    "intervalFactor": 2,
                                    "legendFormat": "{{__name__}}",
                                    "refId": "A",
                                    "step": 2
                                }
                            ],
                            "thresholds": [],
                            "timeFrom": null,
                            "timeShift": null,
                            "title": "REST Requests Metrics",
                            "tooltip": {
                                "shared": false,
                                "sort": 0,
                                "value_type": "individual"
                            },
                            "type": "graph",
                            "xaxis": {
                                "buckets": null,
                                "mode": "time",
                                "name": null,
                                "show": true,
                                "values": [
                                    "total"
                                ]
                            },
                            "yaxes": [
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                },
                                {
                                    "format": "short",
                                    "label": null,
                                    "logBase": 1,
                                    "max": null,
                                    "min": "0",
                                    "show": true
                                }
                            ],
                            "decimals": 0
                        }
                    ],
                    "repeat": null,
                    "repeatIteration": null,
                    "repeatRowId": null,
                    "showTitle": true,
                    "title": "REST Metrics",
                    "titleSize": "h6"
                }
            ],
            "schemaVersion": 14,
            "style": "dark",
            "tags": [
                "java",
                "jhipster",
                "spring-boot"
            ],
            "templating": {
                "list": [
                    {
                        "allValue": null,
                        "current": {},
                        "datasource": "\${DS_PROMETHEUS}",
                        "hide": 0,
                        "includeAll": false,
                        "label": "Namespace",
                        "multi": false,
                        "name": "namespace",
                        "options": [],
                        "query": "label_values(jvm_files, namespace)",
                        "refresh": 2,
                        "regex": "",
                        "sort": 1,
                        "tagValuesQuery": "",
                        "tags": [],
                        "tagsQuery": "",
                        "type": "query",
                        "useTags": false
                    },
                    {
                        "allValue": null,
                        "current": {},
                        "datasource": "\${DS_PROMETHEUS}",
                        "hide": 0,
                        "includeAll": false,
                        "label": "Service Name",
                        "multi": false,
                        "name": "service_name",
                        "options": [],
                        "query": "label_values(jvm_files, service)",
                        "refresh": 2,
                        "regex": "",
                        "sort": 1,
                        "tagValuesQuery": "",
                        "tags": [],
                        "tagsQuery": "",
                        "type": "query",
                        "useTags": false
                    }
                ]
            },
            "time": {
                "from": "now-15m",
                "to": "now"
            },
            "timepicker": {
                "refresh_intervals": [
                    "5s",
                    "10s",
                    "30s",
                    "1m",
                    "5m",
                    "15m",
                    "30m",
                    "1h",
                    "2h",
                    "1d"
                ],
                "time_options": [
                    "5m",
                    "15m",
                    "1h",
                    "6h",
                    "12h",
                    "24h",
                    "2d",
                    "7d",
                    "30d"
                ]
            },
            "timezone": "",
            "title": "JHipster Metrics",
            "version": 3
        },
        "inputs": [
            {
                "name": "DS_PROMETHEUS",
                "pluginId": "prometheus",
                "type": "datasource",
                "value": "prometheus"
            }
        ],
        "overwrite": true
    }
  prometheus-datasource.json: |
    {
        "access": "proxy",
        "basicAuth": false,
        "name": "prometheus",
        "type": "prometheus",
        "url": "http://jhipster-prometheus:9090"
    }
---
apiVersion: batch/v1
kind: Job
metadata:
  name: jhipster-grafana-dashboard
  namespace: mynamespace
  labels:
    job: jhipster-grafana-dashboard
spec:
  template:
    metadata:
      labels:
        job: jhipster-grafana-dashboard
    spec:
      initContainers:
        - name: init-dependent-services-check
          image: busybox
          command:
            - "/bin/sh"
            - "-c"
            - |
              until nc -z -w 1 jhipster-prometheus 9090
              do
                echo Waiting for prometheus to get initialized
                sleep 5
              done
              until nc -z -w 1 jhipster-grafana 3000
              do
                echo Waiting for grafana to get initialized
                sleep 5
              done
      containers:
        - name: grafana-configurer
          image: grafana-watcher-placeholder
          args:
            - "--watch-dir=/var/grafana-dashboard"
            - "--grafana-url=http://jhipster-grafana:3000"
          env:
            - name: GRAFANA_USER
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: username
            - name: GRAFANA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: password
          resources:
            requests:
              memory: "16Mi"
              cpu: "50m"
            limits:
              memory: "32Mi"
              cpu: "100m"
          volumeMounts:
            - name: grafana-dashboard
              mountPath: /var/grafana-dashboard
      volumes:
        - name: grafana-dashboard
          configMap:
            name: jhipster-grafana-dashboard
      restartPolicy: OnFailure
",
    "stateCleared": "modified",
  },
  "monitoring-k8s/jhipster-grafana.yml": {
    "contents": "apiVersion: v1
kind: Secret
metadata:
  name: jhipster-grafana-credentials
  namespace: mynamespace
data:
  username: amhpcHN0ZXI=
  password: amhpcHN0ZXI=
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhipster-grafana
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhipster-grafana
  template:
    metadata:
      labels:
        app: jhipster-grafana
    spec:
      containers:
        - name: jhipster-grafana
          image: grafana-placeholder
          ports:
            - containerPort: 3000
              name: http
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_USER
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: username
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: jhipster-grafana-credentials
                  key: password
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
          resources:
            requests:
              memory: "100Mi"
              cpu: "100m"
            limits:
              memory: "250Mi"
              cpu: "200m"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/grafana-storage
      volumes:
        - name: grafana-storage
          emptyDir: {}
      restartPolicy: Always
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-grafana
  namespace: mynamespace
  labels:
    app: jhipster-grafana
spec:
  ports:
    - name: http
      port: 3000
      targetPort: 3000
  type: LoadBalancer
  selector:
    app: jhipster-grafana
---

",
    "stateCleared": "modified",
  },
  "monitoring-k8s/jhipster-prometheus-cr.yml": {
    "contents": "apiVersion: v1
kind: ServiceAccount
metadata:
  name: jhipster-prometheus-sa
  namespace: mynamespace
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: Role
metadata:
  name: jhipster-prometheus-role
  namespace: mynamespace
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - services
      - endpoints
      - pods
    verbs: ["get", "list", "watch"]
  - apiGroups: [""]
    resources:
      - configmaps
    verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
# limit to the namespace
kind: RoleBinding
metadata:
  name: jhipster-prometheus-rb
  namespace: mynamespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: jhipster-prometheus-role
subjects:
  - kind: ServiceAccount
    name: jhipster-prometheus-sa
---
apiVersion: monitoring.coreos.com/v1
kind: Prometheus
metadata:
  name: jhipster-prometheus
  namespace: mynamespace
spec:
  replicas: 1
  serviceAccountName: jhipster-prometheus-sa
  serviceMonitorSelector:
    matchLabels:
      team: mynamespace
  resources:
    requests:
      memory: 400Mi
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-prometheus
  namespace: mynamespace
spec:
  ports:
    - name: web
      port: 9090
      protocol: TCP
      targetPort: web
  selector:
    prometheus: jhipster-prometheus
",
    "stateCleared": "modified",
  },
  "monitoring-k8s/jhipster-prometheus-crd.yml": {
    "contents": "apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: jhipster-prometheus-operator-cr
rules:
  - apiGroups:
      - extensions
    resources:
      - thirdpartyresources
    verbs:
      - "*"
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - "*"
  - apiGroups:
      - monitoring.coreos.com
    resources:
      - alertmanagers
      - prometheuses
      - servicemonitors
      - prometheusrules
    verbs:
      - "*"
  - apiGroups:
      - apps
    resources:
      - statefulsets
    verbs: ["*"]
  - apiGroups: [""]
    resources:
      - configmaps
      - secrets
    verbs: ["*"]
  - apiGroups: [""]
    resources:
      - pods
    verbs: ["list", "delete"]
  - apiGroups: [""]
    resources:
      - services
      - endpoints
    verbs: ["get", "create", "update"]
  - apiGroups: [""]
    resources:
      - nodes
    verbs: ["list", "watch"]
  - apiGroups: [""]
    resources:
      - namespaces
    verbs: ["list", "watch"]
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: jhipster-prometheus-operator-sa
  namespace: mynamespace
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: jhipster-prometheus-operator-rb
  namespace: mynamespace
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: jhipster-prometheus-operator-cr
subjects:
  - kind: ServiceAccount
    name: jhipster-prometheus-operator-sa
    namespace: mynamespace
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    k8s-app: prometheus-operator
  name: jhipster-prometheus-operator
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: prometheus-operator
  template:
    metadata:
      labels:
        k8s-app: prometheus-operator
    spec:
      containers:
        - args:
            - --kubelet-service=kube-system/kubelet
            - --config-reloader-image=quay.io/coreos/configmap-reload:v0.0.1
          image: prometheus-operator-placeholder
          name: prometheus-operator
          ports:
            - containerPort: 8080
              name: http
          resources:
            limits:
              cpu: 200m
              memory: 100Mi
            requests:
              cpu: 100m
              memory: 50Mi
      serviceAccountName: jhipster-prometheus-operator-sa
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.mynamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_PROMETHEUS_METRICS_EXPORT_ENABLED
              value: "true"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: mynamespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-prometheus-sm.yml": {
    "contents": "apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: msmysql-app
  namespace: mynamespace
  labels:
    team: mynamespace
spec:
  selector:
    matchLabels:
      app: msmysql
  endpoints:
    - port: web
      path: /prometheusMetrics
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.mynamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: mynamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - mynamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.mynamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes mysql microservice with custom namespace and jhipster prometheus monitoring should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes mysql microservice with custom namespace should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["02-mysql"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": null,
    "ingressType": null,
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "mynamespace",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`

kubectl scale deployment <app-name> --replicas <replica-count> -n mynamespace

\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`

kubectl set image deployment/<app-name>-app <app-name>=<new-image> -n mynamespace

\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.




## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!

\`\`\`
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f namespace.yml
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

namespace: mynamespace

resources:
  - namespace.yml
  # Individual apps
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.mynamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.mynamespace.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: mynamespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: mynamespace
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: mynamespace
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: mynamespace
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: mynamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: mynamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.mynamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: mynamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: mynamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - mynamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.mynamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes mysql microservice with custom namespace should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes mysql, psql, mongodb, mariadb, mssql microservices with dynamic storage provisioning should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": [
      "01-gateway",
      "02-mysql",
      "03-psql",
      "04-mongo",
      "07-mariadb",
      "11-mssql"
    ],
    "baseName": "workspaces",
    "clusteredDbApps": [],
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "microservice",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipster",
    "ingressDomain": null,
    "ingressType": null,
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "default",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipster/jhgate
$ docker push jhipster/jhgate
$ docker image tag msmysql jhipster/msmysql
$ docker push jhipster/msmysql
$ docker image tag mspsql jhipster/mspsql
$ docker push jhipster/mspsql
$ docker image tag msmongodb jhipster/msmongodb
$ docker push jhipster/msmongodb
$ docker image tag msmariadb jhipster/msmariadb
$ docker push jhipster/msmariadb
$ docker image tag msmssqldb jhipster/msmssqldb
$ docker push jhipster/msmssqldb
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count>
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipster/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.default.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: default
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: default
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/
    kubectl apply -f msmysql-\${suffix}/
    kubectl apply -f mspsql-\${suffix}/
    kubectl apply -f msmongodb-\${suffix}/
    kubectl apply -f msmariadb-\${suffix}/
    kubectl apply -f msmssqldb-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

resources:
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  - msmysql-k8s/msmysql-deployment.yml
  - msmysql-k8s/msmysql-service.yml
  - msmysql-k8s/msmysql-mysql.yml
  - mspsql-k8s/mspsql-deployment.yml
  - mspsql-k8s/mspsql-service.yml
  - mspsql-k8s/mspsql-postgresql.yml
  - mspsql-k8s/mspsql-elasticsearch.yml
  - msmongodb-k8s/msmongodb-deployment.yml
  - msmongodb-k8s/msmongodb-service.yml
  - msmongodb-k8s/msmongodb-mongodb.yml
  - msmariadb-k8s/msmariadb-deployment.yml
  - msmariadb-k8s/msmariadb-service.yml
  - msmariadb-k8s/msmariadb-mariadb.yml
  - msmssqldb-k8s/msmssqldb-deployment.yml
  - msmssqldb-k8s/msmssqldb-service.yml
  - msmssqldb-k8s/msmssqldb-mssql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmariadb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmariadb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmariadb-mariadb 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmariadb-app
          image: jhipster/msmariadb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mariadb://msmariadb-mariadb.default.svc.cluster.local:3306/msmariadb?useLegacyDatetimeCode=false
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-mariadb.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmariadb-mariadb-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: msmariadb-mariadb
  namespace: default
  labels:
    app: msmariadb-mariadb
type: Opaque
data:
  mariadb-root-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmariadb-mariadb
  template:
    metadata:
      labels:
        app: msmariadb-mariadb
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmariadb-mariadb-pvc
      containers:
        - name: mariadb
          image: mariadb-placeholder
          env:
            - name: MYSQL_ROOT_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: msmariadb-mariadb
                  key: mariadb-root-password
            - name: MYSQL_DATABASE
              value: msmariadb
          #        command:
          #        - mysqld
          #        - --lower_case_table_names=1
          #        - --skip-ssl
          #        - --character_set_server=utf8mb4
          #        - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmariadb-mariadb
  namespace: default
spec:
  selector:
    app: msmariadb-mariadb
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmariadb-k8s/msmariadb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmariadb
  namespace: default
  labels:
    app: msmariadb
spec:
  selector:
    app: msmariadb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmongodb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmongodb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmongodb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmongodb-mongodb 27017)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmongodb-app
          image: jhipster/msmongodb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATA_MONGODB_URI
              value: "mongodb://msmongodb-mongodb-0.msmongodb-mongodb.default:27017/msmongodb"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-mongodb.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-config
data:
  mongod.conf: |
    net:
      port: 27017
    replication:
      replSetName: rs0
    storage:
      dbPath: /data/db
---
apiVersion: v1
kind: ConfigMap
metadata:
  namespace: default
  name: msmongodb-mongodb-init
data:
  on-start.sh: |
    script_name=\${0##*/}

    log() {
        local msg="$1"
        local timestamp
        timestamp=$(date --iso-8601=ns)
        echo "[$timestamp] [$script_name] $msg" >> /work-dir/log.txt
    }

    shutdown_mongo() {
        if [[ $# -eq 1 ]]; then
            args="timeoutSecs: $1"
        else
            args='force: true'
        fi
        log "Shutting down MongoDB ($args)..."
        mongo admin "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "db.shutdownServer({$args})"
    }

    my_hostname=$(hostname)
    log "Bootstrapping MongoDB replica set member: $my_hostname"

    log "Reading standard input..."
    while read -ra line; do
        if [[ "\${line}" == *"\${my_hostname}"* ]]; then
            service_name="$line"
            continue
        fi
        peers=("\${peers[@]}" "$line")
    done

    # Generate the ca cert
    ca_crt=/data/configdb/tls.crt
    if [ -f "$ca_crt"  ]; then
        log "Generating certificate"
        ca_key=/data/configdb/tls.key
        pem=/work-dir/mongo.pem
        ssl_args=(--ssl --sslCAFile "$ca_crt" --sslPEMKeyFile "$pem")

    # Move into /work-dir
    pushd /work-dir

    cat >openssl.cnf <<EOL
    [req]
    req_extensions = v3_req
    distinguished_name = req_distinguished_name
    [req_distinguished_name]
    [ v3_req ]
    basicConstraints = CA:FALSE
    keyUsage = nonRepudiation, digitalSignature, keyEncipherment
    subjectAltName = @alt_names
    [alt_names]
    DNS.1 = $(echo -n "$my_hostname" | sed s/-[0-9]*$//)
    DNS.2 = $my_hostname
    DNS.3 = $service_name
    DNS.4 = localhost
    DNS.5 = 127.0.0.1
    EOL

        # Generate the certs
        openssl genrsa -out mongo.key 2048
        openssl req -new -key mongo.key -out mongo.csr -subj "/CN=$my_hostname" -config openssl.cnf
        openssl x509 -req -in mongo.csr \\
            -CA "$ca_crt" -CAkey "$ca_key" -CAcreateserial \\
            -out mongo.crt -days 3650 -extensions v3_req -extfile openssl.cnf

        rm mongo.csr
        cat mongo.crt mongo.key > $pem
        rm mongo.key mongo.crt
    fi


    log "Peers: \${peers[*]}"

    log "Starting a MongoDB instance..."
    mongod --config /data/configdb/mongod.conf --dbpath="$DATA_PATH" --replSet="$REPLICA_SET" --port=$PORT "\${auth_args[@]}" --bind_ip=0.0.0.0 >> /work-dir/log.txt 2>&1 &

    log "Waiting for MongoDB to be ready..."
    until mongo "\${ssl_args[@]}" --eval "db.adminCommand('ping')"; do
        log "Retrying..."
        sleep 2
    done

    log "Initialized."

    # try to find a master and add yourself to its replica set.
    for peer in "\${peers[@]}"; do
        if mongo admin --host "$peer" "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "rs.isMaster()" | grep '"ismaster" : true'; then
            log "Found master: $peer"
            log "Adding myself ($service_name) to replica set..."
            if mongo admin --host "$peer" "\${admin_creds[@]}" "\${ssl_args[@]}" --eval "rs.add('$service_name')" | grep 'Quorum check failed'; then
                log 'Quorum check failed, unable to join replicaset. Exiting prematurely.'
                shutdown_mongo
                exit 1
            fi

            sleep 3

            log 'Waiting for replica to reach SECONDARY state...'
            until printf '.' && [[ $(mongo admin "\${admin_creds[@]}" "\${ssl_args[@]}" --quiet --eval "rs.status().myState") == '2' ]]; do
                sleep 1
            done

            log '✓ Replica reached SECONDARY state.'

            shutdown_mongo "60"
            log "Good bye."
            exit 0
        fi
    done

    # else initiate a replica set with yourself.
    if mongo "\${ssl_args[@]}" --eval "rs.status()" | grep "no replset config has been received"; then
        log "Initiating a new replica set with myself ($service_name)..."
        mongo "\${ssl_args[@]}" --eval "rs.initiate({'_id': '$REPLICA_SET', 'members': [{'_id': 0, 'host': '$service_name'}]})"

        sleep 3

        log 'Waiting for replica to reach PRIMARY state...'
        until printf '.' && [[ $(mongo "\${ssl_args[@]}" --quiet --eval "rs.status().myState") == '1' ]]; do
            sleep 1
        done

        log '✓ Replica reached PRIMARY state.'

        log "Done."
    fi

    shutdown_mongo
    log "Good bye."
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  serviceName: msmongodb-mongodb
  replicas: 1
  selector:
    matchLabels:
      app: msmongodb-mongodb
  template:
    metadata:
      labels:
        app: msmongodb-mongodb
    spec:
      initContainers:
        - name: config
          image: busybox
          command:
            - "sh"
          args:
            - "-c"
            - |
              set -e
              set -x
              cp /configdb-readonly/mongod.conf /data/configdb/mongod.conf
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: config
              mountPath: /configdb-readonly
            - name: configdir
              mountPath: /data/configdb
        - name: install
          image: "k8s.gcr.io/mongodb-install:0.6"
          args:
            - --work-dir=/work-dir
          imagePullPolicy: "IfNotPresent"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
        - name: boot
          image: mongodb-placeholder
          command:
            - /work-dir/peer-finder
          args:
            - -on-start=/init/on-start.sh
            - "-service=msmongodb-mongodb"
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: "27017"
          volumeMounts:
            - name: workdir
              mountPath: /work-dir
            - name: init
              mountPath: /init
            - name: configdir
              mountPath: /data/configdb
            - name: datadir
              mountPath: /data/db
      containers:
        - name: mongodb
          image: mongodb-placeholder
          imagePullPolicy: "IfNotPresent"
          env:
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: metadata.namespace
            - name: REPLICA_SET
              value: rs0
            - name: DATA_PATH
              value: /data/db
            - name: PORT
              value: "27017"
          ports:
            - name: peer
              containerPort: 27017
          command:
            - mongod
          args:
            - --config=/data/configdb/mongod.conf
            - --dbpath=$(DATA_PATH)
            - --replSet=$(REPLICA_SET)
            - --port=$(PORT)
            - --bind_ip=0.0.0.0
          livenessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 30
            timeoutSeconds: 5
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          readinessProbe:
            exec:
              command:
                - mongo
                - --eval
                - "db.adminCommand('ping')"
            initialDelaySeconds: 5
            timeoutSeconds: 1
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
          volumeMounts:
            - name: datadir
              mountPath: /data/db
            - name: configdir
              mountPath: /data/configdb
            - name: workdir
              mountPath: /work-dir
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
      volumes:
        - name: config
          configMap:
            name: msmongodb-mongodb-config
        - name: workdir
          emptyDir: {}
        - name: init
          configMap:
            defaultMode: 0755
            name: msmongodb-mongodb-init
        - name: configdir
          emptyDir: {}
  volumeClaimTemplates:
    - metadata:
        name: datadir
      spec:
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: "1Gi"
---
# Headless service for DNS record
apiVersion: v1
kind: Service
metadata:
  name: msmongodb-mongodb
  namespace: default
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: peer
      port: 27017
  selector:
    app: msmongodb-mongodb
",
    "stateCleared": "modified",
  },
  "msmongodb-k8s/msmongodb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmongodb
  namespace: default
  labels:
    app: msmongodb
spec:
  selector:
    app: msmongodb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb
      version: "v1"
  template:
    metadata:
      labels:
        app: msmssqldb
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmssqldb
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmssqldb-app
          image: jhipster/msmssqldb
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-mssql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmssqldb-mssql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmssqldb-mssql
  template:
    metadata:
      labels:
        app: msmssqldb-mssql
    spec:
      volumes:
        - name: mssqldb
          persistentVolumeClaim:
            claimName: mssql-data
        - name: data
          persistentVolumeClaim:
            claimName: msmssqldb-mssql-pvc
      containers:
        - name: mysql
          image: mssql-placeholder
          env:
            - name: MSSQL_PID
              value: "Express"
            - name: ACCEPT_EULA
              value: "Y"
            - name: MSSQL_SA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mssql
                  key: SA_PASSWORD
          ports:
            - containerPort: 1433
          volumeMounts:
            - name: mssqldb
              mountPath: /var/opt/mssql
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"

---
apiVersion: v1
kind: Service
metadata:
  name: msmssqldb-mssql
  namespace: default
spec:
  selector:
    app: msmssqldb-mssql
  ports:
    - protocol: TCP
      port: 1433
      targetPort: 1433
  type: LoadBalancer
---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mssql-data
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: managed-premium
  resources:
    requests:
      storage: 8Gi
",
    "stateCleared": "modified",
  },
  "msmssqldb-k8s/msmssqldb-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmssqldb
  namespace: default
  labels:
    app: msmssqldb
spec:
  selector:
    app: msmssqldb
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql
      version: "v1"
  template:
    metadata:
      labels:
        app: msmysql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - msmysql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 msmysql-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: msmysql-app
          image: jhipster/msmysql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://msmysql-mysql.default.svc.cluster.local:3306/msmysql?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: msmysql-mysql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: msmysql-mysql
  template:
    metadata:
      labels:
        app: msmysql-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: msmysql-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: msmysql
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: msmysql-mysql
  namespace: default
spec:
  selector:
    app: msmysql-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "msmysql-k8s/msmysql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: msmysql
  namespace: default
  labels:
    app: msmysql
spec:
  selector:
    app: msmysql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql
      version: "v1"
  template:
    metadata:
      labels:
        app: mspsql
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - mspsql
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 mspsql-postgresql 5432)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: mspsql-app
          image: jhipster/mspsql
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.default.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_DATASOURCE_USERNAME
              value: mspsql
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:postgresql://mspsql-postgresql.default.svc.cluster.local:5432/mspsql
            - name: SPRING_ELASTICSEARCH_REST_URIS
              value: http://mspsql-elasticsearch.default.svc.cluster.local:9200
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8081
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-elasticsearch.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-elasticsearch-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-elasticsearch
  template:
    metadata:
      labels:
        app: mspsql-elasticsearch
    spec:
      securityContext:
        fsGroup: 1000
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-elasticsearch-pvc
      initContainers:
        - name: init-sysctl
          image: busybox
          command:
            - sysctl
            - -w
            - vm.max_map_count=262144
          securityContext:
            privileged: true
      containers:
        - name: elasticsearch
          image: elasticsearch-placeholder
          env:
            - name: discovery.type
              value: single-node
          ports:
            - containerPort: 9200
              name: http
              protocol: TCP
            - containerPort: 9300
              name: transport
              protocol: TCP
          volumeMounts:
            - name: data
              mountPath: /usr/share/elasticsearch/data/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-elasticsearch
  namespace: default
spec:
  selector:
    app: mspsql-elasticsearch
  ports:
    - port: 9200
      name: http
      protocol: TCP
    - port: 9300
      name: transport
      protocol: TCP
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-postgresql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mspsql-postgresql-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: v1
kind: Secret
metadata:
  name: mspsql-postgresql
  namespace: default
  labels:
    app: mspsql-postgresql
type: Opaque
data:
  postgresql-password: U0VDUkVULVBBU1NXT1JE
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mspsql-postgresql
  template:
    metadata:
      labels:
        app: mspsql-postgresql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: mspsql-postgresql-pvc
      containers:
        - name: postgres
          image: postgresql-placeholder
          env:
            - name: POSTGRES_USER
              value: mspsql
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: mspsql-postgresql
                  key: postgresql-password
          ports:
            - containerPort: 5432
          volumeMounts:
            - name: data
              mountPath: /var/lib/postgresql/data
              subPath: postgres
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: mspsql-postgresql
  namespace: default
spec:
  selector:
    app: mspsql-postgresql
  ports:
    - port: 5432
",
    "stateCleared": "modified",
  },
  "mspsql-k8s/mspsql-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: mspsql
  namespace: default
  labels:
    app: mspsql
spec:
  selector:
    app: mspsql
  ports:
    - name: http
      port: 8081
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: default
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.default.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: default
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: default
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - default
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.default.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipster/jhgate
      context: ./01-gateway
      jib: {}
    - image: jhipster/msmysql
      context: ./02-mysql
      jib: {}
    - image: jhipster/mspsql
      context: ./03-psql
      jib: {}
    - image: jhipster/msmongodb
      context: ./04-mongo
      jib: {}
    - image: jhipster/msmariadb
      context: ./07-mariadb
      jib: {}
    - image: jhipster/msmssqldb
      context: ./11-mssql
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes mysql, psql, mongodb, mariadb, mssql microservices with dynamic storage provisioning should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes only gateway should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "gateway",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipsterrepository",
    "ingressDomain": null,
    "ingressType": null,
    "istio": false,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "jhipsternamespace",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "consul"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipsterrepository/jhgate
$ docker push jhipsterrepository/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate -n jhipsternamespace
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count> -n jhipsternamespace
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>  -n jhipsternamespace
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipsterrepository/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONSUL_HOST
              value: consul-headless.jhipsternamespace.svc.cluster.local
            - name: SPRING_CLOUD_CONSUL_PORT
              value: "8500"
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: jhipsternamespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: jhipsternamespace
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f namespace.yml
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

namespace: jhipsternamespace

resources:
  - namespace.yml
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  # service discovery eureka/consul
  - registry-k8s/consul.yml
  - registry-k8s/consul-config-loader.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: jhipsternamespace
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: jhipsternamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name: Consul
      status: Connected to Consul running in Kubernetes
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul-config-loader.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: consul-config-loader
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: consul-config-loader
  template:
    metadata:
      labels:
        app: consul-config-loader
    spec:
      containers:
        - name: consul-config-loader
          image: consul-config-loader-placeholder
          imagePullPolicy: IfNotPresent
          env:
            - name: INIT_SLEEP_SECONDS
              value: "5"
            - name: CONSUL_URL
              value: consul-headless.jhipsternamespace.svc.cluster.local
            - name: CONSUL_PORT
              value: "8500"
          volumeMounts:
            - name: config-volume
              mountPath: /config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "registry-k8s/consul.yml": {
    "contents": "# Consul HA cluster
#
# Based on https://artifacthub.io/packages/helm/bitnami/consul
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, Consul and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8500 by running :
#   kubectl port-forward consul-0 8500 -n yourNamespace
#
# To check the state of your Consul cluster :
#   kubectl exec consul-0 -n yourNamespace -- sh -c 'consul members'
#
# To scale your Consul cluster :
#   kubectl patch statefulset/consul -n yourNamespace -p '{"spec":{"replicas": 5}}'
#
# To check the state of every node
#   for i in {0..4}; do kubectl exec consul-$i -n yourNamespace -- sh -c 'consul members'; done
apiVersion: v1
kind: Secret
metadata:
  name: gossip-key
  namespace: jhipsternamespace
type: Opaque
data:
  gossip-key: SUcwRzF3N2c4QW5YMDA3cUEwWElqMTJG # a 24 chars base64 encoded string
---
apiVersion: v1
kind: Service
metadata:
  name: consul-headless
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: http
      protocol: TCP
      port: 8500
    - name: rpc
      port: 8400
    - name: serflan-tcp
      protocol: TCP
      port: 8301
    - name: serflan-udp
      protocol: UDP
      port: 8301
    - name: rpc-server
      port: 8300
    - name: dns-tcp
      port: 8600
    - name: dns-udp
      protocol: UDP
      port: 8600
  selector:
    app.kubernetes.io/name: consul
    app: consul
  sessionAffinity: None
---
apiVersion: v1
kind: Service
metadata:
  name: consul-ui
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  type: ClusterIP
  sessionAffinity: None
  ports:
    - name: http
      port: 8500
      targetPort: http
  selector:
    app.kubernetes.io/name: consul
    app: consul
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: consul
  namespace: jhipsternamespace
  labels:
    app.kubernetes.io/name: consul
    app: consul
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: consul
      app: consul
  replicas: 3
  serviceName: consul-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: consul
        app: consul
    spec:
      affinity:
        podAffinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/name: consul
                    app: consul
                namespaces:
                  - jhipsternamespace
                topologyKey: kubernetes.io/hostname
              weight: 1
        nodeAffinity:

      securityContext:
        fsGroup: 1001
      containers:
        - name: consul
          image: consul-placeholder
          imagePullPolicy: "IfNotPresent"
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
            runAsUser: 1001
          ports:
            - name: http
              containerPort: 8500
            - name: rpc
              containerPort: 8400
            - name: serflan-tcp
              protocol: "TCP"
              containerPort: 8301
            - name: serflan-udp
              containerPort: 8301
              protocol: "UDP"
            - name: rpc-server
              containerPort: 8300
            - name: dns-tcp
              containerPort: 8600
            - name: dns-udp
              containerPort: 8600
              protocol: "UDP"
          resources:
            requests:
              cpu: "100m"
              memory: "512Mi"
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CONSUL_NODE_NAME
              valueFrom:
                fieldRef:
                  fieldPath: metadata.name
            - name: CONSUL_RETRY_JOIN
              value: "consul-headless.jhipsternamespace.svc.cluster.local"
            - name: CONSUL_DISABLE_KEYRING_FILE
              value: "true"
            - name: CONSUL_BOOTSTRAP_EXPECT
              value: "3"
            - name: CONSUL_RAFT_MULTIPLIER
              value: "1"
            - name: CONSUL_DOMAIN
              value: "consul"
            - name: CONSUL_DATACENTER
              value: "dc1"
            - name: CONSUL_UI
              value: "true"
            - name: CONSUL_HTTP_PORT_NUMBER
              value: "8500"
            - name: CONSUL_DNS_PORT_NUMBER
              value: "8600"
            - name: CONSUL_RPC_PORT_NUMBER
              value: "8400"
            - name: CONSUL_SERF_LAN_PORT_NUMBER
              value: "8301"
          envFrom:
          livenessProbe:
            exec:
              command:
                - consul
                - operator
                - raft
                - list-peers
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - consul
                - members
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          lifecycle:
            preStop:
              exec:
                command:
                  - consul
                  - leave
          volumeMounts:
            - name: data
              mountPath: /bitnami/consul
      volumes:
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: "8Gi"
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipsterrepository/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes only gateway should match spawn calls snapshot 1`] = `[]`;

exports[`generator - Kubernetes only gateway with eureka should match files snapshot 1`] = `
{
  ".yo-rc.json": {
    "contents": "{
  "generator-jhipster": {
    "adminPassword": "meetup",
    "appsFolders": ["01-gateway"],
    "baseName": "workspaces",
    "dbRandomPassword": "SECRET-PASSWORD",
    "deploymentApplicationType": "monolith",
    "directoryPath": "./",
    "dockerPushCommand": "docker push",
    "dockerRepositoryName": "jhipsterrepository",
    "ingressDomain": null,
    "ingressType": null,
    "jwtSecretKey": "SECRET--50",
    "kubernetesNamespace": "jhipsternamespace",
    "kubernetesServiceType": "LoadBalancer",
    "kubernetesStorageClassName": "",
    "kubernetesUseDynamicStorage": true,
    "monitoring": "no",
    "serviceDiscoveryType": "eureka"
  }
}
",
    "stateCleared": "modified",
  },
  "K8S-README.md": {
    "contents": "# JHipster-generated Kubernetes configuration

## Preparation

You will need to push your image to a registry. If you have not done so, use the following commands to tag and push the images:

\`\`\`
$ docker image tag jhgate jhipsterrepository/jhgate
$ docker push jhipsterrepository/jhgate
\`\`\`

## Deployment

You can deploy all your apps by running the below bash command:

\`\`\`
./kubectl-apply.sh -f (default option)  [or] ./kubectl-apply.sh -k (kustomize option) [or] ./kubectl-apply.sh -s (skaffold run)
\`\`\`

If you want to apply kustomize manifest directly using kubectl, then run

\`\`\`
kubectl apply -k ./
\`\`\`

If you want to deploy using skaffold binary, then run

\`\`\`
skaffold run [or] skaffold deploy
\`\`\`

## Exploring your services

Use these commands to find your application's IP addresses:

\`\`\`
$ kubectl get svc jhgate -n jhipsternamespace
\`\`\`

## Scaling your deployments

You can scale your apps using:

\`\`\`
kubectl scale deployment <app-name> --replicas <replica-count> -n jhipsternamespace
\`\`\`

## Zero-downtime deployments

The default way to update a running app in kubernetes, is to deploy a new image tag to your docker registry and then deploy it using:

\`\`\`
kubectl set image deployment/<app-name>-app <app-name>=<new-image>  -n jhipsternamespace
\`\`\`

Using livenessProbes and readinessProbe allow you to tell Kubernetes about the state of your applications, in order to ensure availability of your services. You will need a minimum of two replicas for every application deployment if you want to have zero-downtime.
This is because the rolling upgrade strategy first stops a running replica in order to place a new. Running only one replica, will cause a short downtime during upgrades.

## JHipster Registry

The registry is deployed using a headless service in Kubernetes, so the primary service has no IP address, and cannot get a node port. You can create a secondary service for any type, using:

\`\`\`
kubectl expose service jhipster-registry --type=NodePort --name=exposed-registry -n jhipsternamespace
\`\`\`

And explore the details using:

\`\`\`
kubectl get svc exposed-registry -n jhipsternamespace
\`\`\`

For scaling the JHipster registry, use:

\`\`\`
kubectl scale statefulset jhipster-registry --replicas 3 -n jhipsternamespace
\`\`\`

## Troubleshooting

> my app doesn't get pulled, because of 'imagePullBackof'

Check the docker registry your Kubernetes cluster is accessing. If you are using a private registry, you should add it to your namespace by \`kubectl create secret docker-registry\` (check the [docs](https://kubernetes.io/docs/tasks/configure-pod-container/pull-image-private-registry/) for more info)

> my applications are stopped, before they can boot up

This can occur if your cluster has low resource (e.g. Minikube). Increase the \`initialDelaySeconds\` value of livenessProbe of your deployments

> my applications are starting very slow, despite I have a cluster with many resources

The default setting are optimized for middle-scale clusters. You are free to increase the JAVA_OPTS environment variable, and resource requests and limits to improve the performance. Be careful!
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-deployment.yml": {
    "contents": "apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate
      version: "v1"
  template:
    metadata:
      labels:
        app: jhgate
        version: "v1"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - jhgate
                topologyKey: kubernetes.io/hostname
              weight: 100
      initContainers:
        - name: init-ds
          image: busybox:latest
          command:
            - "/bin/sh"
            - "-c"
            - |
              while true
              do
                rt=$(nc -z -w 1 jhgate-mysql 3306)
                if [ $? -eq 0 ]; then
                  echo "DB is UP"
                  break
                fi
                echo "DB is not yet reachable;sleep for 10s before retry"
                sleep 10
              done
      containers:
        - name: jhgate-app
          image: jhipsterrepository/jhgate
          env:
            - name: SPRING_PROFILES_ACTIVE
              value: prod
            - name: SPRING_CLOUD_CONFIG_URI
              value: http://admin:\${jhipster.registry.password}@jhipster-registry.jhipsternamespace.svc.cluster.local:8761/config
            - name: JHIPSTER_REGISTRY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              value: http://admin:\${jhipster.registry.password}@jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/
            - name: SPRING_DATASOURCE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_LIQUIBASE_URL
              value: jdbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: SPRING_R2DBC_URL
              value: r2dbc:mysql://jhgate-mysql.jhipsternamespace.svc.cluster.local:3306/jhgate?useUnicode=true&characterEncoding=utf8&useSSL=false&useLegacyDatetimeCode=false&createDatabaseIfNotExist=true
            - name: MANAGEMENT_TRACING_BAGGAGE_REMOTE_FIELDS
              value: "x-request-id,x-ot-span-context"
            - name: JAVA_OPTS
              value: " -Xmx256m -Xms256m"
            - name: SERVER_SHUTDOWN
              value: graceful
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
          ports:
            - name: http
              containerPort: 8080
          readinessProbe:
            httpGet:
              path: /management/health/readiness
              port: http
            initialDelaySeconds: 20
            periodSeconds: 15
            failureThreshold: 6
          livenessProbe:
            httpGet:
              path: /management/health/liveness
              port: http
            initialDelaySeconds: 120
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-mysql.yml": {
    "contents": "apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: jhgate-mysql-pvc
  namespace: jhipsternamespace
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 2Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  replicas: 1
  selector:
    matchLabels:
      app: jhgate-mysql
  template:
    metadata:
      labels:
        app: jhgate-mysql
    spec:
      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: jhgate-mysql-pvc
      containers:
        - name: mysql
          image: mysql-placeholder
          env:
            - name: MYSQL_ALLOW_EMPTY_PASSWORD
              value: "yes"
            - name: MYSQL_DATABASE
              value: jhgate
          args:
            - --lower_case_table_names=1
            - --skip-ssl
            - --character_set_server=utf8mb4
            - --explicit_defaults_for_timestamp
          ports:
            - containerPort: 3306
          volumeMounts:
            - name: data
              mountPath: /var/lib/mysql/
          resources:
            requests:
              memory: "512Mi"
              cpu: "500m"
            limits:
              memory: "1Gi"
              cpu: "1"
---
apiVersion: v1
kind: Service
metadata:
  name: jhgate-mysql
  namespace: jhipsternamespace
spec:
  selector:
    app: jhgate-mysql
  ports:
    - port: 3306
",
    "stateCleared": "modified",
  },
  "jhgate-k8s/jhgate-service.yml": {
    "contents": "apiVersion: v1
kind: Service
metadata:
  name: jhgate
  namespace: jhipsternamespace
  labels:
    app: jhgate
spec:
  selector:
    app: jhgate
  type: LoadBalancer
  ports:
    - name: http
      port: 8080
",
    "stateCleared": "modified",
  },
  "kubectl-apply.sh": {
    "contents": "#!/bin/bash
# Files are ordered in proper order with needed wait for the dependent custom resource definitions to get initialized.
# Usage: bash kubectl-apply.sh

usage(){
 cat << EOF

 Usage: $0 -f
 Description: To apply k8s manifests using the default \\\`kubectl apply -f\\\` command
[OR]
 Usage: $0 -k
 Description: To apply k8s manifests using the kustomize \\\`kubectl apply -k\\\` command
[OR]
 Usage: $0 -s
 Description: To apply k8s manifests using the skaffold binary \\\`skaffold run\\\` command

EOF
exit 0
}

logSummary() {
    echo ""
}

default() {
    suffix=k8s
    kubectl apply -f namespace.yml
    kubectl apply -f registry-\${suffix}/
    kubectl apply -f jhgate-\${suffix}/

}

kustomize() {
    kubectl apply -k ./
}

scaffold() {
    // this will build the source and apply the manifests the K8s target. To turn the working directory
    // into a CI/CD space, initilaize it with \`skaffold dev\`
    skaffold run
}

[[ "$@" =~ ^-[fks]{1}$ ]]  || usage;

while getopts ":fks" opt; do
    case \${opt} in
    f ) echo "Applying default \\\`kubectl apply -f\\\`"; default ;;
    k ) echo "Applying kustomize \\\`kubectl apply -k\\\`"; kustomize ;;
    s ) echo "Applying using skaffold \\\`skaffold run\\\`"; scaffold ;;
    \\? | * ) usage ;;
    esac
done

logSummary
",
    "stateCleared": "modified",
  },
  "kustomization.yml": {
    "contents": "commonLabels:
  app.kubernetes.io/genereted-by: JHipster

namespace: jhipsternamespace

resources:
  - namespace.yml
  # Individual apps
  - jhgate-k8s/jhgate-deployment.yml
  - jhgate-k8s/jhgate-service.yml
  - jhgate-k8s/jhgate-mysql.yml
  # service discovery eureka/consul
  - registry-k8s/jhipster-registry.yml
  - registry-k8s/application-configmap.yml

patchesJson6902:
",
    "stateCleared": "modified",
  },
  "namespace.yml": {
    "contents": "apiVersion: v1
kind: Namespace
metadata:
  name: jhipsternamespace
",
    "stateCleared": "modified",
  },
  "registry-k8s/application-configmap.yml": {
    "contents": "apiVersion: v1
kind: ConfigMap
metadata:
  name: application-config
  namespace: jhipsternamespace
#common configuration shared between all applications
data:
  application.yml: |-
    configserver:
      name:  JHipster Registry
      status: Connected to the JHipster Registry running in Kubernetes
    eureka:
      client:
        initial-instance-info-replication-interval-seconds: 15
        instance-info-replication-interval-seconds: 15
        registry-fetch-interval-seconds: 15
        fetch-registry: true
        register-with-eureka: true
        eureka-service-url-poll-interval-seconds: 15
      instance:
        lease-renewal-interval-in-seconds: 10
        registry-default-open-for-traffic-count: 0
    jhipster:
      security:
        authentication:
          jwt:
            base64-secret: SECRET--50
  # app specific configuration
  jhipster-registry.yml: |-
    eureka:
      client:
        service-url:
          defaultZone: http://admin:\${spring.security.user.password}@jhipster-registry-0.jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/,http://admin:\${spring.security.user.password}@jhipster-registry-1.jhipster-registry.jhipsternamespace.svc.cluster.local:8761/eureka/
",
    "stateCleared": "modified",
  },
  "registry-k8s/jhipster-registry.yml": {
    "contents": "# JHipster Registry HA cluster
#
# Note that as this is based on a StatefulSet, it will only work on Kubernetes >= 1.5
#
# By default, the JHipster Registry and its UI is not accessible from outside the cluster for security reasons
# You can setup temporary access to it on localhost:8761 by running :
#   kubectl port-forward jhipster-registry-0 8761
#
# To scale your JHipster Registry cluster :
#   In this file, change the value of spec.replicas and CLUSTER_SIZE to any value
#   Apply the descriptor again : \`kubectl apply -f jhipster-registry.yml\`
#   This will create new replicas with the correct CLUSTER_SIZE which is mandatory so that all Eureka server can connect directly to all the others.
#   Then delete the previous replica pods one by one so that they can be recreated with the correct CLUSTER_SIZE configuration.
#   \`kubectl delete pod jhipster-registry-0\`, \`kubectl delete pod jhipster-registry-1\`
apiVersion: v1
kind: Secret
metadata:
  name: registry-secret
  namespace: jhipsternamespace
type: Opaque
data:
  registry-admin-password: bWVldHVw # base64 encoded "meetup"
---
apiVersion: v1
kind: Service
metadata:
  name: jhipster-registry
  namespace: jhipsternamespace
  labels:
    app: jhipster-registry
spec:
  ports:
    - port: 8761
      name: http
  clusterIP: None
  publishNotReadyAddresses: true
  selector:
    app: jhipster-registry
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: jhipster-registry
  namespace: jhipsternamespace
spec:
  # added to circumvent kustomize bug
  volumeClaimTemplates: []
  serviceName: jhipster-registry
  replicas: 2
  selector:
    matchLabels:
      app: jhipster-registry
      version: "1.0"
  template:
    metadata:
      labels:
        app: jhipster-registry
        version: "1.0"
    spec:
      terminationGracePeriodSeconds: 10
      containers:
        - name: jhipster-registry
          image: jhipster-registry-placeholder
          ports:
            - containerPort: 8761
          env:
            # StatefulSet specific configuration
            # Registry configuration
            - name: SPRING_PROFILES_ACTIVE
              value: prod,k8s
            - name: SPRING_SECURITY_USER_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: registry-secret
                  key: registry-admin-password
            - name: JHIPSTER_SECURITY_AUTHENTICATION_JWT_BASE64_SECRET
              value: YlhrdGMyVmpjbVYwTFhSdmEyVnVMWFJ2TFdOb1lXNW5aUzFwYmkxd2NtOWtkV04wYVc5dUxXRnVaQzEwYnkxclpXVndMV2x1TFdFdGMyVmpkWEpsTFhCc1lXTmwK
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_TYPE
              value: native
            - name: SPRING_CLOUD_CONFIG_SERVER_COMPOSITE_0_SEARCH_LOCATIONS
              value: file:./central-config
            - name: EUREKA_INSTANCE_LEASE_RENEWAL_INTERVAL_IN_SECONDS
              value: "15"
            - name: EUREKA_INSTANCE_LEASE_EXPIRATION_DURATION_IN_SECONDS
              value: "30"
            - name: EUREKA_SERVER_PEER_EUREKA_NODES_UPDATE_INTERVAL_MS
              value: "15000"
            - name: EUREKA_SERVER_RENAWAL_THRESHOLD_UPDATE_INTERVAL_MS
              value: "15000"
            - name: EUREKA_SERVER_REGISTRY_SYNC_RETRIES
              value: "3"
            - name: EUREKA_SERVER_ENABLE_SELF_PRESERVATION
              value: "false"
            - name: EUREKA_SERVER_PEER_NODE_CONNECT_TIMEOUT_MS
              value: "2000"
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: K8S_CONFIG_PATH
              value: "/central-config/"
          volumeMounts:
            - name: config-volume
              mountPath: /central-config
      volumes:
        - name: config-volume
          configMap:
            name: application-config
",
    "stateCleared": "modified",
  },
  "skaffold.yml": {
    "contents": "apiVersion: skaffold/v1
kind: Config
build:
  artifacts:
    - image: jhipsterrepository/jhgate
      context: ./01-gateway
      jib: {}
  tagPolicy:
    envTemplate:
      template: "{{.IMAGE_NAME}}:latest"
deploy:
  kustomize: {}
",
    "stateCleared": "modified",
  },
}
`;

exports[`generator - Kubernetes only gateway with eureka should match spawn calls snapshot 1`] = `[]`;

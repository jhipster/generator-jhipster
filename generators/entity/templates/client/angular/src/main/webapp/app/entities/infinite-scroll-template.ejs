<%= entityInstancePlural %>: <%= entityClass %>[];
    currentAccount: any;
    itemsPerPage: any;
    links: any;
    page: any;
    predicate: any;
    queryCount: any;
    reverse: any;
    totalItems: any;
    <%_ if (fieldsContainBlob) { _%>
    byteSize: any;
    openFile: any;
    <%_ } _%>

    constructor(
        private <%= entityInstance %>Service: <%= entityClass %>Service,
        private alertService: AlertService,
        <%_ if (fieldsContainBlob) { _%>
        private dataUtils: DataUtils,
        <%_ } _%>
        private eventManager: EventManager,
        private parseLinks: ParseLinks,
        private principal: Principal
    ) {
        this.<%= entityInstancePlural %> = [];
        this.itemsPerPage = ITEMS_PER_PAGE;
        this.page = 0;
        this.links = {
            last: 0
        };
        this.predicate = 'id';
        this.reverse = true;
        <%_ if (fieldsContainBlob) { _%>
        this.openFile = dataUtils.openFile;
        this.byteSize = dataUtils.byteSize;
        <%_ } _%>
    }

    loadAll () {
    <%_ if (searchEngine != 'elasticsearch') { _%>
        this.<%= entityInstance %>Service.query({
            page: this.page,
            size: this.itemsPerPage,
            sort: this.sort()
        }).subscribe(
            (res: Response) => this.onSuccess(res.json(), res.headers),
            (res: Response) => this.onError(res.json())
        );
    <%_ } else { _%>
        if (this.currentSearch) {
            <%= entityClass %>Search.query({
                query: this.currentSearch,
                page: this.page,
                size: this.itemsPerPage,
                sort: this.sort()
            }).subscribe(
                (res: Response) => this.onSuccess(res.json(), res.headers),
                (res: Response) => this.onError(res.json())
            );
        } else {
            this.<%= entityInstance %>Service.query({
                page: this.page,
                size: this.itemsPerPage,
                sort: this.sort()
            }).subscribe(
                (res: Response) => this.onSuccess(res.json(), res.headers),
                (res: Response) => this.onError(res.json())
            );
        }
    <%_ } _%>
    }

    reset () {
        this.page = 0;
        this.<%= entityInstancePlural %> = [];
        this.loadAll();
    }

    loadPage(page) {
        this.page = page;
        this.loadAll();
    }
    <%_ if (searchEngine == 'elasticsearch') { _%>

    clear () {
        this.<%= entityInstancePlural %> = [];
        this.links = {
            last: 0
        };
        this.page = 0;
        this.predicate = 'id';
        this.reverse = true;
        this.searchQuery = null;
        this.currentSearch = null;
        this.loadAll();
    }

    search (searchQuery) {
        if (!searchQuery){
            return this.clear();
        }
        this.<%= entityInstancePlural %> = [];
        this.links = {
            last: 0
        };
        this.page = 0;
        this.predicate = '_score';
        this.reverse = false;
        this.currentSearch = searchQuery;
        this.loadAll();
    }
    <%_ } _%>

    private onSuccess(data, headers) {
        this.links = this.parseLinks.parse(headers.get('link'));
        this.totalItems = headers.get('X-Total-Count');
        for (let i = 0; i < data.length; i++) {
            this.<%= entityInstancePlural %>.push(data[i]);
        }
    }

    registerChangeIn<%= entityClassPlural %>() {
        this.eventManager.subscribe('<%= entityInstance %>ListModification', (response) => {
            this.reset();
        });
    }

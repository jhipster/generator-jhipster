<%_
    const instanceType = (dto == 'mapstruct') ? entityClass + 'DTO' : entityClass;
    const instanceName = (dto == 'mapstruct') ? entityInstance + 'DTO' : entityInstance;
    const mapper = entityInstance + 'Mapper';
    const entityToDtoReference = mapper + '::'+ entityInstance +'To' + entityClass + 'DTO';
    const entityListToDtoListReference = mapper + '.'+ entityInstancePlural +'To' + entityClass + 'DTOs';
    if (pagination == 'no') { %>
    public List<<%= instanceType %>> search<%= entityClassPlural %>(@RequestParam String query) {
        log.debug("REST request to search <%= entityClassPlural %> for query {}", query);<%- include('search_stream_template', {viaService: viaService}); -%>
    <% } if (pagination != 'no') { %>
    public ResponseEntity<List<<%= instanceType %>>> search<%= entityClassPlural %>(@RequestParam String query, @ApiParam Pageable pageable) {
        log.debug("REST request to search for a page of <%= entityClassPlural %> for query {}", query);<% if (viaService) { %>
        Page<<%= instanceType %>> page = <%= entityInstance %>Service.search(query, pageable);<% } else { %>
        Page<<%= entityClass %>> page = <%= entityInstance %>SearchRepository.search(queryStringQuery(query), pageable);<% } %>
        HttpHeaders headers = PaginationUtil.generateSearchPaginationHttpHeaders(query, page, "/api/_search/<%= entityApiUrl %>");
        return new ResponseEntity<>(<% if (!viaService && dto == 'mapstruct') { %><%= entityListToDtoListReference %>(page.getContent())<% } else { %>page.getContent()<% } %>, headers, HttpStatus.OK);
    <% } -%>
}

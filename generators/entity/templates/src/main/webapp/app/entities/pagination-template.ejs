        vm.predicate = pagingParams.predicate;
        vm.reverse = pagingParams.ascending;
        <%_ if (fieldsContainBlob) { _%>
        vm.openFile = DataUtils.openFile;
        vm.byteSize = DataUtils.byteSize;
        <%_ } _%>
        vm.loadAll = function() {
            var onSuccess = function (data, headers) {
                vm.links = ParseLinks.parse(headers('link'));
                vm.totalItems = headers('X-Total-Count');
                vm.<%= entityInstancePlural %> = data;
                vm.page = pagingParams.page;
            };
            var onError = function (error) {
                AlertService.error(error.data.message);
            };
            <%= entityClass %>.query({
                page: pagingParams.page - 1,
                size: paginationConstants.itemsPerPage,
                sort: [vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc')]
            }, onSuccess, onError);
        };
        vm.loadPage = function(page) {
            vm.page = page;
            vm.loadAll();
        };
        <%_ if (searchEngine == 'elasticsearch') { _%>

        vm.search = function () {
            <%= entityClass %>Search.query({query: vm.searchQuery}, function(result) {
                vm.<%= entityInstancePlural %> = result;
            }, function(response) {
                if(response.status === 404) {
                    vm.loadAll();
                }
            });
        };
        <%_ } _%>

        vm.transition = function () {
            $state.transitionTo($state.$current, {
                page: vm.page,
                sort: vm.predicate + ',' + (vm.reverse ? 'asc' : 'desc'),
                search: vm.currentSearch
            });
        };

        vm.loadAll();

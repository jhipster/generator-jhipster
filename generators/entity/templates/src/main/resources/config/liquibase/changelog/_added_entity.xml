<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.4.xsd">

    <property name="now" value="now()" dbms="mysql,h2"/>
    <property name="now" value="current_timestamp" dbms="postgresql"/>
    <property name="now" value="sysdate" dbms="oracle"/>

    <property name="autoIncrement" value="true" dbms="mysql,h2,postgresql,oracle"/>

    <property name="floatType" value="float4" dbms="postgresql, h2"/>
    <property name="floatType" value="float" dbms="mysql, oracle"/>

    <!--
        Added the entity <%= entityClass %>.
    -->
    <changeSet id="<%= changelogDate %>-1" author="jhipster">
        <createTable tableName="<%= entityTableName %>">
            <column name="id" type="bigint" autoIncrement="${autoIncrement}">
                <constraints primaryKey="true" nullable="false"/>
            </column><% for (idx in fields) {
            var nullable = true;
            if (fields[idx].fieldValidate == true && fields[idx].fieldValidateRules.indexOf('required') != -1) {
                nullable = false;
            }
            var maxlength = 255;
            if (fields[idx].fieldValidate == true && fields[idx].fieldValidateRules.indexOf('maxlength') != -1) {
                maxlength = fields[idx].fieldValidateRulesMaxlength;
            }
            var fieldType = fields[idx].fieldType;
            var fieldTypeBlobContent = fields[idx].fieldTypeBlobContent;
            var columnName = fields[idx].fieldNameUnderscored;
            var columnType;
            if (fieldType == 'String' || fields[idx].fieldIsEnum) {
                columnType="varchar(" + maxlength + ")";
            } else if (fieldType == 'Integer') {
                columnType="integer";
            } else if (fieldType == 'Long') {
                columnType="bigint";
            } else if (fieldType == 'Float') {
                columnType="${floatType}";
            } else if (fieldType == 'Double') {
                columnType="double";
            } else if (fieldType == 'BigDecimal') {
                columnType="decimal(10,2)";
            } else if (fieldType == 'LocalDate') {
                columnType="date";
            } else if (fieldType == 'ZonedDateTime') {
                columnType="timestamp";
            } else if (fieldType == 'byte[]' && fieldTypeBlobContent != 'text') {
                if (prodDatabaseType === 'mysql') {
                    columnType="longblob";
                } else {
                    columnType="blob";
                }
            } else if (fieldTypeBlobContent == 'text') {
                columnType="clob";
            } else if (fieldType == 'Boolean') {
                columnType="bit";
            }
            %>
            <column name="<%=columnName %>" type="<%=columnType %>">
                <constraints nullable="<%= nullable %>" />
            </column>
            <%_ if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') { _%>
            <column name="<%=columnName %>_content_type" type="varchar(255)">
                <constraints nullable="<%= nullable %>" />
            </column>
            <%_ }  _%>
            <%

            } %><% for (idx in relationships) {
                var nullable_relation = true,
                relationshipType = relationships[idx].relationshipType,
                relationshipName = relationships[idx].relationshipName;
                if (relationships[idx].relationshipValidate === true && relationships[idx].relationshipRequired) {
                    nullable_relation = false;
                }
                if (relationships[idx].relationshipType === 'many-to-one') { %>
            <column name="<%=getColumnName(relationshipName) %>_id" type="bigint">
                <constraints nullable="<%= nullable_relation %>" />
            </column>
            <%_ } else if (relationshipType === 'one-to-one' && relationships[idx].ownerSide === true) { _%>
            <column name="<%=getColumnName(relationshipName) %>_id" type="bigint">
                <constraints unique="true" nullable="<%= nullable_relation %>" />
            </column><% } %><% } %>
            <!-- jhipster-needle-liquibase-add-column - Jhipster will add columns here, do not remove-->
        </createTable>
        <%_ for (idx in fields) {
            if (fields[idx].fieldType == 'ZonedDateTime') { _%>
        <dropDefaultValue tableName="<%= entityTableName %>" columnName="<%=fields[idx].fieldNameUnderscored %>" columnDataType="datetime"/>
        <%_ }
        } _%>
        <% for (idx in relationships) {
            var relationshipType = relationships[idx].relationshipType,
            relationshipName = relationships[idx].relationshipName,
            ownerSide = relationships[idx].ownerSide,
            otherEntityName = relationships[idx].otherEntityName;
            if (relationshipType == 'many-to-many' && ownerSide) {
                var joinTableName = getJoinTableName(name, relationshipName, prodDatabaseType);
          _%>

        <createTable tableName="<%= joinTableName %>">
            <column name="<%= getPluralColumnName(relationshipName) %>_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <column name="<%= getPluralColumnName(name) %>_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </createTable>

        <addPrimaryKey columnNames="<%= getPluralColumnName(name) %>_id, <%= getPluralColumnName(relationshipName) %>_id" tableName="<%= joinTableName %>"/>
        <% } %><% } %>
    </changeSet>
</databaseChangeLog>

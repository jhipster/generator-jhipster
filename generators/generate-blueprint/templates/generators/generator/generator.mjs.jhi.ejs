<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
import chalk from 'chalk';
<&_
 // Register sections and max allowed fragments, 0 for unlimited.
  fragments.registerSections({
<%_ for (const priority of priorities) { _%>
    <%- priority.name %>Section: 1,
<%_ } _%>
  });
-&>
<%_ if (!application.dynamic) { _%>
import <%= generatorClass %>Generator from 'generator-jhipster/esm/generators/<%= jhipsterGenerator %>';
import {
  PRIORITY_PREFIX,
  <%_ for (const priority of priorities) { _%>
  <%= priority.constant %>,
  <%_ } _%>
} from 'generator-jhipster/esm/priorities';
<%_ } _%>


<%_ if (application.dynamic) { _%>
// eslint-disable-next-line import/prefer-default-export
export async function createGenerator(env) {
  const jhipsterGenerator = 'jhipster:<%= generator %>';
  const jhipsterPath = env.getPackagePath(jhipsterGenerator);
  const constants = (await import(`${jhipsterPath}/generators/generator-constants.js`)).default;
  const {
    PRIORITY_PREFIX,
  <%_ for (const priority of priorities) { _%>
    <%= priority.constant %>,
  <%_ } _%>
  } = await import(`${jhipsterPath}/lib/constants/priorities.mjs`);
  const ParentClass = await env.requireGenerator(jhipsterGenerator);
  return class <%= generatorClass %>Generator extends ParentClass {
<%_ } else { _%>
export default class extends <%= generatorClass %>Generator {
<%_ } _%>
  constructor(args, opts, features) {
    super(args, opts, { taskPrefix: PRIORITY_PREFIX, ...features });

    if (this.options.help) return;

    if (!this.options.jhipsterContext) {
      throw new Error(`This is a JHipster blueprint and should be used only like ${chalk.yellow('jhipster --blueprints <%= application.baseName %>')}`);
    }
<%_ if (sbs) { _%>

    this.sbsBlueprint = true
<%_ } _%>
  }

<% for (const priority of priorities) { %>
<&- fragments.<%- priority.name %>Section() -&>
<& if (!fragments.<%- priority.name %>Section()) { -&>

  get [<%= priority.constant %>]() {
    return {
      async <%= priority.name %>TemplateTask() {
  <%_ if (priority.name == 'writing') { %>
        await this.writeFiles({
          sections: {
            files: [
              { templates: ['template-file-<%= jhipsterGenerator %>'] },
            ],
          },
          context: this,
        });
  <%_ } %>
      },
  <%_ if (!sbs) { _%>
      ...super._<%= priority.name %>(),
  <%_ } _%>
    };
  }
<& } -&>
<% } %>
};
<%_ if (application.dynamic) { _%>
}
<%_ } _%>

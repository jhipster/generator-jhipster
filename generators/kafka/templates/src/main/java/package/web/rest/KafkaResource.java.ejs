<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.web.rest;

import static org.springframework.web.servlet.mvc.method.annotation.SseEmitter.event;

import java.io.IOException;
import java.security.Principal;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.cloud.stream.annotation.StreamListener;
import org.springframework.http.MediaType;
import org.springframework.messaging.Message;
import org.springframework.messaging.MessageChannel;
import org.springframework.messaging.MessageHeaders;
import org.springframework.messaging.support.GenericMessage;
import org.springframework.util.MimeTypeUtils;

import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.ResponseBodyEmitter;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;

import <%= packageName %>.config.KafkaSseConsumer;
import <%= packageName %>.config.KafkaSseProducer;

@RestController
@RequestMapping("/api/<%= dasherizedBaseName %>-kafka")
public class <%= this.upperFirstCamelCase(baseName) %>KafkaResource {

    private final Logger log = LoggerFactory.getLogger(<%= this.upperFirstCamelCase(baseName) %>KafkaResource.class);
    private final MessageChannel output;

    // TODO implement state of the art emitter repository to become 12 factor
    private Map<String, SseEmitter> emitters = new HashMap<>();

    public <%= this.upperFirstCamelCase(baseName) %>KafkaResource(@Qualifier(KafkaSseProducer.CHANNELNAME) MessageChannel output) {
        this.output = output;
    }

    @PostMapping("/publish")
    public void publish(@RequestParam String message) {
        log.debug("REST request the message : {} to send to Kafka topic ", message);
        Map<String, Object> map = new HashMap<>();
        map.put(MessageHeaders.CONTENT_TYPE, MimeTypeUtils.TEXT_PLAIN_VALUE);
        MessageHeaders headers = new MessageHeaders(map);
        output.send(new GenericMessage<>(message, headers));
    }

    @GetMapping("/register")
    public ResponseBodyEmitter register(Principal principal) {
        log.debug("Registering sse client for {}", principal.getName());
        SseEmitter emitter = new SseEmitter();
        emitter.onCompletion(() -> emitters.remove(emitter));
        emitters.put(principal.getName(), emitter);
        return emitter;
    }

    @GetMapping("/unregister")
    public void unregister(Principal principal) {
        String user = principal.getName();
        log.debug("Unregistering sse emitter for user: {}", user);
        Optional.ofNullable(emitters.get(user))
            .ifPresent(ResponseBodyEmitter::complete);
    }

    @StreamListener(value = KafkaSseConsumer.CHANNELNAME, copyHeaders = "false")
    public void consume(Message<String> message) {
        log.debug("Got message from kafka stream: {}", message.getPayload());
        emitters.entrySet().stream().map(Map.Entry::getValue)
            .forEach((SseEmitter emitter) -> {
                try {
                    emitter.send(event().data(message.getPayload(), MediaType.TEXT_PLAIN));
                } catch (IOException e) {
                log.debug("error sending sse message, {}", message.getPayload());
            }
        });
    }


}


<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= entityAbsolutePackage %>.repository;

import <%= entityAbsolutePackage %>.domain.<%= persistClass %>;

<%_ if (relationships.length !== 0) { _%>
import org.springframework.data.couchbase.repository.Query;
import org.springframework.data.domain.Pageable;
  <%_ if (reactive) { _%>
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
  <%_ } else { _%>
import org.springframework.data.domain.Page;
import java.util.List;
  <%_ } _%>
<%_ } _%>
<%_ if (relationships.length !== 0 && !reactive) { _%>
import java.util.Optional;
<%_ } _%>
import org.springframework.stereotype.Repository;
<%_ if (primaryKey.typeUUID) { _%>
import java.util.UUID;
<%_ } _%>

import static <%= packageName %>.domain.<%= entityClass %>.TYPE_NAME;

/**
 * Spring Data Couchbase repository for the <%= persistClass %> entity.
 */
<%_ if (!relationshipsContainEagerLoad) { _%>
@SuppressWarnings("unused")
<%_ } _%>
<%_
    let optionalOrMono = reactive ? 'Mono' : 'Optional';
    let listOrFlux = reactive ? 'Flux' : 'List';
    let pageOrFlux = reactive ? 'Flux' : 'Page';
_%>
@Repository
public interface <%= entityClass %>Repository extends JHipsterCouchbaseRepository<<%= persistClass %>, <%= primaryKey.type %>><% if (jpaMetamodelFiltering) { %>, JpaSpecificationExecutor<<%= persistClass %>><% } %><% if (searchEngine) { %>, CouchbaseSearchRepository<<%= persistClass %>, <%= primaryKey.type %>><% } %> {
  <%_
  var notEmbeddedRelationships = relationships.filter(relationship => !relationship.otherEntityIsEmbedded)
  if (notEmbeddedRelationships.length !== 0) { %>
    String SELECT = "SELECT meta(b).id as __id, meta(b).cas as __cas, b.*" + <%
      for (const relationship of notEmbeddedRelationships) {
          if (relationship.collection) {
            %> ", (SELECT `<%= relationship.relationshipFieldName %>`.*, meta(`<%= relationship.relationshipFieldName %>`).id FROM `<%= relationship.relationshipFieldNamePlural %>` `<%= relationship.relationshipFieldName %>`) as `<%= relationship.relationshipFieldNamePlural %>`"  + <%
          } else {
            %> ", (SELECT `<%= relationship.relationshipFieldName %>`.*, meta(`<%= relationship.relationshipFieldName %>`).id)[0] as `<%= relationship.relationshipFieldName %>`" + <%
          }
      } %>
        " FROM #{#n1ql.bucket} b";

    String JOIN = <%
        notEmbeddedRelationships.forEach(function (relationship, index) {
          if (!relationship.collection) { %>
            " LEFT JOIN `<%= relationship.otherEntity.entityInstance %>` `<%= relationship.relationshipFieldName %>` ON KEYS b.`<%= relationship.relationshipFieldName %>`"<%
          } else { %>
            " LEFT NEST `<%= relationship.otherEntity.entityInstance %>` `<%= relationship.relationshipFieldNamePlural %>` ON KEYS b.`<%= relationship.relationshipFieldNamePlural %>`"<%
          }
          if (index < notEmbeddedRelationships.length - 1) { %>
            + <%
          }
        }); %>;

    String WHERE = " WHERE b.type = '" + TYPE_NAME + "'";

    @Query(SELECT + JOIN + WHERE)
    <%= pageOrFlux %><<%= persistClass %>> findAll(Pageable pageable);

    @Query(SELECT + JOIN + WHERE)
    <%= listOrFlux %><<%= persistClass %>> findAll();

    @Query(SELECT + " USE KEYS $1" + JOIN)
    <%= optionalOrMono %><<%= persistClass %>> findById(String id);<%
    } _%>

<%_ if (searchEngine && notEmbeddedRelationships.length !== 0) { _%>
    @Query(SELECT + JOIN + WHERE + " AND " + SEARCH_CONDITION)
    <%= listOrFlux %><<%= persistClass %>> search(String queryString);

    @Query(SELECT + JOIN + WHERE + " AND " + SEARCH_CONDITION)
    <%= pageOrFlux %><<%= persistClass %>> search(String queryString, Pageable pageable);
<%_ } _%>

}

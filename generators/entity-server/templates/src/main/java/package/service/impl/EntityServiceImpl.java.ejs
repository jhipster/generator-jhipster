<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= entityAbsolutePackage %>.service<% if (serviceImpl) { %>.impl<% } %>;

<%_
const serviceClassName = serviceImpl ? entityClass + 'ServiceImpl' : entityClass + 'Service';
const instanceType = restClass;
const instanceName = restInstance;
const optionalOrMono = (reactive) ? 'Mono' : 'Optional';
const listOrFlux = (reactive) ? 'Flux' : 'List';
const pageOrFlux = (reactive) ? 'Flux' : 'Page';
const mapper = entityInstance  + 'Mapper';
const dtoToEntity = mapper + '.'+ 'toEntity';
const entityToDto = 'toDto';
const entityToDtoReference = mapper + '::'+ 'toDto';
const repository = entityInstance  + 'Repository';
const searchRepository = entityInstance  + 'SearchRepository';

_%>
<%_ if (serviceImpl) { _%>
import <%= entityAbsolutePackage %>.service.<%= entityClass %>Service;
<%_ } _%>
import <%= entityAbsolutePackage %>.domain.<%= persistClass %>;
import <%= entityAbsolutePackage %>.repository.<%= entityClass %>Repository;
<%_ if (isUsingMapsId === true) { _%>
import <%= entityAbsolutePackage %>.repository.<%= mapsIdAssoc.otherEntityNameCapitalized %>Repository;
<%_ } _%>
<%_ if (searchEngineElasticsearch) { _%>
import <%= entityAbsolutePackage %>.repository.search.<%= entityClass %>SearchRepository;
<%_ } _%>
<%_ if (dtoMapstruct) { _%>
import <%= entityAbsolutePackage %>.service.dto.<%= dtoClass %>;
import <%= entityAbsolutePackage %>.service.mapper.<%= entityClass %>Mapper;
<%_ } _%>
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

<%_ if (!paginationNo || implementsEagerLoadApis) { _%>
  <%_ if (!reactive) { _%>
import org.springframework.data.domain.Page;
  <%_ } _%>
import org.springframework.data.domain.Pageable;
<%_ } _%>
import org.springframework.stereotype.Service;
<%_ if (databaseTypeSql) { _%>
import org.springframework.transaction.annotation.Transactional;
<%_ } _%>
<%_ if (reactive) { _%>
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
<%_ } _%>

<%_ if (dtoMapstruct && (paginationNo || fieldsContainNoOwnerOneToOne)) { _%>
import java.util.LinkedList;
<%_ } _%>
<%_ if (paginationNo || fieldsContainNoOwnerOneToOne) { _%>
import java.util.List;
<%_ } _%>
<%_ if (!reactive) { _%>
import java.util.Optional;
<%_ } _%>
<%_ if (primaryKey.typeUUID) { _%>
import java.util.UUID;
<%_ } _%>
<%_ if (fieldsContainNoOwnerOneToOne || (paginationNo && ((searchEngine) || dtoMapstruct))) { _%>
import java.util.stream.Collectors;
<%_ } _%>
<%_ if (fieldsContainNoOwnerOneToOne || (paginationNo && searchEngineElasticsearch)) { _%>
import java.util.stream.StreamSupport;
<%_ } _%>
<%_ if (searchEngineElasticsearch) { _%>

import static org.elasticsearch.index.query.QueryBuilders.*;
<%_ } _%>

/**
 * Service Implementation for managing {@link <%= persistClass %>}.
 */
@Service<% if (databaseTypeSql) { %>
@Transactional<% } %>
public class <%= serviceClassName %><% if (serviceImpl) { %> implements <%= entityClass %>Service<% } %> {

    private final Logger log = LoggerFactory.getLogger(<%= serviceClassName %>.class);
<%- include('../../common/inject_template', {asEntity, asDto, viaService: false, constructorName: serviceClassName, queryService: false, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: false}); -%>

<%_ if (!serviceImpl) { _%>
    /**
     * Save a <%= entityInstance %>.
     *
     * @param <%= instanceName %> the entity to save.
     * @return the persisted entity.
     */
<%_ } _%>
<%_ if (serviceImpl) { _%>
    @Override
<%_ } _%>
    public <% if (reactive) { %>Mono<<% } %><%= instanceType %><% if (reactive) { %>><% } %> save(<%= instanceType %> <%= instanceName %>) {
        log.debug("Request to save <%= entityClass %> : {}", <%= instanceName %>);
<%- include('/partials/save_template', {asEntity, asDto, viaService: false, returnDirectly: true, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: false, isPersisted: false}); -%>
    }

<%_ if (!serviceImpl) { _%>
    /**
     * Update a <%= entityInstance %>.
     *
     * @param <%= instanceName %> the entity to save.
     * @return the persisted entity.
    */
<%_ } _%>
<%_ if (serviceImpl) { _%>
    @Override
<%_ } _%>
    public <% if (reactive) { %>Mono<<% } %><%= instanceType %><% if (reactive) { %>><% } %> update(<%= instanceType %> <%= instanceName %>) {
        log.debug("Request to save <%= entityClass %> : {}", <%= instanceName %>);
<%- include('/partials/update_template', {updatableEntity, viaService: false, returnDirectly: true, isUsingMapsId: isUsingMapsId, mapsIdAssoc: mapsIdAssoc, isController: false, isPersisted: requiresPersistableImplementation}); -%>
    }

<%_ if (!serviceImpl) { _%>
    /**
     * Partially update a <%= entityInstance %>.
     *
     * @param <%= instanceName %> the entity to update partially.
     * @return the persisted entity.
     */
<%_ } _%>
<%_ if (serviceImpl) { _%>
    @Override
<%_ } _%>
    public <% if (reactive) { %>Mono<% } else { %>Optional<% } %><<%= instanceType %>> partialUpdate(<%= instanceType %> <%= instanceName %>) {
        log.debug("Request to partially update <%= entityClass %> : {}", <%= instanceName %>);
<%- include('../../common/patch_template', {asEntity, asDto, isService: true, viaService: false}); -%>
    }

<%_ if (!serviceImpl) { _%>
    /**
     * Get all the <%= entityInstancePlural %>.
     *
  <%_ if (!paginationNo) { _%>
     * @param pageable the pagination information.
  <%_ } _%>
     * @return the list of entities.
     */
<%_ } _%>
<%_ if (serviceImpl) { _%>
    @Override
<%_ } _%>
<%_ if (databaseTypeSql) { _%>
    @Transactional(readOnly = true)
<%_ } _%>
    public <% if (paginationNo) { %><%= listOrFlux %><% } else { %><%= pageOrFlux %><% } %><<%= instanceType %>> findAll(<% if (!paginationNo) { %>Pageable pageable<% } %>) {
        log.debug("Request to get all <%= entityClassPlural %>");
<%_ if (paginationNo) { _%>
        return <%= entityInstance %>Repository.<% if (implementsEagerLoadApis) { %>findAllWithEagerRelationships<% } else { %>findAll<% } %>()<% if (dtoMapstruct) { %><% if (!reactive) { %>.stream()<% } %>
            .map(<%= entityToDtoReference %>)<% if (!reactive) { %>
            .collect(Collectors.toCollection(LinkedList::new))<% } } %>;
<%_ } else { _%>
        return <%= entityInstance %>Repository.findAll<% if (reactive) { %>By<% } %>(pageable)<% if (dto !== 'mapstruct') { %>;<% } else { %>
            .map(<%= entityToDtoReference %>);<% } %>
<%_ } _%>
    }

<%_ if (implementsEagerLoadApis) { _%>

  <%_ if (!serviceImpl) { _%>
    /**
     * Get all the <%= entityInstancePlural %> with eager load of many-to-many relationships.
     *
     * @return the list of entities.
     */
  <%_ } _%>
    public <%= pageOrFlux %><<%= instanceType %>> findAllWithEagerRelationships(Pageable pageable) {
        return <%= entityInstance %>Repository.findAllWithEagerRelationships(pageable)<% if (!dtoMapstruct) { %>;<% } else { %>.map(<%= entityToDtoReference %>);<% } %>
    }
<%_ } _%>
<%- include('../../common/get_filtered_template', {asEntity, asDto}); -%>
<%_ if (reactive) { _%>
  <%_ if (!serviceImpl) { _%>
    /**
     * Returns the number of <%= entityInstancePlural %> available.
     * @return the number of entities in the database.
     *
     */
  <%_ } _%>
    public Mono<Long> countAll() {
        return <%= entityInstance %>Repository.count();
    }
  <%_ if (searchEngineElasticsearch) { _%>

    <%_ if (!serviceImpl) { _%>
    /**
     * Returns the number of <%= entityInstancePlural %> available in search repository.
     *
     */
    <%_ } _%>
    public Mono<Long> searchCount() {
        return <%= entityInstance %>SearchRepository.count();
    }
  <%_ } _%>

<%_ } _%>
<%_ if (!serviceImpl) { _%>
    /**
     * Get one <%= entityInstance %> by id.
     *
     * @param id the id of the entity.
     * @return the entity.
     */
<%_ } _%>
<%_ if (serviceImpl) { _%>
    @Override
<%_ } _%>
<%_ if (databaseTypeSql) { _%>
    @Transactional(readOnly = true)
    <%_ } _%>
    public <%= optionalOrMono %><<%= instanceType %>> findOne(<%= primaryKey.type %> id) {
        log.debug("Request to get <%= entityClass %> : {}", id);<%- include('../../common/get_template', {asEntity, asDto, viaService: false, returnDirectly:true, implementsEagerLoadApis}); -%>
    }

<%_ if (!serviceImpl) { _%>
    /**
     * Delete the <%= entityInstance %> by id.
     *
     * @param id the id of the entity.
  <%_ if (reactive) { _%>
     * @return a Mono to signal the deletion
  <%_ } _%>
     */
<%_ } _%>
<%_ if (serviceImpl) { _%>
    @Override
<%_ } _%>
    public <%- reactive ? 'Mono<Void>' : 'void' %> delete(<%= primaryKey.type %> id) {
        log.debug("Request to delete <%= entityClass %> : {}", id);
<%- include('../../common/delete_template', {viaService: false, fromResource: false}); -%>
    }
<%_ if (searchEngine) { _%>

  <%_ if (!serviceImpl) { _%>
    /**
     * Search for the <%= entityInstance %> corresponding to the query.
     *
     * @param query the query of the search.
    <%_ if (!paginationNo) { _%>
     * @param pageable the pagination information.
    <%_ } _%>
     * @return the list of entities.
     */
  <%_ } _%>
  <%_ if (serviceImpl) { _%>
    @Override
  <%_ } _%>
  <%_ if (databaseTypeSql) { _%>
    @Transactional(readOnly = true)
  <%_ } _%>
    public <% if (!paginationNo) { %><%= pageOrFlux %><<%= instanceType %><% } else { %><%= listOrFlux %><<%= instanceType %><% } %>> search(String query<% if (!paginationNo) { %>, Pageable pageable<% } %>) {
  <%_ if (paginationNo) { _%>
        log.debug("Request to search <%= entityClassPlural %> for query {}", query);<%- include('../../common/search_stream_template', {viaService: false, fromResource: false}); -%>
  <%_ } else { _%>
        log.debug("Request to search for a page of <%= entityClassPlural %> for query {}", query);
        return <%= entityInstance %><% if (searchEngineElasticsearch) { %>Search<% } %>Repository.search(query, pageable)<%_ if (!dtoMapstruct) { _%>;<% } else { %>
            .map(<%= entityToDtoReference %>);
  <%_ } } _%>
    }
<%_ } _%>
}

<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.service.mapper;

<%_
let existingMappings = [];
let uuidMapMethod = dtoReferences.some(reference => reference.valueReference && reference.valueReference.field && reference.valueReference.field.fieldType === 'UUID');
let byteMapMethod = dtoReferences.some(reference => reference.valueReference && reference.valueReference.field && reference.valueReference.field.fieldType === 'byte[]');
for (reference of dtoReferences) {
  // if the entity is mapped twice, we should implement the mapping once
  if (reference.relationship && !reference.relationship.otherEntity.embedded && !existingMappings.includes(reference.name) && asEntity(reference.relationship.otherEntityNameCapitalized) !== asEntity(entityClass)) {
    existingMappings.push(reference.relationship.otherEntity.entityNameCapitalized);
  }
 }
_%>

<%_ if (dtoReferences.some(r => r.relationship &&
        r.relationship.otherRelationship &&
        r.relationship.otherRelationship.reference.collection &&
        r.relationship.relationshipType === 'many-to-many'
    ) || otherDtoReferences.some(r => r.collection)) { _%>
import java.util.Set;
<%_ } _%>

import <%= packageName %>.domain.*;
import <%= packageName %>.service.dto.<%= asDto(entityClass) %>;

import org.mapstruct.*;
<%_ if (uuidMapMethod) { _%>

import java.util.Objects;
import java.util.UUID;
<%_ } _%>

/**
 * Mapper for the entity {@link <%= asEntity(entityClass) %>} and its DTO {@link <%= asDto(entityClass) %>}.
 */
@Mapper(componentModel = "spring", uses = {<%= [...new Set(existingMappings.map(otherEntityNameCapitalized => otherEntityNameCapitalized + 'Mapper.class'))].join(', ') %>})
public interface <%= entityClass %>Mapper extends EntityMapper<<%= asDto(entityClass) %>, <%= asEntity(entityClass) %>> {
<%_ /***** Basic dto mapping *****/
    if (!embedded) {
        var renMapAnotEnt = false; //Render Mapping Annotation during Entity to DTO conversion?
        for (reference of dtoReferences.filter(reference => reference.relationship && !reference.relationship.otherEntity.embedded)) {
            renMapAnotEnt = true;
            let qualifiedByName;
            if (reference.relatedReference) {
                qualifiedByName = reference.relatedReference.name;
            } else {
                qualifiedByName = 'id';
            }
            qualifiedByName = qualifiedByName + (reference.collection ? 'Set' : ''); _%>
    @Mapping(target = "<%= reference.name %>", source = "<%= reference.name %>", qualifiedByName="<%= qualifiedByName %>")
    <%_ } _%>
    <%_ for (reference of dtoReferences.filter(reference => reference.field && reference.field.mapstructExpression)) {
            renMapAnotEnt = true; _%>
    @Mapping( target = "<%= reference.name %>", expression = "<%- reference.field.mapstructExpression %>")
    <%_ } _%>
    <%_ if (renMapAnotEnt === true) { _%>
    <%= asDto(entityClass) %> toDto(<%= asEntity(entityClass) %> s);
    <%_ } %>
<%_ } %>
<%_ /***** Id mapping *****/
    const otherIdReferences = otherDtoReferences.filter(r => !r.relatedReference || r.relatedReference.id);
    if (!embedded && otherIdReferences.length > 0) {
        if (otherIdReferences.some(r => !r.collection)) { _%>

    @Named("<%= primaryKey.name %>")
    @BeanMapping(ignoreByDefault = true)
        <%_ let renMapAnotEnt = false; //Render Mapping Annotation during Entity to DTO conversion?
            for (reference of dtoReferences.filter(reference => reference.id)) {
                renMapAnotEnt = true; _%>
    @Mapping(target = "<%= reference.name %>", source = "<%= reference.name %>")
        <%_ } _%>
        <%_ if (renMapAnotEnt === true) { _%>
    <%= asDto(entityClass) %> toDtoId(<%= asEntity(entityClass) %> <%= asEntity(entityInstance) %>);
        <%_ } _%>
    <%_ } _%>
    <%_ if (otherIdReferences.some(r => r.collection)) { _%>

    @Named("<%= primaryKey.name %>Set")
    @BeanMapping(ignoreByDefault = true)
        <%_ let renMapAnotEnt = false; //Render Mapping Annotation during Entity to DTO conversion?
            for (reference of dtoReferences.filter(reference => reference.id)) {
                renMapAnotEnt = true; _%>
    @Mapping(target = "<%= reference.name %>", source = "<%= reference.name %>")
        <%_ } _%>
        <%_ if (renMapAnotEnt === true) { _%>
    Set<<%= asDto(entityClass) %>> toDtoIdSet(Set<<%= asEntity(entityClass) %>> <%= asEntity(entityInstance) %>);
        <%_ } _%>
    <%_ } _%>
<%_ } _%>
<%_ if (!embedded) {
        // DTO -> entity mapping
        var renMapAnotDto = false;  //Render Mapping Annotation during DTO to Entity conversion?
        if(primaryKey.ownFields.length > 1) {
            renMapAnotDto = true;
            primaryKey.ownFields.map(field => field.reference).forEach(reference => { _%>

    @Mapping(target = "id.<%= reference.name %>", source = "<%= buildReferencePath(reference) %>")
        <%_ })
        }
        for (reference of dtoReferences.filter(reference => reference.relationship)) {
            if (reference.owned === false) {
                renMapAnotDto = true; _%>
    @Mapping(target = "<%= reference.name %>", ignore = true)
        <%_ }
            if (reference.collection && fluentMethods) {
                renMapAnotDto = true; _%>
    @Mapping(target = "remove<%= reference.relationship.relationshipNameCapitalized %>", ignore = true)
        <%_ } _%>
    <%_ } _%>
    <%_ if (renMapAnotDto === true) { _%>
    <%= asEntity(entityClass) %> toEntity(<%= asDto(entityClass) %> <%= asDto(entityInstance) %>);
    <%_ } _%>
    <%_ /***** Add filtered backreference *****/
        const addedMappers = [];
        for (const otherReference of otherDtoReferences.filter(r => r.relatedReference && !r.relatedReference.id)) {
            const reference = otherReference.relationship.otherRelationship && otherReference.relationship.otherRelationship.reference;
            const collection = otherReference.collection;
            const mapperName = otherReference.relationship.otherEntityField + (collection ? 'Set' : '');
            if (addedMappers.includes(mapperName)) continue;
            addedMappers.push(mapperName);
            const backReferenceDtoClass = collection ? `Set<${asDto(entityClass)}>` : asDto(entityClass);
            const backReferenceEntityClass = collection ? `Set<${asEntity(entityClass)}>` : asEntity(entityClass); _%>

    @Named("<%= mapperName %>")
    @BeanMapping(ignoreByDefault = true)
        <%_ dtoReferences.filter(r => r.id && r != reference).forEach(r => { _%>
    @Mapping(target = "<%= r.name %>", source = "<%= r.name %>")
        <%_ }); _%>
        <%_ if (otherReference.relationship.relatedField && !otherReference.relationship.relatedField.id) { _%>
    @Mapping(target = "<%= otherReference.relationship.relatedField.reference.name %>", source = "<%= otherReference.relationship.relatedField.reference.name %>")
        <%_ } _%>
    <%- backReferenceDtoClass %> toDto<%= _.upperFirst(mapperName) %>(<%- backReferenceEntityClass %> <%= asEntity(entityInstance) %>);
    <%_ }; _%>

    <%_ if (uuidMapMethod) { _%>

    default String map(UUID value) {
        return Objects.toString(value, null);
    }
    <%_ } _%>
    <%_ if (byteMapMethod) { _%>

    default String map(byte[] value) {
        return new String(value);
    }
    <%_ } _%>
<%_ } _%>
}

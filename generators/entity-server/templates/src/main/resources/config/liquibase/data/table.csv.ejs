<%#
 Copyright 2013-2019 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
let table = [];

// Generate CSV header
let header = [];
header.push('id');
for (idx in fields) {
    header.push(fields[idx].fieldNameAsDatabaseColumn);
    if (fields[idx].fieldType === 'byte[]' && fields[idx].fieldTypeBlobContent !== 'text') {
        header.push(fields[idx].fieldNameAsDatabaseColumn + '_content_type');
    }
}
for (idx in relationships) {
    if (relationships[idx].relationshipValidate === true && relationships[idx].relationshipRequired) {
        header.push(getColumnName(relationships[idx].relationshipName) + '_id');
    }
}
table.push(header);

// Set number of rows to be generated
let numberOfRows = 10;
for (idx in relationships) {
    if ( relationships[idx].useJPADerivedIdentifier === true ) {
        const otherEntityNameCapitalized = relationships[idx].otherEntityNameCapitalized;
        if (otherEntityNameCapitalized === 'User') {
            // there are only 4 user records by default
            numberOfRows = 4;
        }
        break;
    }
}
// Generate CSV rows

for (lineNb = 1; lineNb <= numberOfRows; lineNb++) {
    let line = [ lineNb ];
    for (idx in fields) {
        let data = '';
        let columnType = fields[idx].columnType;
        let fieldType = fields[idx].fieldType;
        if (columnType === 'integer'
            || columnType === 'bigint'
            || columnType === 'double'
            || columnType.startsWith('decimal')) {
            data = this.faker.random.number();
        } else if (columnType === '${floatType}') {
            data = this.faker.random.number();
        } else if (columnType === 'boolean') {
            data = this.faker.random.boolean();
        } else if (columnType === 'date' || columnType === 'datetime') {
            // Write the date without milliseconds so Java can parse it
            // See https://stackoverflow.com/a/34053802/150868
            data = this.faker.date.recent().toISOString().split('.')[0];
        } else if (columnType.startsWith('varchar')) {
            let columnName = fields[idx].fieldNameAsDatabaseColumn;
            if (columnName === 'first_name') {
                data = this.faker.name.firstName();
            } else if (columnName === 'last_name') {
                data = this.faker.name.lastName();
            } else if (columnName === 'job_title') {
                data = this.faker.name.jobTitle();
            } else if (columnName === 'telephone' || columnName === 'phone') {
                data = this.faker.phone.phoneNumber();
            } else if (columnName === 'zip_code' || columnName === 'post_code') {
                data = this.faker.address.zipCode();
            } else if (columnName === 'city') {
                data = this.faker.address.city();
            } else if (columnName === 'street_name' || columnName === 'street') {
                data = this.faker.address.streetName();
            } else if (columnName === 'country') {
                data = this.faker.address.country();
            } else if (columnName === 'country_code') {
                data = this.faker.address.countryCode();
            } else if (columnName === 'color') {
                data = this.faker.commerce.color();
            } else if (columnName === 'account') {
                data = this.faker.commerce.account();
            } else if (columnName === 'account_name') {
                data = this.faker.finance.accountName();
            } else if (columnName === 'currency_code') {
                data = this.faker.finance.currencyCode();
            } else if (columnName === 'currency_name') {
                data = this.faker.finance.currencyName();
            } else if (columnName === 'currency_symbol') {
                data = this.faker.finance.currencySymbol();
            } else if (columnName === 'iban') {
                data = this.faker.finance.iban();
            } else if (columnName === 'bic') {
                data = this.faker.finance.bic();
            } else if (columnName === 'email') {
                data = this.faker.internet.email();
            } else if (columnName === 'url') {
                data = this.faker.internet.url();
            } else {
                data = this.faker.random.words();
            }
            // manage String max length
            if (fields[idx].fieldValidate === true && fields[idx].fieldValidateRules.includes('maxlength')) {
                let maxlength = fields[idx].fieldValidateRulesMaxlength;
                data = data.substring(0, maxlength);
            }
        }
        if (fields[idx].fieldIsEnum) {
            if (fields[idx].fieldValues.length !== 0) {
                const enums = fields[idx].fieldValues.split(',');
                data = enums[0];
            } else {
                data = '';
            }
        }
        if (fieldType === 'byte[]') {
            data = Buffer.from(this.faker.random.words(), 'utf8').toString('hex');
        }
        line.push(data);
        if (fieldType === 'byte[]' && fields[idx].fieldTypeBlobContent !== 'text') {
            line.push('image/png');
        }
    }
    for (idx in relationships) {
        if (relationships[idx].relationshipValidate === true && relationships[idx].relationshipRequired) {
            if (relationships[idx].otherEntityNameCapitalized === 'User') {
                line.push(this.faker.random.number({min: 1, max: 2}));
            } else {
                line.push(this.faker.random.number({min: 1, max: 10}));
            }
        }
    }
    table.push(line);
}

let result = table
        .map(line =>
            line.map(data => {
                    return data;
                })
                .join(';')
        )
        .join('\n');
 _%>
<%-result%>

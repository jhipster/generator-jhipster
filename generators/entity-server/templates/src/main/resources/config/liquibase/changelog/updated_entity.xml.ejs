<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <!--
        Updated the entity <%= entityClass %>.
    -->
    <changeSet id="<%= newChangelogDate %>-1" author="jhipster">
        <%_ if (newFields && newFields.length > 0) { _%>
        <%_ if (typeof javadoc == 'undefined') { _%>
        <addColumn tableName="<%= entityTableName %>">
        <%_ } else { _%>
        <addColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
        <%_ } _%>
            <%_ for (idx in newFields) {
                let nullable = true;
                if (newFields[idx].fieldValidate === true && newFields[idx].fieldValidateRules.includes('required')) {
                    nullable = false;
                }
                let unique = false;
                if (newFields[idx].fieldValidate === true && newFields[idx].fieldValidateRules.includes('unique')) {
                    unique = true;
                }
                let maxlength = 255;
                if (newFields[idx].fieldValidate === true && newFields[idx].fieldValidateRules.includes('maxlength')) {
                    maxlength = newFields[idx].fieldValidateRulesMaxlength;
                }
                const fieldType = newFields[idx].fieldType;
                const fieldTypeBlobContent = newFields[idx].fieldTypeBlobContent;
                const columnName = newFields[idx].fieldNameAsDatabaseColumn;
                let columnType;
                if (fieldType === 'String' || newFields[idx].fieldIsEnum) {
                    columnType="varchar(" + maxlength + ")";
                } else if (fieldType === 'Integer') {
                    columnType="integer";
                } else if (fieldType === 'Long') {
                    columnType="bigint";
                } else if (fieldType === 'Float') {
                    columnType="${floatType}";
                } else if (fieldType === 'Double') {
                    columnType="double";
                } else if (fieldType === 'BigDecimal') {
                    columnType="decimal(21,2)";
                } else if (fieldType === 'LocalDate') {
                    columnType="date";
                } else if (fieldType === 'Instant') {
                    columnType="datetime";
                } else if (fieldType === 'ZonedDateTime') {
                    columnType="datetime";
                } else if (fieldType === 'Duration') {
                    columnType="bigint";
                } else if (fieldType === 'UUID') {
                    columnType="${uuidType}";
                } else if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') {
                    if (prodDatabaseType === 'mysql' || prodDatabaseType === 'postgresql' || prodDatabaseType === 'mariadb') {
                        columnType="longblob";
                    } else {
                        columnType="blob";
                    }
                } else if (fieldTypeBlobContent === 'text') {
                    columnType="${clobType}";
                } else if (fieldType === 'Boolean') {
                    columnType="boolean";
                }
                _%>
                <%_ if (typeof newFields[idx].javadoc == 'undefined') { _%>
            <column name="<%= columnName %>" type="<%= columnType %>">
                <%_ } else { _%>
            <column name="<%= columnName %>" type="<%= columnType %>" remarks="<%- formatAsLiquibaseRemarks(newFields[idx].javadoc) %>">
                <%_ } _%>
                <%_ if (unique) {
                    const uniqueConstraintName = getUXConstraintName(entityTableName, columnName, prodDatabaseType);
                _%>
                <constraints nullable="<%= nullable %>" unique="true" uniqueConstraintName="<%= uniqueConstraintName %>" />
                <%_ } else { _%>
                <constraints nullable="<%= nullable %>" />
                <%_ } _%>
            </column>
                <%_ if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') {
                    let contentTypeColumnType = columnType;
                    contentTypeColumnType = "varchar(255)"; _%>
            <column name="<%= columnName %>_content_type" type="<%= contentTypeColumnType %>">
                <constraints nullable="<%= nullable %>" />
            </column>
                <%_ }
                newFields[idx].columnType = columnType;
            } _%>
            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here, do not remove-->
        </addColumn>
        <%_ } _%>
        <%_ if (newRelationships && newRelationships.length > 0) { _%>

        <%_ for (idx in newRelationships) {
            let nullable_relation = true,
                    relationshipType = newRelationships[idx].relationshipType,
                    relationshipName = newRelationships[idx].relationshipName,
                    relationshipColumnType = newRelationships[idx].otherEntityName === 'user' && authenticationType === 'oauth2' ? 'varchar(100)' : 'bigint';
            if (newRelationships[idx].relationshipValidate === true && newRelationships[idx].relationshipRequired) {
                nullable_relation = false;
            }
            if (newRelationships[idx].relationshipType === 'many-to-one') { _%>
            <%_ if (typeof javadoc == 'undefined') { _%>
        <addColumn tableName="<%= entityTableName %>">
            <%_ } else { _%>
        <addColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
            <%_ } _%>
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints nullable="<%= nullable_relation %>" />
            </column>
        </addColumn>
            <%_ } else if (relationshipType === 'one-to-one' && newRelationships[idx].ownerSide === true
                && (newRelationships[idx].useJPADerivedIdentifier == null || newRelationships[idx].useJPADerivedIdentifier === false)) {
                const uniqueConstraintName = getUXConstraintName(entityTableName, getColumnName(relationshipName) + '_id', prodDatabaseType);
            _%>
            <%_ if (typeof javadoc == 'undefined') { _%>
        <addColumn tableName="<%= entityTableName %>">
            <%_ } else { _%>
        <addColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
            <%_ } _%>
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints unique="true" nullable="<%= nullable_relation %>" uniqueConstraintName="<%= uniqueConstraintName %>" />
            </column>
        </addColumn>
            <%_ }
        } _%>

        <%_ } _%>
        <%_ for (const idx in newFields) {
            if (newFields[idx].fieldType === 'ZonedDateTime' || newFields[idx].fieldType === 'Instant') { _%>
        <dropDefaultValue tableName="<%= entityTableName %>" columnName="<%= newFields[idx].fieldNameAsDatabaseColumn %>" columnDataType="datetime"/>
        <%_ }
        } _%>
    </changeSet>

    <%_ if (newRelationships && newRelationships.length > 0) { _%>
    <changeSet id="<%= newChangelogDate %>-1-relations" author="jhipster">
        <%_ for (idx in newRelationships) {
            const relationshipType = newRelationships[idx].relationshipType,
            relationshipName = newRelationships[idx].relationshipName,
            ownerSide = newRelationships[idx].ownerSide,
            otherEntityName = newRelationships[idx].otherEntityName;
            const relationshipColumnType = otherEntityName === 'user' && authenticationType === 'oauth2' ? 'varchar(100)' : 'bigint';
            if (relationshipType === 'many-to-many' && ownerSide) {
                const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
          _%>

        <addColumn tableName="<%= joinTableName %>">
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints nullable="false"/>
            </column>
            <column name="<%= getColumnName(name) %>_id" type="bigint">
                <constraints nullable="false"/>
            </column>
        </addColumn>

        <addPrimaryKey columnNames="<%= getColumnName(name) %>_id, <%= getColumnName(relationshipName) %>_id" tableName="<%= joinTableName %>"/>
        <% } %><% } %>
    </changeSet>
    <%_ } _%>
    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here, do not remove-->

</databaseChangeLog>

<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<?xml version="1.0" encoding="utf-8"?>
<databaseChangeLog
    xmlns="http://www.liquibase.org/xml/ns/dbchangelog"
    xmlns:ext="http://www.liquibase.org/xml/ns/dbchangelog-ext"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://www.liquibase.org/xml/ns/dbchangelog http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-3.6.xsd
                        http://www.liquibase.org/xml/ns/dbchangelog-ext http://www.liquibase.org/xml/ns/dbchangelog/dbchangelog-ext.xsd">

    <!--
        Updated the entity <%= entityClass %>.
    -->
    <changeSet id="<%= newChangelogDate %>-1" author="jhipster">
        <%_ if (updateFields && updateFields.length > 0) { _%>
            <%_ if (typeof javadoc == 'undefined') { _%>
                <%_ if (updateEntity === 'add') { _%>
        <addColumn tableName="<%= entityTableName %>">
                <%_ } else if (updateEntity === 'remove') { _%>
        <dropColumn tableName="<%= entityTableName %>">
                <%_ } _%>
            <%_ } else { _%>
                <%_ if (updateEntity === 'add') { _%>
        <addColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
                <%_ } else if (updateEntity === 'remove') { _%>
        <dropColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
                <%_ } _%>
            <%_ } _%>
            <%_ for (idx in updateFields) {
                let nullable = true;
                if (updateFields[idx].fieldValidate === true && updateFields[idx].fieldValidateRules.includes('required')) {
                    nullable = false;
                }
                let unique = false;
                if (updateFields[idx].fieldValidate === true && updateFields[idx].fieldValidateRules.includes('unique')) {
                    unique = true;
                }
                let maxlength = 255;
                if (updateFields[idx].fieldValidate === true && updateFields[idx].fieldValidateRules.includes('maxlength')) {
                    maxlength = updateFields[idx].fieldValidateRulesMaxlength;
                }
                const fieldType = updateFields[idx].fieldType;
                const fieldTypeBlobContent = updateFields[idx].fieldTypeBlobContent;
                const columnName = updateFields[idx].fieldNameAsDatabaseColumn;
                let columnType;
                if (fieldType === 'String' || updateFields[idx].fieldIsEnum) {
                    columnType="varchar(" + maxlength + ")";
                } else if (fieldType === 'Integer') {
                    columnType="integer";
                } else if (fieldType === 'Long') {
                    columnType="bigint";
                } else if (fieldType === 'Float') {
                    columnType="${floatType}";
                } else if (fieldType === 'Double') {
                    columnType="double";
                } else if (fieldType === 'BigDecimal') {
                    columnType="decimal(21,2)";
                } else if (fieldType === 'LocalDate') {
                    columnType="date";
                } else if (fieldType === 'Instant') {
                    columnType="datetime";
                } else if (fieldType === 'ZonedDateTime') {
                    columnType="datetime";
                } else if (fieldType === 'Duration') {
                    columnType="bigint";
                } else if (fieldType === 'UUID') {
                    columnType="${uuidType}";
                } else if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') {
                    if (prodDatabaseType === 'mysql' || prodDatabaseType === 'postgresql' || prodDatabaseType === 'mariadb') {
                        columnType="longblob";
                    } else {
                        columnType="blob";
                    }
                } else if (fieldTypeBlobContent === 'text') {
                    columnType="${clobType}";
                } else if (fieldType === 'Boolean') {
                    columnType="boolean";
                }
                _%>
                <%_ if (typeof updateFields[idx].javadoc == 'undefined') { _%>
            <column name="<%= columnName %>" type="<%= columnType %>">
                <%_ } else { _%>
            <column name="<%= columnName %>" type="<%= columnType %>" remarks="<%- formatAsLiquibaseRemarks(updateFields[idx].javadoc) %>">
                <%_ } _%>
                <%_ if (unique) {
                    const uniqueConstraintName = getUXConstraintName(entityTableName, columnName, prodDatabaseType);
                _%>
                <constraints nullable="<%= nullable %>" unique="true" uniqueConstraintName="<%= uniqueConstraintName %>" />
                <%_ } else { _%>
                <constraints nullable="<%= nullable %>" />
                <%_ } _%>
            </column>
                <%_ if (fieldType === 'byte[]' && fieldTypeBlobContent !== 'text') {
                    let contentTypeColumnType = columnType;
                    contentTypeColumnType = "varchar(255)"; _%>
            <column name="<%= columnName %>_content_type" type="<%= contentTypeColumnType %>">
                <constraints nullable="<%= nullable %>" />
            </column>
                <%_ }
                updateFields[idx].columnType = columnType;
            } _%>
            <!-- jhipster-needle-liquibase-add-column - JHipster will add columns here, do not remove-->
            <%_ if (updateEntity === 'add') { _%>
        </addColumn>
            <%_ } else if (updateEntity === 'remove') { _%>
        </dropColumn>
            <%_ } _%>
        <%_ } _%>
        <%_ if (updateRelationships && updateRelationships.length > 0) { _%>

        <%_ for (idx in updateRelationships) {
            let nullable_relation = true,
                    relationshipType = updateRelationships[idx].relationshipType,
                    relationshipName = updateRelationships[idx].relationshipName,
                    relationshipColumnType = updateRelationships[idx].otherEntityName === 'user' && authenticationType === 'oauth2' ? 'varchar(100)' : 'bigint';
            if (updateRelationships[idx].relationshipValidate === true && updateRelationships[idx].relationshipRequired) {
                nullable_relation = false;
            }
            if (updateRelationships[idx].relationshipType === 'many-to-one') { _%>
            <%_ if (typeof javadoc == 'undefined') { _%>
                <%_ if (updateEntity === 'add') { _%>
        <addColumn tableName="<%= entityTableName %>">
                <%_ } else if (updateEntity === 'remove') { _%>
        <dropColumn tableName="<%= entityTableName %>">
                <%_ } _%>
            <%_ } else { _%>
                <%_ if (updateEntity === 'add') { _%>
        <addColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
                <%_ } else if (updateEntity === 'remove') { _%>
        <dropColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
                <%_ } _%>
            <%_ } _%>
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints nullable="<%= nullable_relation %>" />
            </column>
            <%_ if (updateEntity === 'add') { _%>
        </addColumn>
            <%_ } else if (updateEntity === 'remove') { _%>
        </dropColumn>
            <%_ } _%>
            <%_ } else if (relationshipType === 'one-to-one' && updateRelationships[idx].ownerSide === true
                && (updateRelationships[idx].useJPADerivedIdentifier == null || updateRelationships[idx].useJPADerivedIdentifier === false)) {
                const uniqueConstraintName = getUXConstraintName(entityTableName, getColumnName(relationshipName) + '_id', prodDatabaseType);
            _%>
            <%_ if (typeof javadoc == 'undefined') { _%>
                <%_ if (updateEntity === 'add') { _%>
        <addColumn tableName="<%= entityTableName %>">
                <%_ } else if (updateEntity === 'remove') { _%>
        <dropColumn tableName="<%= entityTableName %>">
                <%_ } _%>
            <%_ } else { _%>
                <%_ if (updateEntity === 'add') { _%>
        <addColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
                <%_ } else if (updateEntity === 'remove') { _%>
        <dropColumn tableName="<%= entityTableName %>" remarks="<%- formatAsLiquibaseRemarks(javadoc) %>">
                <%_ } _%>
            <%_ } _%>
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints unique="true" nullable="<%= nullable_relation %>" uniqueConstraintName="<%= uniqueConstraintName %>" />
            </column>
            <%_ if (updateEntity === 'add') { _%>
        </addColumn>
            <%_ } else if (updateEntity === 'remove') { _%>
        </dropColumn>
            <%_ } _%>
            <%_ }
        } _%>

        <%_ } _%>
        <%_ for (const idx in updateFields) {
            if (updateFields[idx].fieldType === 'ZonedDateTime' || updateFields[idx].fieldType === 'Instant') { _%>
        <dropDefaultValue tableName="<%= entityTableName %>" columnName="<%= updateFields[idx].fieldNameAsDatabaseColumn %>" columnDataType="datetime"/>
        <%_ }
        } _%>
    </changeSet>

    <%_ if (updateRelationships && updateRelationships.length > 0) { _%>
    <changeSet id="<%= newChangelogDate %>-1-relations" author="jhipster">
        <%_ for (idx in updateRelationships) {
            const relationshipType = updateRelationships[idx].relationshipType,
            relationshipName = updateRelationships[idx].relationshipName,
            ownerSide = updateRelationships[idx].ownerSide,
            otherEntityName = updateRelationships[idx].otherEntityName;
            const relationshipColumnType = otherEntityName === 'user' && authenticationType === 'oauth2' ? 'varchar(100)' : 'bigint';
            if (relationshipType === 'many-to-many' && ownerSide) {
                const joinTableName = getJoinTableName(entityTableName, relationshipName, prodDatabaseType);
          _%>

            <%_ if (updateEntity === 'add') { _%>
        <addColumn tableName="<%= joinTableName %>">
            <%_ } else if (updateEntity === 'remove') { _%>
        <dropColumn tableName="<%= joinTableName %>">
            <%_ } _%>
            <column name="<%= getColumnName(relationshipName) %>_id" type="<%= relationshipColumnType %>">
                <constraints nullable="false"/>
            </column>
            <column name="<%= getColumnName(name) %>_id" type="bigint">
                <constraints nullable="false"/>
            </column>
            <%_ if (updateEntity === 'add') { _%>
        </addColumn>
            <%_ } else if (updateEntity === 'remove') { _%>
        </dropColumn>
            <%_ } _%>

            <%_ if (updateEntity === 'add') { _%>
        <addPrimaryKey columnNames="<%= getColumnName(name) %>_id, <%= getColumnName(relationshipName) %>_id" tableName="<%= joinTableName %>"/>
            <%_ } else if (updateEntity === 'remove') { _%>
        <dropPrimaryKey columnNames="<%= getColumnName(name) %>_id, <%= getColumnName(relationshipName) %>_id" tableName="<%= joinTableName %>"/>
            <%_ } _%>
        <% } %><% } %>
    </changeSet>
    <%_ } _%>
    <!-- jhipster-needle-liquibase-add-changeset - JHipster will add changesets here, do not remove-->

</databaseChangeLog>

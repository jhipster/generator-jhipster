import { defineComponent, inject, ref, Ref } from 'vue';
import { useRoute, useRouter } from 'vue-router/composables';

<% if (anyFieldIsBlobDerived) { %>
import useDataUtils from '@/shared/data/data-utils.service';
<% } %>
import { I<%= entityAngularName %> } from '@/shared/model/<%= entityModelFileName %>.model';
import <%= entityAngularName %>Service from './<%= entityFileName %>.service';
import AlertService from '@/shared/alert/alert.service';

export default defineComponent({
  name: '<%= entityAngularName %>Details',
  setup() {
    const <%= entityInstance %>Service = inject('<%= entityInstance %>Service', () => new <%= entityAngularName %>Service());
    const alertService = inject('alertService', () => new AlertService());

<% if (anyFieldIsBlobDerived) { %>
    const dataUtils = useDataUtils();
<% } %>
    const route = useRoute();
    const router = useRouter();

    const <%= entityInstance %>: Ref<I<%= entityAngularName %>> = ref({});

    const retrieve<%= entityAngularName %> = async <%= entityInstance %>Id => {
      try {
        const res = await <%= entityInstance %>Service().find(<%= entityInstance %>Id);
        <%= entityInstance %>.value = res;
      } catch (error) {
        alertService().showHttpError(router.app, error.response);
      }
    };

    if (route.params.<%= entityInstance %>Id) {
      retrieve<%= entityAngularName %>(route.params.<%= entityInstance %>Id);
    }

    const previousState = () => {
      router.go(-1);
    };

    return {
      alertService,
      <%= entityInstance %>,
<% if (anyFieldIsBlobDerived) { %>
      ...dataUtils,
<% } %>
      previousState,
    };
  },
});

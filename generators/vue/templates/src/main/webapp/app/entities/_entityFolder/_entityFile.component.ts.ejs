import { defineComponent, inject, ref, Ref } from 'vue';
import { I<%= entityAngularName %> } from '@/shared/model/<%= entityModelFileName %>.model';
<%_ if (anyFieldIsBlobDerived || paginationInfiniteScroll) { _%>
import useDataUtils from '@/shared/data/data-utils.service';
<%_ } _%>
import <%= entityAngularName %>Service from './<%= entityFileName %>.service';
import AlertService from '@/shared/alert/alert.service';

export default defineComponent({
  name: '<%= entityAngularName %>',
  setup() {
<%_ if (anyFieldIsBlobDerived || paginationInfiniteScroll) { _%>
    const dataUtils = useDataUtils();
<%_ } _%>
    const <%= entityInstance %>Service = inject('<%= entityInstance %>Service', () => new <%= entityAngularName %>Service());
    const alertService = inject('alertService', () => new AlertService());

<%_ if (searchEngineAny) { _%>
    const currentSearch = ref('');
<%_ } _%>
    const removeId: Ref<<%- primaryKey.tsType %>> = ref(null);
<%_ if (!paginationNo) { _%>
    const itemsPerPage = ref(20);
    const queryCount: Ref<number> = ref(null);
    const page: Ref<number> = ref(1);
    const previousPage: Ref<number> = ref(1);
    const propOrder = ref('id');
    const reverse = ref(false);
    const totalItems = ref(0);
<%_ } _%>
<%_ if (paginationInfiniteScroll) { _%>
    const infiniteId = ref(+new Date());
    const links: Ref<any> = ref({});
<%_ } _%>

    const <%= entityInstancePlural %>: Ref<I<%= entityAngularName %>[]> = ref([]);

    const isFetching = ref(false);

    return {
      <%= entityInstance %>Service,
      alertService,
<%_ if (searchEngineAny) { _%>
      currentSearch,
<%_ } _%>
      removeId,
<%_ if (!paginationNo) { _%>
      itemsPerPage,
      queryCount,
      page,
      previousPage,
      propOrder,
      reverse,
      totalItems,
<%_ } _%>
<%_ if (paginationInfiniteScroll) { _%>
      infiniteId,
      links,
<%_ } _%>
      <%= entityInstancePlural %>,
      isFetching,
<%_ if (anyFieldIsBlobDerived || paginationInfiniteScroll) { _%>
      ...dataUtils,
<%_ } _%>
    };
  },
  mounted(): void {
    this.retrieveAll<%= entityAngularName %>s();
  },
  methods: {
<%_ if (searchEngineAny) { _%>
    search(query) : void {
      if (!query) {
        return this.clear();
      }
      this.currentSearch = query;
      this.retrieveAll<%= entityAngularName %>s();
    },
<%_ } _%>
    clear() : void {
<%_ if (searchEngineAny) { _%>
      this.currentSearch = '';
<%_ } _%>
<%_ if (!paginationNo) { _%>
      this.page = 1;
<%_ } _%>
<%_ if (paginationInfiniteScroll) { _%>
      this.links = {};
      this.infiniteId += 1;
      this.<%= entityInstancePlural %> = [];
<%_ } _%>
      this.retrieveAll<%= entityAngularName %>s();
    },
<%_ if (paginationInfiniteScroll) { _%>
    reset(): void {
      this.page = 1;
      this.infiniteId += 1;
      this.<%= entityInstancePlural %> = [];
      this.retrieveAll<%= entityAngularName %>s();
    },
<%_ } _%>
    retrieveAll<%= entityAngularName %>s() :void {
      this.isFetching = true;
<%_ if (!paginationNo) { _%>
      const paginationQuery = {
        page: this.page - 1,
        size: this.itemsPerPage,
        sort: this.sort()
      };
<%_ } _%>
<%_ if (searchEngineAny) { _%>
      if (this.currentSearch) {
        this.<%= entityInstance %>Service().search(this.currentSearch<%_ if (!paginationNo) { _%>, paginationQuery<%_ } _%>).then(res => {
  <%_ if (paginationNo) { _%>
          this.<%= entityInstancePlural %> = res;
  <%_ } else if (!paginationInfiniteScroll) { _%>
          this.<%= entityInstancePlural %> = res.data;
  <%_ } else if (paginationInfiniteScroll) { _%>
          if (res.data && res.data.length > 0) {
            for (let i = 0; i < res.data.length; i++) {
              this.<%= entityInstancePlural %>.push(res.data[i]);
            }
            if (res.headers && res.headers['link']) {
              this.links = this.parseLinks(res.headers['link']);
            }
          }
  <%_ } _%>
  <%_ if (!paginationNo) { _%>
          this.totalItems = Number(res.headers['x-total-count']);
          this.queryCount = this.totalItems;
  <%_ } _%>
          this.isFetching = false;
  <%_ if (paginationInfiniteScroll) { _%>
          if ((<any>this.$refs.infiniteLoading)) {
            (<any>this.$refs.infiniteLoading).stateChanger.loaded();
            if (JSON.stringify(this.links) !== JSON.stringify({}) && this.page > this.links['last']) {
              (<any>this.$refs.infiniteLoading).stateChanger.complete();
            }
          }
  <%_ } _%>
        }, err => {
          this.isFetching = false;
          this.alertService().showHttpError(this,err.response);
      });
        return;
      }
<%_ } _%>
      this.<%= entityInstance %>Service().retrieve(<%_ if (!paginationNo) { _%>paginationQuery<%_ } _%>).then(res => {
<%_ if (!paginationInfiniteScroll) { _%>
        this.<%= entityInstancePlural %> = res.data;
<%_ } else { _%>
        if (res.data && res.data.length > 0) {
          for (let i = 0; i < res.data.length; i++) {
            this.<%= entityInstancePlural %>.push(res.data[i]);
          }
          if (res.headers && res.headers['link']) {
            this.links = this.parseLinks(res.headers['link']);
          }
        }
<%_ } _%>
<%_ if (!paginationNo) { _%>
        this.totalItems = Number(res.headers['x-total-count']);
        this.queryCount = this.totalItems;
<%_ } _%>
        this.isFetching = false;
<%_ if (paginationInfiniteScroll) { _%>
        if ((<any>this.$refs.infiniteLoading)) {
          (<any>this.$refs.infiniteLoading).stateChanger.loaded();
          if (JSON.stringify(this.links) !== JSON.stringify({}) && this.page > this.links['last']) {
            (<any>this.$refs.infiniteLoading).stateChanger.complete();
          }
        }
<%_ } _%>
      }, err => {
        this.isFetching = false;
        this.alertService().showHttpError(this,err.response);
      });
    },
    handleSyncList(): void {
      this.clear();
    },
<%_ if (!readOnly) { _%>
    prepareRemove(instance: I<%= entityAngularName %>) : void {
      this.removeId = instance.id;
      if (<any>this.$refs.removeEntity) {
        (<any>this.$refs.removeEntity).show();
      }
    },
    remove<%= entityAngularName %>() : void {
      this.<%= entityInstance %>Service().delete(this.removeId).then(() => {
  <%_ if (enableTranslation) { _%>
        const message = this.$t('<%= i18nAlertHeaderPrefix %>.deleted', { 'param' : this.removeId });
  <%_ } else {_%>
        const message = 'A <%= entityAngularName %> is deleted with identifier ' + this.removeId;
  <%_ } _%>
        this.$bvToast.toast(message.toString(), {
          toaster: 'b-toaster-top-center',
          title: 'Info',
          variant: 'danger',
          solid: true,
          autoHideDelay: 5000,
        });
        this.removeId = null;
  <%_ if (paginationInfiniteScroll) { _%>
        this.reset();
  <%_ } else {_%>
        this.retrieveAll<%= entityAngularName %>s();
  <%_ } _%>
        this.closeDialog();
      }).catch(error => {
        this.alertService().showHttpError(this,error.response);
      });
    },
<%_ } _%>
<%_ if (paginationInfiniteScroll) { _%>
    loadMore($state): void {
      if (!this.isFetching) {
        this.page++;
        this.transition();
      }
    },
<%_ } _%>
<%_ if (!paginationNo) { _%>
    sort() : Array<any> {
      const result = [this.propOrder + ',' + (this.reverse ? 'desc' : 'asc')];
      if (this.propOrder !== 'id') {
        result.push('id');
      }
      return result;
    },
    loadPage(page: number) : void {
      if (page !== this.previousPage) {
        this.previousPage = page;
        this.transition();
      }
    },
    transition() : void {
      this.retrieveAll<%= entityAngularName %>s();
    },
    changeOrder(propOrder) : void {
      this.propOrder = propOrder;
      this.reverse = !this.reverse;
  <%_ if (!paginationInfiniteScroll) { _%>
      this.transition();
  <%_ } else { _%>
      this.reset();
  <%_ } _%>
    },
<%_ } _%>
    closeDialog() : void {
      (<any>this.$refs.removeEntity).hide();
    },
  },
});

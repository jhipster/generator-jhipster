import { computed, defineComponent, ref, Ref } from 'vue';
import { maxLength, minLength, required, sameAs } from 'vuelidate/lib/validators';
import axios from 'axios';
import { mapGetters } from 'vuex';

import { useStore } from '@/store';

const validations = {
  resetPassword: {
    currentPassword: {
      required,
    },
    newPassword: {
      required,
      minLength: minLength(4),
      maxLength: maxLength(254),
    },
    confirmPassword: {
      // prettier-ignore
      sameAsPassword: sameAs(vm => {
      return vm.newPassword;
      }),
    },
  },
};

export default defineComponent({
  validations,
  computed: mapGetters(['account']),
  setup(prop) {
    const username = computed(() => useStore().getters.account?.login ?? '');
    const success: Ref<string> = ref(null);
    const error: Ref<string> = ref(null);
    const doNotMatch: Ref<string> = ref(null);
    const resetPassword: Ref<any> = ref({
      currentPassword: null,
      newPassword: null,
      confirmPassword: null,
    });

    return {
      username,
      success,
      error,
      doNotMatch,
      resetPassword,
    };
  },
  methods: {
    changePassword(): void {
      if (this.resetPassword.newPassword !== this.resetPassword.confirmPassword) {
        this.error = null;
        this.success = null;
        this.doNotMatch = 'ERROR';
      } else {
        this.doNotMatch = null;
        axios
          .post('api/account/change-password', {
            currentPassword: this.resetPassword.currentPassword,
            newPassword: this.resetPassword.newPassword,
          })
          .then(() => {
            this.success = 'OK';
            this.error = null;
          })
          .catch(() => {
            this.success = null;
            this.error = 'ERROR';
          });
      }
    },
  },
});

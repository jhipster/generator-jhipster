import { email, maxLength, minLength, required } from 'vuelidate/lib/validators';
import UserManagementService from './user-management.service';
import { IUser, User } from '@/shared/model/user.model';
import AlertService from '@/shared/alert/alert.service';
import { defineComponent, inject, ref, Ref } from 'vue';
import { useRoute } from 'vue-router/composables';

const loginValidator = (value: string) => {
  if (!value) {
    return true;
  }
  return /<%- webappLoginRegExp %>/.test(value);
};

const validations: any = {
  userAccount: {
    login: {
      required,
      maxLength: maxLength(254),
      pattern: loginValidator,
    },
    firstName: {
      maxLength: maxLength(50),
    },
    lastName: {
      maxLength: maxLength(50),
    },
    email: {
      required,
      email,
      minLength: minLength(5),
      maxLength: maxLength(50),
    },
  },
};

export default defineComponent({
  name: '<%=jhiPrefixCapitalized%>UserManagementEdit',
  validations,
  setup() {
    const route = useRoute();

    const alertService = inject('alertService', () => new AlertService());
    const userManagementService = inject('userManagementService', () => new UserManagementService(), true);

    const userAccount: Ref<IUser> = ref({ ...new User(), authorities: [] });
    const isSaving: Ref<boolean> = ref(false);
    const authorities: Ref<string[]> = ref([]);
    const languages: Ref<string[]> = ref([]);

    const initAuthorities = async () => {
      const response = await userManagementService.retrieveAuthorities();
      authorities.value = response.data;
    };

    const loadUser = async (userId: <%- user.primaryKey.tsType _%>) => {
      const response = await userManagementService.get(userId);
      userAccount.value = response.data;
    };

    initAuthorities();
    const userId = route.params.userId;
    if (userId) {
<%_ if (user.primaryKey.tsType === 'number') { _%>
      loadUser(Number(userId));
<%_ } else { _%>
      loadUser(userId);
<%_ } _%>
    }

    return {
      alertService,
      userAccount,
      isSaving,
      authorities,
      languages,
      userManagementService,
    };
  },
  methods: {
    previousState(): void {
      this.$router.go(-1);
    },
    save(): void {
      this.isSaving = true;
      if (this.userAccount.id) {
        this.userManagementService
          .update(this.userAccount)
          .then(res => {
            this.returnToList();
            (this.$root as any).$bvToast.toast(this.getMessageFromHeader(res).toString(), {
              toaster: 'b-toaster-top-center',
              title: 'Info',
              variant: 'info',
              solid: true,
              autoHideDelay: 5000,
            });
          })
          .catch(error => {
            this.isSaving = true;
            this.alertService().showHttpError(this, error.response);
          });
      } else {
<%_ if (!enableTranslation) { _%>
        this.userAccount.langKey = this.userAccount.langKey ?? '<%= nativeLanguage %>';
<%_ } _%>
        this.userManagementService
          .create(this.userAccount)
          .then(res => {
            this.returnToList();
            this.$root.$bvToast.toast(this.getMessageFromHeader(res).toString(), {
              toaster: 'b-toaster-top-center',
              title: 'Success',
              variant: 'success',
              solid: true,
              autoHideDelay: 5000,
            });
          })
          .catch(error => {
            this.isSaving = true;
            this.alertService().showHttpError(this.$root, error.response);
          });
      }
    },

    returnToList(): void {
      this.isSaving = false;
      this.$router.go(-1);
    },

    getMessageFromHeader(res: any): any {
<%_
  const headerAlert = `X-${frontendAppName}-alert`.toLowerCase();
  const headerParams = `X-${frontendAppName}-params`.toLowerCase();
  if (enableTranslation) {
_%>
      return this.$t(res.headers['<%=headerAlert%>'], { param: decodeURIComponent(res.headers['<%=headerParams%>'].replace(/\+/g, ' ')) });
<%_ } else {_%>
      return res.headers['<%=headerAlert%>'];
<%_ } _%>
    },
  },
});

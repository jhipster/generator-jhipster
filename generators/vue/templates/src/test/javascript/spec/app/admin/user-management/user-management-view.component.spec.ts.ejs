<%_
const tsKeyId = this.generateTestEntityId(user.primaryKey.type);
_%>
import { shallowMount, createLocalVue } from '@vue/test-utils';
import axios from 'axios';
import sinon from 'sinon';
import { FontAwesomeIcon } from '@fortawesome/vue-fontawesome';
import VueRouter from 'vue-router';

import { useStore } from '@/store';
import * as config from '@/shared/config/config';
import UserManagementView from '@/admin/user-management/user-management-view.vue';
import type UserManagementViewComponent from '@/admin/user-management/user-management-view.component';
import { Authority } from '@/shared/security/authority';

type UserManagementViewComponentType = Vue & InstanceType<typeof UserManagementViewComponent>;

const localVue = createLocalVue();

config.initVueApp(localVue);
<%_ if (enableTranslation) { _%>
const i18n = config.initI18N(localVue);
<%_ } _%>
const store = useStore();
localVue.component('font-awesome-icon', FontAwesomeIcon);
localVue.component('b-badge', {});
localVue.component('router-link', {});
localVue.use(VueRouter);

const axiosStub = {
  get: sinon.stub(axios, 'get'),
};

describe('UserManagementView Component', () => {
  describe('OnInit', () => {
    it('Should call load all on init', async () => {
      // GIVEN
      const userData = {
        id: 1,
        login: 'user',
        firstName: 'first',
        lastName: 'last',
        email: 'first@last.com',
        activated: true,
        langKey: 'en',
        authorities: [Authority.USER],
        createdBy: 'admin',
        createdDate: null,
        lastModifiedBy: null,
        lastModifiedDate: null,
        password: null,
      };
      axiosStub.get.resolves({ data: userData });

      const router = new VueRouter({
        routes: [{ path: '/:userId' }],
      });
      router.push('/' + <%- tsKeyId %>);

      const wrapper = shallowMount<UserManagementViewComponentType>(UserManagementView, {
        store,
        localVue,
        router,
<%_ if (enableTranslation) { _%>
        i18n,
<%_ } _%>
      });
      const userManagementView = wrapper.vm;
  
      // WHEN
      await userManagementView.$nextTick();

      // THEN
      expect(axiosStub.get.calledWith('api/admin/users/' + <%- tsKeyId %>)).toBeTruthy();
      expect(userManagementView.user).toEqual(userData);
    });
  });
});

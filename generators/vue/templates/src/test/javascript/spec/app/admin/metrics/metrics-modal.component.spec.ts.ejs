import { shallowMount, createLocalVue, Wrapper } from '@vue/test-utils';

import { useStore } from '@/store';
import * as config from '@/shared/config/config';
import MetricsModal from '@/admin/metrics/metrics-modal.vue';
import type MetricsModalComponent from '@/admin/metrics/metrics-modal.component';

type MetricsModalComponentType = Vue & InstanceType<typeof MetricsModalComponent>;

const localVue = createLocalVue();

config.initVueApp(localVue);
<%_ if (enableTranslation) { _%>
const i18n = config.initI18N(localVue);
<%_ } _%>
const store = useStore();

describe('Metrics Component', () => {
  let metricsModal: MetricsModalComponentType;
  let wrapper: Wrapper<MetricsModalComponentType>;

  beforeEach(() => {
    wrapper = shallowMount<MetricsModalComponentType>(MetricsModal, {
      store,
<%_ if (enableTranslation) { _%>
      i18n,
<%_ } _%>
      localVue,
      propsData: {
        threadDump: [
          { name: 'test1', threadState: 'RUNNABLE' },
          { name: 'test2', threadState: 'WAITING' },
          { name: 'test3', threadState: 'TIMED_WAITING' },
          { name: 'test4', threadState: 'BLOCKED' },
          { name: 'test5', threadState: 'BLOCKED' },
          { name: 'test5', threadState: 'NONE' },
        ],
      },
    });
    metricsModal = wrapper.vm;
  });

  describe('init', () => {
    it('should count the numbers of each thread type', async () => {
      expect(metricsModal.threadDumpData.threadDumpRunnable).toBe(1);
      expect(metricsModal.threadDumpData.threadDumpWaiting).toBe(1);
      expect(metricsModal.threadDumpData.threadDumpTimedWaiting).toBe(1);
      expect(metricsModal.threadDumpData.threadDumpBlocked).toBe(2);
      expect(metricsModal.threadDumpData.threadDumpAll).toBe(5);
    });
  });

  describe('getBadgeClass', () => {
    it('should return badge-success for RUNNABLE', () => {
      expect(metricsModal.getBadgeClass('RUNNABLE')).toBe('badge-success');
    });

    it('should return badge-info for WAITING', () => {
      expect(metricsModal.getBadgeClass('WAITING')).toBe('badge-info');
    });

    it('should return badge-warning for TIMED_WAITING', () => {
      expect(metricsModal.getBadgeClass('TIMED_WAITING')).toBe('badge-warning');
    });

    it('should return badge-danger for BLOCKED', () => {
      expect(metricsModal.getBadgeClass('BLOCKED')).toBe('badge-danger');
    });

    it('should return undefined for anything else', () => {
      expect(metricsModal.getBadgeClass('')).toBe(undefined);
    });
  });
});

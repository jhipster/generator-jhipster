import { createLocalVue, shallowMount } from '@vue/test-utils';
import Home from '@/core/home/home.vue';
import type HomeComponent from '@/core/home/home.component';

import { useStore } from '@/store';
import * as config from '@/shared/config/config';

type HomeComponentType = Vue & InstanceType<typeof HomeComponent>;

const localVue = createLocalVue();
config.initVueApp(localVue);
const store = useStore();
<%_ if (enableTranslation) { _%>
const i18n = config.initI18N(localVue);
<%_ } _%>
localVue.component('router-link', {});

describe('Home', () => {
  let home: HomeComponentType;
<%_ if (authenticationTypeJwt) { _%>
  const loginService = { openLogin: jest.fn() };
<%_ } else if (authenticationTypeSession) { _%>
  const loginService = { openLogin: jest.fn(), logout: jest.fn() };
<%_ } else if (authenticationTypeOauth2) { _%>
  const loginService = { login: jest.fn(), logout: jest.fn() };
<%_ } _%>

  beforeEach(() => {
    const wrapper = shallowMount<HomeComponentType>(Home, {
<%_ if (enableTranslation) { _%>
      i18n,
<%_ } _%>
      store,
      localVue,
      provide: {
        loginService: () => loginService
      }
    });
    home = wrapper.vm;
  });

  it('should not have user data set', () => {
    expect(home.authenticated).toBeFalsy();
    expect(home.username).toBe('');
  });

  it('should have user data set after authentication', () => {
    store.commit('authenticated', {login: 'test'});

    expect(home.authenticated).toBeTruthy();
    expect(home.username).toBe('test');
  });

  it('should use login service', () => {
    home.openLogin();

<%_ if (!authenticationTypeOauth2) { _%>
    expect(loginService.openLogin).toHaveBeenCalled();
<%_ } else { %>
    expect(loginService.login).toHaveBeenCalled();
<%_ } %>
  });
});

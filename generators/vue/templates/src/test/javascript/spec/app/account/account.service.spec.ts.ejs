<%_ if (enableTranslation) { _%>
import { createLocalVue } from '@vue/test-utils';
<%_ } %>
import axios from 'axios';
import sinon from 'sinon';

import { useStore } from '@/store';
import AccountService from '@/account/account.service';
<%_ if (enableTranslation) { _%>
import TranslationService from '@/locale/translation.service';
<%_ } %>

<%_ if (enableTranslation) { _%>
import { initI18N } from '@/shared/config/config'; 
<%_ } %>
import { defaultAccountState } from '@/shared/config/store/account-store';

const resetStore = store => {
  store.replaceState({
    accountStore: { ...defaultAccountState },
<%_ if (enableTranslation) { _%>
    translationStore: { languages: {} },
<%_ } %>
  });
};

const axiosStub = {
  get: sinon.stub(axios, 'get'),
  post: sinon.stub(axios, 'post'),
};

<%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>
const mockedCookie = { get: jest.fn(() => { return 'token'; }) };
<%_ } _%>
<%_ if (enableTranslation) { _%>
const localVue = createLocalVue();
<%_ } _%>
const store = useStore();

describe('Account Service test suite', () => {
<%_ if (enableTranslation) { _%>
  let i18n;
<%_ } %>
  let accountService: AccountService;

  beforeEach(() => {
    localStorage.clear();
<%_ if (authenticationTypeJwt) { _%>
    localStorage.setItem('<%=jhiPrefixDashed %>-authenticationToken', 'token');
<%_ } %>
    axiosStub.get.reset();
    resetStore(store);
<%_ if (enableTranslation) { _%>
    i18n = initI18N(localVue);
<%_ } %>
  });

  it('should init service and do not retrieve account', async () => {
    axiosStub.get.resolves({});
    axiosStub.get.withArgs('management/info').resolves({ status: 200, data: { 'display-ribbon-on-profiles': 'dev', activeProfiles: ['dev', 'test'] } });

    accountService = new AccountService(store<%_ if (enableTranslation) { _%>, new TranslationService(store, i18n)<%_ } %><%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>, mockedCookie<%_ } %>);
    await accountService.update();

    expect(store.getters.logon).toBe(null);
    expect(accountService.authenticated).toBe(false);
    expect(store.getters.account).toBe(null);
    expect(axiosStub.get.calledWith('management/info')).toBeTruthy();
    expect(store.getters.activeProfiles[0]).toBe('dev');
    expect(store.getters.activeProfiles[1]).toBe('test');
    expect(store.getters.ribbonOnProfiles).toBe('dev');
  });

  it('should init service and retrieve profiles if already logged in before but no account found', async () => {
    axiosStub.get.resolves({});
    accountService = new AccountService(store<%_ if (enableTranslation) { _%>, new TranslationService(store, i18n)<%_ } %><%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>, mockedCookie<%_ } %>);
    await accountService.update();

    expect(store.getters.logon).toBe(null);
    expect(accountService.authenticated).toBe(false);
    expect(store.getters.account).toBe(null);
    expect(axiosStub.get.calledWith('management/info')).toBeTruthy();
  });

  it('should init service and retrieve profiles if already logged in before but exception occurred and should be logged out', async () => {
    axiosStub.get.resolves({});
    axiosStub.get.withArgs('api/account').rejects();
    accountService = new AccountService(store<%_ if (enableTranslation) { _%>, new TranslationService(store, i18n)<%_ } %><%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>, mockedCookie<%_ } %>);
    await accountService.update();

    expect(accountService.authenticated).toBe(false);
    expect(store.getters.account).toBe(null);
    expect(axiosStub.get.calledWith('management/info')).toBeTruthy();
  });

  it('should init service and check for authority after retrieving account but getAccount failed', async () => {
    axiosStub.get.rejects();
    accountService = new AccountService(store<%_ if (enableTranslation) { _%>, new TranslationService(store, i18n)<%_ } %><%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>, mockedCookie<%_ } %>);
    await accountService.update();

    return accountService.hasAnyAuthorityAndCheckAuth('USER').then((value: boolean) => {
      expect(value).toBe(false);
    });
  });

  it('should init service and check for authority after retrieving account', async () => {
    axiosStub.get.resolves({ status: 200, data: { authorities: ['USER'], langKey: 'en' } });
    accountService = new AccountService(store<%_ if (enableTranslation) { _%>, new TranslationService(store, i18n)<%_ } %><%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>, mockedCookie<%_ } %>);
    await accountService.update();

    return accountService.hasAnyAuthorityAndCheckAuth('USER').then((value: boolean) => {
      expect(value).toBe(true);
    });
  });

  it('should init service as not authentified and not return any authorities admin and not retrieve account', async () => {
    axiosStub.get.rejects();
    accountService = new AccountService(store<%_ if (enableTranslation) { _%>, new TranslationService(store, i18n)<%_ } %><%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>, mockedCookie<%_ } %>);
    await accountService.update();

    return accountService.hasAnyAuthorityAndCheckAuth('ADMIN').then((value: boolean) => {
      expect(value).toBe(false);
    });
  });

  it('should init service as not authentified and return authority user', async () => {
    axiosStub.get.rejects();
    accountService = new AccountService(store<%_ if (enableTranslation) { _%>, new TranslationService(store, i18n)<%_ } %><%_ if (authenticationTypeSession || authenticationTypeOauth2) { _%>, mockedCookie<%_ } %>);
    await accountService.update();

    return accountService.hasAnyAuthorityAndCheckAuth('USER').then((value: boolean) => {
      expect(value).toBe(false);
    });
  });
});

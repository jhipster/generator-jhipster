<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ const tsKeyId = this.generateTestEntityId(primaryKey.type); _%>
/* tslint:disable max-line-length */
import { shallowMount, createLocalVue, ThisTypedShallowMountOptions } from '@vue/test-utils';
import sinon, { SinonStubbedInstance } from 'sinon';
import Router from 'vue-router';
import { ToastPlugin } from 'bootstrap-vue';
import VueRouter from 'vue-router';

<%_ let dayJsIncluded = false;
  for (field of fields.filter(field => !field.id)) { _%>
  <%_ if (field.fieldTypeTimed && !dayJsIncluded) {
      dayJsIncluded = true; _%>
import dayjs from 'dayjs';
import { DATE_TIME_LONG_FORMAT } from '@/shared/date/filters';
  <%_ } _%>
<%_ } _%>

import { useStore } from '@/store';
import * as config from '@/shared/config/config';
import <%= entityAngularName %>Update from '@/entities/<%= entityFolderName %>/<%= entityFileName %>-update.vue';
import type <%= entityAngularName %>UpdateComponent from '@/entities/<%= entityFolderName %>/<%= entityFileName %>-update.component';
import <%= entityAngularName %>Service from '@/entities/<%= entityFolderName %>/<%= entityFileName %>.service';

<%_
  const allRelationshipsThatNeedSelectOptions = Object
    .values(relationshipsByOtherEntity)
    .map(relationships => relationships.filter(rel => rel.ownerSide))
    .filter(relationships => relationships.length > 0);
_%>
<%_ for (const [relationship] of Object.values(allRelationshipsThatNeedSelectOptions)) { _%>
  <% if (relationship.otherEntityUser && (generateBuiltInUserEntity)) { %>
import UserService from '@/entities/user/user.service';
  <%_ } else { _%>
import <%= relationship.otherEntity.entityAngularName %>Service from '@/entities/<%= relationship.otherEntity.entityClientRootFolder %><%= relationship.otherEntity.entityFolderName %>/<%= relationship.otherEntity.entityFileName %>.service';
  <%_ } _%>
<%_ } _%>

type <%= entityAngularName %>UpdateComponentType = Vue & InstanceType<typeof <%= entityAngularName %>UpdateComponent>;

const localVue = createLocalVue();

config.initVueApp(localVue);
<%_ if (enableTranslation) { _%>
const i18n = config.initI18N(localVue);
<%_ } _%>
const store = useStore();
const router = new Router();
localVue.use(Router);
localVue.use(ToastPlugin);
localVue.component('font-awesome-icon', {});
localVue.component('b-input-group', {});
localVue.component('b-input-group-prepend', {});
localVue.component('b-form-datepicker', {});
localVue.component('b-form-input', {});

const <%= entityInstance %>Sample = { id: <%- tsKeyId %> };

describe('Component Tests', () => {
  let mountOptions: ThisTypedShallowMountOptions<<%= entityAngularName %>UpdateComponentType>;
  let router: VueRouter;

  describe('<%= entityAngularName %> Management Update Component', () => {
    let comp: <%= entityAngularName %>UpdateComponentType;
    let <%= entityInstance %>ServiceStub: SinonStubbedInstance<<%= entityAngularName %>Service>;

    beforeEach(() => {
      <%= entityInstance %>ServiceStub = sinon.createStubInstance<<%= entityAngularName %>Service>(<%= entityAngularName %>Service);
      router = new VueRouter({
        routes: [
          {
            path: '/<%= entityApiUrl %>/:<%= entityInstance %>Id',
          },
        ],
      });

      mountOptions = {
        store,
<%_ if (enableTranslation) { _%>
        i18n,
<%_ } _%>
        localVue,
        router,
        provide: {
          <%= entityInstance %>Service: () => <%= entityInstance %>ServiceStub,

<%_ for (const [relationship] of Object.values(allRelationshipsThatNeedSelectOptions)) { _%>
  <% if (relationship.otherEntityUser && (generateBuiltInUserEntity)) { %>
          userService: () =>
            sinon.createStubInstance<UserService>(UserService, {
              retrieve: sinon.stub().resolves({}),
            } as any),
  <%_ } else { _%>
          <%= relationship.otherEntity.entityInstance %>Service: () =>
            sinon.createStubInstance<<%= relationship.otherEntity.entityAngularName %>Service>(<%= relationship.otherEntity.entityAngularName %>Service, {
              retrieve: sinon.stub().resolves({}),
            } as any),
  <%_ } _%>
<%_ } _%>
        },
      };
    });

<%_
  let dateTestsIncluded = false;
  for (field of fields.filter(field => !field.id)) {
    if (field.fieldTypeTimed && !dateTestsIncluded) {
      dateTestsIncluded = true;
_%>
    describe('load', () => {
      beforeEach(() => {
        const wrapper = shallowMount<<%= entityAngularName %>UpdateComponentType>(<%= entityAngularName %>Update, mountOptions);
        comp = wrapper.vm;
      });
      it('Should convert date from string', () => {
        // GIVEN
        const date = new Date('2019-10-15T11:42:02Z');

        // WHEN
        const convertedDate = comp.convertDateTimeFromServer(date);

        // THEN
        expect(convertedDate).toEqual(dayjs(date).format(DATE_TIME_LONG_FORMAT));
      });

      it('Should not convert date if date is not present', () => {
        expect(comp.convertDateTimeFromServer(null)).toBeNull();
      });
    });
  <%_ } _%>
<%_ } _%>

    describe('save', () => {
      it('Should call update service on save for existing entity', async () => {
        // GIVEN
        const wrapper = shallowMount<<%= entityAngularName %>UpdateComponentType>(<%= entityAngularName %>Update, mountOptions);
        comp = wrapper.vm;
        comp.<%= entityInstance %> = <%= entityInstance %>Sample;
        <%= entityInstance %>ServiceStub.update.resolves(<%= entityInstance %>Sample);

        // WHEN
        comp.save();
        await comp.$nextTick();

        // THEN
        expect(<%= entityInstance %>ServiceStub.update.calledWith(<%= entityInstance %>Sample)).toBeTruthy();
        expect(comp.isSaving).toEqual(false);
      });

      it('Should call create service on save for new entity', async () => {
        // GIVEN
        const entity = {};
        <%= entityInstance %>ServiceStub.create.resolves(entity);
        const wrapper = shallowMount<<%= entityAngularName %>UpdateComponentType>(<%= entityAngularName %>Update, mountOptions);
        comp = wrapper.vm;
        comp.<%= entityInstance %> = entity;

        // WHEN
        comp.save();
        await comp.$nextTick();

        // THEN
        expect(<%= entityInstance %>ServiceStub.create.calledWith(entity)).toBeTruthy();
        expect(comp.isSaving).toEqual(false);
      });
    });

    describe('Before route enter', () => {
      it('Should retrieve data', async () => {
        // GIVEN
        <%= entityInstance %>ServiceStub.find.resolves(<%= entityInstance %>Sample);
        <%= entityInstance %>ServiceStub.retrieve.resolves([<%= entityInstance %>Sample]);

        // WHEN
        router.push('/<%- entityApiUrl %>/' + <%= entityInstance %>Sample.<%- primaryKey.name %>);
        const wrapper = shallowMount<<%= entityAngularName %>UpdateComponentType>(<%= entityAngularName %>Update, mountOptions);
        comp = wrapper.vm;
        await comp.$nextTick();

        // THEN
        expect(comp.<%= entityInstance %>).toBe(<%= entityInstance %>Sample);
      });
    });

    describe('Previous state', () => {
      it('Should go previous state', async () => {
        <%= entityInstance %>ServiceStub.find.resolves(<%= entityInstance %>Sample);
        router.push('/');
        router.push('/<%- entityApiUrl %>/' + <%= entityInstance %>Sample.<%- primaryKey.name %>);
        const wrapper = shallowMount<<%= entityAngularName %>UpdateComponentType>(<%= entityAngularName %>Update, mountOptions);
        comp = wrapper.vm;
        await comp.$nextTick();

        comp.previousState();
        await comp.$nextTick();

        expect(comp.$router.currentRoute.fullPath).toContain('/');
      });
    });
  });
});

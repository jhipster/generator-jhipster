<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
const path = require('path');
const { existsSync } = require('fs');
const { merge } = require('webpack-merge');
const CopyWebpackPlugin = require('copy-webpack-plugin');
<%_ if (enableTranslation) { _%>
const { hashElement } = require('folder-hash');
const MergeJsonWebpackPlugin = require('merge-jsons-webpack-plugin');
<%_ } _%>
const { DefinePlugin, EnvironmentPlugin } = require('webpack');

function resolve(...args) {
  return path.join(__dirname, '..', ...args);
}

module.exports = async (configuration, options) => {
<%_ if (enableTranslation) { _%>
  const languagesHash = await hashElement(resolve('<%= clientSrcDir %>i18n'), {
    algo: 'md5',
    encoding: 'hex',
    files: { include: ['*.json'] },
  });

<%_ } _%>
  // Build proxy object, workaround vue-cli not working with proxy with array type.
  const context = { target: 'http://127.0.0.1:<%= serverPort %>', secure: false, headers: { host: 'localhost:9000' } };
  const proxy = Object.fromEntries(
    [
      '/api',
      '/services',
      '/management',
      '/swagger-resources',
      '/v2/api-docs',
      '/v3/api-docs',
      '/h2-console',
<%_ if (authenticationTypeOauth2) { _%>
      '/oauth2',
      '/login',
<%_ } _%>
      '/auth'
    ].map(contextPath => [
      contextPath,
      context,
    ])
  );

  return merge(
    {
<%_ if (applicationTypeGateway && microfrontend) { _%>
      experiments: {
        topLevelAwait: true,
      },
<%_ } _%>
      module: {
        // Add swagger-ui to noParse.
        noParse: /^(vue|vue-router|vuex|vuex-router-sync|swagger-ui)$/,
      },
      entry: {
        // global: resolve('<%= clientSrcDir %>content/scss/global.scss'),
        app: './<%= clientSrcDir %>app/<%= microfrontend ? 'index' : 'main' %>.ts',
      },
      resolve: {
        alias: {
          vue$: 'vue/dist/vue.esm.js',
          '@': resolve('<%= clientSrcDir %>app'),
        },
      },
      devServer: {
        port: <%= devServerPort %>,
        proxy: {
          ...proxy,
  <%_ if (communicationSpringWebsocket) { _%>
          '/websocket': {
            target: 'ws://localhost:<%= applicationTypeMicroservice ? gatewayServerPort : serverPort %>',
            ws: true
          }
  <%_ } _%>
        },
        historyApiFallback: true,
      },  
      cache: {
        // 1. Set cache type to filesystem
        type: 'filesystem',
        cacheDirectory: resolve('<%= temporaryDir %>webpack'),
        buildDependencies: {
          // 2. Add your config as buildDependency to get cache invalidation on config change
          config: [
            __filename,
            path.resolve(__dirname, 'config.js'),
            path.resolve(__dirname, 'webpack.dev.js'),
            path.resolve(__dirname, '../.postcssrc.js'),
            path.resolve(__dirname, '../tsconfig.json'),
            path.resolve(__dirname, '../vue.commands.js'),
            path.resolve(__dirname, '../vue.config.js'),
            path.resolve(__dirname, '../package.json'),
            path.resolve(__dirname, '../package-lock.json'),
          ].filter(file => existsSync(file)),
        },
      },
      plugins: [
        new EnvironmentPlugin({
          // Required by vuelidate https://github.com/vuelidate/vuelidate/issues/365
          BUILD: 'web',
        }),
        new DefinePlugin({
<%_ if (enableTranslation) { _%>
          I18N_HASH: JSON.stringify(languagesHash.hash),
<%_ } _%>
          ...Object.fromEntries(Object.entries(require('./config')).map(([key, value]) => [key, JSON.stringify(value)])),
        }),
        new CopyWebpackPlugin({
          patterns: [
            {
              // https://github.com/swagger-api/swagger-ui/blob/v4.6.1/swagger-ui-dist-package/README.md
              context: require('swagger-ui-dist').getAbsoluteFSPath(),
              from: '*.{js,css,html,png}',
              to: 'swagger-ui/',
              globOptions: { ignore: ['**/index.html'] },
            },
            {
              from: path.join(path.dirname(require.resolve('axios/package.json')), 'dist/axios.min.js'),
              to: 'swagger-ui/',
            },
            { from: './<%= clientSrcDir %>swagger-ui/', to: 'swagger-ui/' },
            { from: './<%= clientSrcDir %>content/', to: 'content/' },
            { from: './<%= clientSrcDir %>favicon.ico', to: 'favicon.ico' },
            {
              from: './<%= clientSrcDir %>manifest.webapp',
              to: 'manifest.webapp',
            },
            // jhipster-needle-add-assets-to-webpack - JHipster will add/remove third-party resources in this array
            { from: './<%= clientSrcDir %>robots.txt', to: 'robots.txt' },
          ],
        }),
<%_ if (enableTranslation) { _%>
        new MergeJsonWebpackPlugin({
          output: {
            groupBy: [
              // jhipster-needle-i18n-language-webpack - JHipster will add/remove languages in this array
            ],
          },
        }),
<%_ } _%>
      ],
    },
    // jhipster-needle-add-webpack-config - JHipster will add custom config
  );
};

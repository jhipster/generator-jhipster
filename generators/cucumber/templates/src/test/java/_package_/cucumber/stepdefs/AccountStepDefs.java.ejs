<%#
 Copyright 2013-2025 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
package <%= packageName %>.cucumber.stepdefs;

import <%= packageName %>.security.AuthoritiesConstants;
import <%= packageName %>.web.rest.AccountResource;

import io.cucumber.java.Before;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

import java.util.ArrayList;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.MediaType;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.context.SecurityContext;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
<%_ if (reactive) { _%>

import static org.hamcrest.Matchers.is;

import org.springframework.test.web.reactive.server.WebTestClient;
<%_ } else { _%>

import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
<%_ } _%>

public class AccountStepDefs extends StepDefs {

    @Autowired
    private AccountResource accountResource;

<%_ if (reactive) { _%>
    private WebTestClient accountResourceMock;
<%_ } else { _%>
    private MockMvc accountResourceMock;
<%_ } _%>

    @Before
    public void setup() {
        List<GrantedAuthority> grantedAuthorities = new ArrayList<>();
        grantedAuthorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.ADMIN));
        User principal = new User("admin", "", true, true, true, true, grantedAuthorities);
        Authentication authentication = new UsernamePasswordAuthenticationToken(
            principal,
            principal.getPassword(),
            principal.getAuthorities()
        );
        SecurityContext context = SecurityContextHolder.createEmptyContext();
        context.setAuthentication(authentication);
        SecurityContextHolder.setContext(context);
<%_ if (reactive) { _%>
        this.accountResourceMock = WebTestClient.bindToController(accountResource).build();
<%_ } else { _%>
        this.accountResourceMock = MockMvcBuilders.standaloneSetup(accountResource).build();
<%_ } _%>
    }

    @When("I get current account")
    public void i_get_current_account() throws Throwable {
<%_ if (reactive) { _%>
        actions = accountResourceMock.get().uri("/api/account").accept(MediaType.APPLICATION_JSON).exchange();
<%_ } else { _%>
        actions = accountResourceMock.perform(get("/api/account").accept(MediaType.APPLICATION_JSON));
<%_ } _%>
}

    @Then("the account is returned")
    public void the_account_is_returned() throws Throwable {
<%_ if (reactive) { _%>
        actions
            .expectStatus().isOk()
            .expectHeader().contentTypeCompatibleWith(MediaType.APPLICATION_JSON_VALUE);
<%_ } else { _%>
        actions.andExpect(status().isOk()).andExpect(content().contentType(MediaType.APPLICATION_JSON_VALUE));
<%_ } _%>
    }

    @Then("his login is admin")
    public void his_login_is_admin() throws Throwable {
<%_ if (reactive) { _%>
        actions.expectBody().jsonPath("$.login").value(is("admin"));
<%_ } else { _%>
        actions.andExpect(jsonPath("$.login").value("admin"));
<%_ } _%>
    }

}

<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
let searchType = 'Search';
if (paginationPagination || paginationInfiniteScroll) {
    searchType = 'SearchWithPagination';
}
_%>
import { Injectable } from '@angular/core';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Observable } from 'rxjs';
<%_ if (fieldsContainDate) { _%>
import { map } from 'rxjs/operators';
import dayjs from 'dayjs/esm';
<%_ } _%>

import { isPresent } from 'app/core/util/operators';
<%_ if (fieldsContainLocalDate) { _%>
import { DATE_FORMAT } from 'app/config/input.constants';
<%_ } _%>
import { ApplicationConfigService } from 'app/core/config/application-config.service';
import { createRequestOption } from 'app/core/request/request-util';
<%_ if (searchEngine) { _%>
import { <%= searchType %> } from 'app/core/request/request.model';
<%_ } _%>
import { I<%= entityAngularName %>, New<%= entityAngularName %> } from '../<%= entityFileName %>.model';

export type PartialUpdate<%= entityAngularName %> = Partial<I<%= entityAngularName %>> & Pick<I<%= entityAngularName %>, '<%= primaryKey.name %>'>;

<%_ const entityRestName = fieldsContainDate ? `Rest${entityAngularName}` : `I${entityAngularName}`; _%>
<%_ if (fieldsContainDate) { _%>
type RestOf<T extends I<%= entityAngularName %> | New<%= entityAngularName %>> =
  Omit<T, '<%- fields.filter(field => field.fieldTypeTemporal).map(field => field.fieldName).join("' | '") %>'> &
  {
  <%_ for (const field of fields.filter(field => field.fieldTypeTemporal)) { _%>
  <%= field.fieldName %>?: string | null;
  <%_ } _%>
  };

export type <%= entityRestName %> = RestOf<I<%= entityAngularName %>>;

export type New<%= entityRestName %> = RestOf<New<%= entityAngularName %>>;

export type PartialUpdate<%= entityRestName %> = RestOf<PartialUpdate<%= entityAngularName %>>;

<%_ } _%>
export type EntityResponseType = HttpResponse<I<%= entityAngularName %>>;
export type EntityArrayResponseType = HttpResponse<I<%= entityAngularName %>[]>;

@Injectable({ providedIn: 'root' })
export class <%= entityAngularName %>Service {
    protected resourceUrl = this.applicationConfigService.getEndpointFor('api/<%= entityApiUrl %>'<% if ((applicationTypeGateway || applicationTypeMicroservice) && locals.microserviceName) { %>, '<%= microserviceName.toLowerCase() %>'<% } %>);
<%_ if (searchEngine) { _%>
    protected resourceSearchUrl = this.applicationConfigService.getEndpointFor('api/_search/<%= entityApiUrl %>'<% if ((applicationTypeGateway || applicationTypeMicroservice) && locals.microserviceName) { %>, '<%= microserviceName.toLowerCase() %>'<% } %>);
<%_ } _%>

    constructor(protected http: HttpClient, protected applicationConfigService: ApplicationConfigService) {}

<%_ if (!readOnly) { _%>
    create(<%= entityInstance %>: New<%= entityAngularName %>): Observable<EntityResponseType> {
    <%_ if (fieldsContainDate) { _%>
        const copy = this.convertDateFromClient(<%= entityInstance %>);
    <%_ } _%>
        return this.http.post<<%= entityRestName %>>(this.resourceUrl,
                <% if (fieldsContainDate) { %> copy <% } else { %> <%= entityInstance %> <% } %>,
                { observe: 'response' })
        <% if (fieldsContainDate) { %>.pipe(map(res => this.convertResponseFromServer(res)))<% } %>;
    }

    update(<%= entityInstance %>: I<%= entityAngularName %>): Observable<EntityResponseType> {
    <%_ if (fieldsContainDate) { _%>
        const copy = this.convertDateFromClient(<%= entityInstance %>);
    <%_ } _%>
        return this.http.put<<%= entityRestName %>>(`${this.resourceUrl}/${this.get<%= entityAngularName %>Identifier(<%= entityInstance %>)}`,
                <% if (fieldsContainDate) { %> copy <% } else { %> <%= entityInstance %> <% } %>,
                { observe: 'response' })
        <% if (fieldsContainDate) { %>.pipe(map(res => this.convertResponseFromServer(res)))<% } %>;
    }

    partialUpdate(<%= entityInstance %>: PartialUpdate<%= entityAngularName %>): Observable<EntityResponseType> {
    <%_ if (fieldsContainDate) { _%>
        const copy = this.convertDateFromClient(<%= entityInstance %>);
    <%_ } _%>
        return this.http.patch<<%= entityRestName %>>(`${this.resourceUrl}/${this.get<%= entityAngularName %>Identifier(<%= entityInstance %>)}`,
                <% if (fieldsContainDate) { %> copy <% } else { %> <%= entityInstance %> <% } %>,
                { observe: 'response' })
        <% if (fieldsContainDate) { %>.pipe(map(res => this.convertResponseFromServer(res)))<% } %>;
    }
<%_ } _%>

    find(id: <%= tsKeyType %>): Observable<EntityResponseType> {
        return this.http.get<<%= entityRestName %>>(`${this.resourceUrl}/${id}`, { observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map(res => this.convertResponseFromServer(res)))<% } %>;
    }

    query(req?: any): Observable<EntityArrayResponseType> {
        const options = createRequestOption(req);
        return this.http.get<<%= entityRestName %>[]>(this.resourceUrl, { params: options, observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map(res => this.convertResponseArrayFromServer(res)))<% } %>;
    }

<%_ if (!readOnly) { _%>
    delete(id: <%= tsKeyType %>): Observable<HttpResponse<{}>> {
        return this.http.delete(`${this.resourceUrl}/${id}`, { observe: 'response' });
    }
<%_ } _%>

<%_ if (searchEngine) { _%>
    search(req: <%= searchType %>): Observable<EntityArrayResponseType> {
        const options = createRequestOption(req);
        return this.http.get<<%= entityRestName %>[]>(this.resourceSearchUrl, { params: options, observe: 'response' })
            <% if (fieldsContainDate) { %>.pipe(map(res => this.convertResponseArrayFromServer(res)))<% } %>;
    }
<%_ } _%>

    get<%= entityAngularName %>Identifier(<%= entityInstance %>: Pick<I<%= entityAngularName %>, '<%= primaryKey.name %>'>): <%= primaryKey.tsType %> {
        return <%= entityInstance %>.<%= primaryKey.name %>;
    }

    compare<%= entityAngularName %>(o1: Pick<I<%= entityAngularName %>, '<%= primaryKey.name %>'> | null, o2: Pick<I<%= entityAngularName %>, '<%= primaryKey.name %>'> | null): boolean {
        return o1 && o2 ? this.get<%= entityAngularName %>Identifier(o1) === this.get<%= entityAngularName %>Identifier(o2) : o1 === o2;
    }

    add<%= entityAngularName %>ToCollectionIfMissing<Type extends Pick<I<%= entityAngularName %>, '<%= primaryKey.name %>'>>(<%= entityInstance %>Collection: Type[], ...<%= entityInstancePlural %>ToCheck: (Type | null | undefined)[]): Type[] {
        const <%= entityInstancePlural %>: Type[] = <%= entityInstancePlural %>ToCheck.filter(isPresent);
        if (<%= entityInstancePlural %>.length > 0) {
            const <%= entityInstance %>CollectionIdentifiers = <%= entityInstance %>Collection.map(<%= entityInstance %>Item => this.get<%= entityAngularName %>Identifier(<%= entityInstance %>Item)!);
            const <%= entityInstancePlural %>ToAdd = <%= entityInstancePlural %>.filter(<%= entityInstance %>Item => {
                const <%= entityInstance %>Identifier = this.get<%= entityAngularName %>Identifier(<%= entityInstance %>Item);
                if (<%= entityInstance %>CollectionIdentifiers.includes(<%= entityInstance %>Identifier)) {
                    return false;
                }
                <%= entityInstance %>CollectionIdentifiers.push(<%= entityInstance %>Identifier);
                return true;
            });
            return [...<%= entityInstancePlural %>ToAdd, ...<%= entityInstance %>Collection];
        }
        return <%= entityInstance %>Collection;
    }

<%_ if (fieldsContainDate) { _%>
    protected convertDateFromClient<T extends I<%= entityAngularName %> | New<%= entityAngularName %> | PartialUpdate<%= entityAngularName %>>(<%= entityInstance %>: T): RestOf<T> {
        return {
            ...<%= entityInstance %>,
    <%_ for (const field of fields) { _%>
        <%_ if (field.fieldTypeTimed) { _%>
        <%= field.fieldName %>: <%= entityInstance %>.<%= field.fieldName %>?.toJSON() ?? null,
        <%_ } _%>
        <%_ if (field.fieldTypeLocalDate) { _%>
        <%= field.fieldName %>: <%= entityInstance %>.<%= field.fieldName %>?.format(DATE_FORMAT) ?? null,
        <%_ } _%>
    <%_ } _%>
        };
    }

    protected convertDateFromServer(rest<%= entityAngularName %>: <%= entityRestName %>): I<%= entityAngularName %> {
        return {
            ...rest<%= entityAngularName %>,
    <%_ for (const field of fields.filter(field => field.fieldTypeTemporal)) { _%>
            <%= field.fieldName %>: rest<%= entityAngularName %>.<%= field.fieldName %> ? dayjs(rest<%= entityAngularName %>.<%= field.fieldName %>) : undefined,
    <%_ } _%>
        }
    }

  protected convertResponseFromServer(res: HttpResponse<<%= entityRestName %>>): HttpResponse<I<%= entityAngularName %>> {
    return res.clone({
      body: res.body ? this.convertDateFromServer(res.body) : null,
    });
  }

  protected convertResponseArrayFromServer(res: HttpResponse<<%= entityRestName %>[]>): HttpResponse<I<%= entityAngularName %>[]> {
    return res.clone({
      body: res.body ? res.body.map(item => this.convertDateFromServer(item)) : null,
    });
  }
<%_ } _%>
}

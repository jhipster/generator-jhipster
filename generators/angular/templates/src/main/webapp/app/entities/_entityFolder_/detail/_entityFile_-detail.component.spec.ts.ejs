<%#
 Copyright 2013-2024 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_
const tsKeyId = this.generateTestEntityId(primaryKey.type);
const testEntity = this.generateTestEntityPrimaryKey(primaryKey, 0);
_%>
import { ComponentFixture, TestBed } from '@angular/core/testing';
import { provideRouter, withComponentInputBinding } from '@angular/router';
import { RouterTestingHarness } from '@angular/router/testing';
import { of } from 'rxjs';

<%_ if (anyFieldIsBlobDerived) { _%>
import { DataUtils } from 'app/core/util/data-util.service';
<%_ } _%>

import { <%= entityAngularName %>DetailComponent } from './<%= entityFileName %>-detail.component';

describe('<%= entityAngularName %> Management Detail Component', () => {
  let comp: <%= entityAngularName %>DetailComponent;
  let fixture: ComponentFixture<<%= entityAngularName %>DetailComponent>;
<%_ if (anyFieldIsBlobDerived) { _%>
  let dataUtils: DataUtils;
<%_ } _%>

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      imports: [<%= entityAngularName %>DetailComponent],
      providers: [
        provideRouter(
          [
            {
              path: '**',
              loadComponent: () => import('./<%= entityFileName %>-detail.component').then(m => m.<%= entityAngularName %>DetailComponent),
              resolve: { <%= entityInstance %>: () => of(<%- testEntity %>) },
            },
          ],
          withComponentInputBinding()
        ),
      ],
    })
      .overrideTemplate(<%= entityAngularName %>DetailComponent, '')
      .compileComponents();
<%_ if (anyFieldIsBlobDerived) { _%>
    dataUtils = TestBed.inject(DataUtils);
    jest.spyOn(window, 'open').mockImplementation(() => null);
<%_ } _%>
  });

  beforeEach(() => {
    fixture = TestBed.createComponent(<%= entityAngularName %>DetailComponent);
    comp = fixture.componentInstance;
  });

  describe('OnInit', () => {
    it('Should load <%= entityInstance %> on init', async () => {
      const harness = await RouterTestingHarness.create();
      const instance = await harness.navigateByUrl('/', <%= entityAngularName %>DetailComponent);

      // THEN
      expect(instance.<%= entityInstance %>()).toEqual(expect.objectContaining(<%- testEntity %>));
    });
  });

  describe('PreviousState', () => {
    it('Should navigate to previous state', () => {
      jest.spyOn(window.history, 'back');
      comp.previousState();
      expect(window.history.back).toHaveBeenCalled();
    });
  });

<%_ if (anyFieldIsBlobDerived) { _%>
  describe('byteSize', () => {
    it('Should call byteSize from DataUtils', () => {
      // GIVEN
      jest.spyOn(dataUtils, 'byteSize');
      const fakeBase64 = 'fake base64';

      // WHEN
      comp.byteSize(fakeBase64);

      // THEN
      expect(dataUtils.byteSize).toHaveBeenCalledWith(fakeBase64);
    });
  });

  describe('openFile', () => {
    it('Should call openFile from DataUtils', () => {
      const newWindow = { ...window };
      newWindow.document.write = jest.fn();
      window.open = jest.fn(() => newWindow);
      window.onload = jest.fn(() => newWindow) as any;
      window.URL.createObjectURL = jest.fn() as any;
      // GIVEN
      jest.spyOn(dataUtils, 'openFile');
      const fakeContentType = 'fake content type';
      const fakeBase64 = 'fake base64';

      // WHEN
      comp.openFile(fakeBase64, fakeContentType);

      // THEN
      expect(dataUtils.openFile).toHaveBeenCalledWith(fakeBase64, fakeContentType);
    });
  });
<%_ } _%>
});

<%#
 Copyright 2013-2023 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<div class="d-flex justify-content-center">
    <div class="col-8">
        <form name="editForm" role="form" novalidate (ngSubmit)="save()" [formGroup]="editForm">
            <h2 id="<%= jhiPrefixDashed %>-<%= entityFileName %>-heading" data-cy="<%= entityClass %>CreateUpdateHeading" <%= jhiPrefix %>Translate="<%= i18nKeyPrefix %>.home.createOrEditLabel"><%- getWebappTranslation(i18nKeyPrefix + '.home.createOrEditLabel') %></h2>

            <div>
                <<%= jhiPrefixDashed %>-alert-error></<%= jhiPrefixDashed %>-alert-error>
<%_ for (const field of fields.filter(field => !field.hidden)) {
  const fieldName = field.fieldName;
  const fieldNameHumanized = field.fieldNameHumanized;
  const fieldType = field.fieldType;
  const fieldTypeBlobContent = field.fieldTypeBlobContent;
  const readonly = field.readonly;
  let fieldInputType = 'text';
  const translationKey = field.fieldTranslationKey;
  if (field.fieldTypeNumeric) {
    fieldInputType = 'number';
  } else if (field.fieldTypeLocalDate) {
    fieldInputType = 'date';
  } else if (field.fieldTypeTimed) {
    fieldInputType = 'datetime-local';
  } else if (field.fieldTypeBoolean) {
    fieldInputType = 'checkbox';
  } else if (field.fieldTypeBinary && !field.blobContentTypeText) {
    fieldInputType = 'hidden';
  }
_%>

                <div class="mb-3"<% if (field.autoGenerate) { %> *ngIf="editForm.controls.<%= field.fieldName %>.value !== null"<% } %>>
                    <label class="form-label" <%= jhiPrefix %>Translate="<%= translationKey %>" for="field_<%= fieldName %>"<% if (field.javadoc) { if (enableTranslation) { %> [ngbTooltip]="'<%= i18nKeyPrefix %>.help.<%= fieldName %>' | translate"<% } else { %> ngbTooltip="<%= field.javadoc %>"<% } } %>><%= fieldNameHumanized %></label>
  <%_ if (field.fieldIsEnum) { _%>
                    <select class="form-control" name="<%= fieldName %>" formControlName="<%= fieldName %>" id="field_<%= fieldName %>" data-cy="<%= fieldName %>">
    <%_ const enumPrefix = frontendAppName + '.'+ fieldType; _%>
                        <option [ngValue]="null"><% if (enableTranslation) { %>{{ '<%= enumPrefix %>.null' | translate }}<% } %></option>
                        <option *ngFor="let <%= this._.lowerFirst(fieldType) %> of <%- this._.lowerFirst(fieldType) %>Values" [value]="<%= this._.lowerFirst(fieldType) %>"><% if (enableTranslation) { %>{{ '<%= enumPrefix %>.' + <%= this._.lowerFirst(fieldType) %> | translate }}<% } else { %> {{ <%= this._.lowerFirst(fieldType) %> }} <% } %></option>
                    </select>
  <%_ } else { _%>
    <%_ if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
                    <div>
      <%_ if (field.blobContentTypeImage) { _%>
                        <img [src]="'data:' + editForm.get('<%= fieldName %>ContentType')!.value + ';base64,' + editForm.get('<%= fieldName %>')!.value" style="max-height: 100px;" *ngIf="editForm.get('<%= fieldName %>')!.value" alt="<%= entityInstance %> image"/>
      <%_ } _%>
                        <div *ngIf="editForm.get('<%= fieldName %>')!.value" class="form-text text-danger clearfix">
      <%_ if (field.blobContentTypeAny) { _%>
                            <a class="pull-start" (click)="openFile(editForm.get('<%= fieldName %>')!.value!, editForm.get('<%= fieldName %>ContentType')!.value!)" <%= jhiPrefix %>Translate="entity.action.open"><%- getWebappTranslation('entity.action.open') %></a><br>
                            <span class="pull-start">{{ editForm.get('<%= fieldName %>ContentType')!.value }}, {{ byteSize(editForm.get('<%= fieldName %>')!.value!) }}</span>
      <%_ } else { _%>
                            <span class="pull-start">{{ editForm.get('<%= fieldName %>ContentType')!.value }}, {{ byteSize(editForm.get('<%= fieldName %>')!.value!) }}</span>
      <%_ } _%>
      <%_ if (field.blobContentTypeImage) { _%>
                            <button type="button" (click)="clearInputImage('<%= fieldName %>', '<%= fieldName %>ContentType', 'file_<%= fieldName %>')" class="btn btn-secondary btn-xs pull-end">
      <%_ } else { _%>
                            <button type="button" (click)="editForm.patchValue({ <%= fieldName %>: undefined, <%= fieldName %>ContentType: undefined });"
                                    class="btn btn-secondary btn-xs pull-end">
      <%_ } _%>
                                  <fa-icon icon="times"></fa-icon>
                            </button>
                        </div>
                        <input type="file" id="file_<%= fieldName %>" data-cy="<%= fieldName %>" (change)="setFileData($event, '<%= fieldName %>', <% if (fieldTypeBlobContent === 'image') { %>true)" accept="image/*"<% if (enableTranslation) { %> <%= jhiPrefix %>Translate="entity.action.addimage"<% } %><% } else { %>false)"<% if (enableTranslation) { %> <%= jhiPrefix %>Translate="entity.action.addblob"<% } %><% } %>/>
                    </div>
    <%_ } _%>
    <%_ if (field.fieldTypeLocalDate) { _%>
                    <div class="input-group">
                        <input id="field_<%= fieldName %>" data-cy="<%= fieldName %>" type="text" class="form-control" name="<%= fieldName %>" ngbDatepicker #<%= fieldName %>Dp="ngbDatepicker" formControlName="<%= fieldName %>"<% if (readonly) { %> [readonly]="true"<% } %>/>
                        <button type="button" class="btn btn-secondary" (click)="<%= fieldName %>Dp.toggle()"><fa-icon icon="calendar-alt"></fa-icon></button>
                    </div>
    <%_ } else if (field.fieldTypeTimed) { _%>
                    <div class="d-flex">
                        <input id="field_<%= fieldName %>" data-cy="<%= fieldName %>" type="<%= fieldInputType %>" class="form-control" name="<%= fieldName %>" formControlName="<%= fieldName %>" placeholder="YYYY-MM-DD HH:mm"<% if (readonly) { %> [readonly]="true"<% } %>/>
                    </div>
    <%_ } else if (field.blobContentTypeText) { _%>
                    <textarea class="form-control" name="<%= fieldName %>" id="field_<%= fieldName %>" data-cy="<%= fieldName %>"
                              formControlName="<%= fieldName %>"<% if (readonly) { %> [readonly]="true"<% } %>></textarea>
    <%_ } else if (field.fieldTypeBoolean) { _%>
                    <input type="<%= fieldInputType %>" class="form-check" name="<%= fieldName %>" id="field_<%= fieldName %>"
                           data-cy="<%= fieldName %>" formControlName="<%= fieldName %>" <% if (readonly) { %> [readonly]="true"<% } %>/>
    <%_ } else { _%>
                    <input type="<%= fieldInputType %>" class="form-control" name="<%= fieldName %>" id="field_<%= fieldName %>" data-cy="<%= fieldName %>"
                           formControlName="<%= fieldName %>"<% if (field.id && !field.autoGenerate) { %> [readonly]="editForm.get('<%= primaryKey.name %>')!.value != null"<% } else if (readonly) { %> [readonly]="true"<% } %>/>
      <%_ if (field.fieldTypeBinary && !field.blobContentTypeText) { _%>
                    <input type="hidden" class="form-control" name="<%= fieldName %>ContentType" id="field_<%= fieldName %>ContentType"
                           formControlName="<%= fieldName %>ContentType" />
      <%_ } _%>
    <%_ } _%>
  <%_ } _%>
  <%_ if (field.fieldValidate) { _%>
                    <div *ngIf="editForm.get('<%= fieldName %>')!.invalid && (editForm.get('<%= fieldName %>')!.dirty || editForm.get('<%= fieldName %>')!.touched)">
    <%_ if (field.fieldValidationRequired) { _%>
                        <small class="form-text text-danger"
                               *ngIf="editForm.get('<%= fieldName %>')?.errors?.required" <%= jhiPrefix %>Translate="entity.validation.required">
                        <%- getWebappTranslation('entity.validation.required') %>
                        </small>
    <%_ } _%>
    <%_ if (field.fieldValidationMinLength) { _%>
                        <small class="form-text text-danger"
                               *ngIf="editForm.get('<%= fieldName %>')?.errors?.minlength" <%= jhiPrefix %>Translate="entity.validation.minlength" [translateValues]="{ min: <%= field.fieldValidateRulesMinlength %> }">
                        <%- getWebappTranslation('entity.validation.minlength', { min: field.fieldValidateRulesMinlength }) %>
                        </small>
    <%_ } _%>
    <%_ if (field.fieldValidationMaxLength) { _%>
                        <small class="form-text text-danger"
                               *ngIf="editForm.get('<%= fieldName %>')?.errors?.maxlength" <%= jhiPrefix %>Translate="entity.validation.maxlength" [translateValues]="{ max: <%= field.fieldValidateRulesMaxlength %> }">
                        <%- getWebappTranslation('entity.validation.maxlength', { max: field.fieldValidateRulesMaxlength }) %>
                        </small>
    <%_ } _%>
    <%_ if (field.fieldValidationMin) { _%>
                        <small class="form-text text-danger"
                               *ngIf="editForm.get('<%= fieldName %>')?.errors?.min" <%= jhiPrefix %>Translate="entity.validation.min" [translateValues]="{ min: <%= field.fieldValidateRulesMin %> }">
                            <%- getWebappTranslation('entity.validation.min', { min: field.fieldValidateRulesMin }) %>
                        </small>
    <%_ } _%>
    <%_ if (field.fieldValidationMax) { _%>
                        <small class="form-text text-danger"
                               *ngIf="editForm.get('<%= fieldName %>')?.errors?.max" <%= jhiPrefix %>Translate="entity.validation.max" [translateValues]="{ max: <%= field.fieldValidateRulesMax %> }">
                            <%- getWebappTranslation('entity.validation.max', { max: field.fieldValidateRulesMax }) %>
                        </small>
    <%_ } _%>
    <%_ if (field.fieldValidationPattern) { _%>
                        <small class="form-text text-danger"
                               *ngIf="editForm.get('<%= fieldName %>')?.errors?.pattern" <%= jhiPrefix %>Translate="entity.validation.pattern" [translateValues]="{ pattern: '<%= fieldNameHumanized %>' }">
                            <%- getWebappTranslation('entity.validation.pattern', { pattern: fieldNameHumanized }) %>
                        </small>
    <%_ } _%>
    <%_ if (field.fieldTypeNumeric || field.fieldTypeDuration) { _%>
                        <small class="form-text text-danger"
                            [hidden]="!editForm.get('<%= fieldName %>')?.errors?.number" <%= jhiPrefix %>Translate="entity.validation.number">
                            <%- getWebappTranslation('entity.validation.number') %>
                        </small>
    <%_ } _%>
    <%_ if (field.fieldTypeTimed) { _%>
                        <small class="form-text text-danger"
                            [hidden]="!editForm.get('<%= fieldName %>')?.errors?.datetimelocal" <%= jhiPrefix %>Translate="entity.validation.datetimelocal">
                            <%- getWebappTranslation('entity.validation.datetimelocal') %>
                        </small>
    <%_ } _%>
                    </div>
  <%_ } _%>
                </div>
<%_ } _%>
<%_ for (const relationship of relationships.filter(rel => rel.otherEntity.primaryKey)) {
  const { otherEntity, ownerSide, relationshipName, propertyName, otherEntityField, relationshipRequired } = relationship;
  const otherEntityName = relationship.otherEntityName;
  const relationshipFieldName = relationship.relationshipFieldName;
  const relationshipFieldNamePlural = relationship.relationshipFieldNamePlural;
  const translationKey = `${i18nKeyPrefix}.${relationshipName}`;
_%>
  <%_ if (relationship.relationshipManyToOne || (relationship.relationshipOneToOne && ownerSide)) { _%>

                <div class="mb-3">
                    <label class="form-label" <%= jhiPrefix %>Translate="<%= translationKey %>" for="field_<%= relationshipName %>"><%- getWebappTranslation(translationKey) %></label>
                    <select class="form-control" id="field_<%= relationshipName %>" data-cy="<%= propertyName %>" name="<%= relationshipName %>" formControlName="<%= propertyName %>" [compareWith]="compare<%= otherEntity.entityAngularName %>">
    <%_ if (!relationshipRequired) { _%>
                        <option [ngValue]="null"></option>
    <%_ } else if (!relationship.otherRelationship) { _%>
                        <option *ngIf="!editForm.get('<%= relationshipName %>')!.value" [ngValue]="null" selected></option>
    <%_ } else { _%>
                        <option *ngIf="editForm.get([<%- this.buildAngularFormPath(relationship.reference) %>])!.value == null" [ngValue]="null" selected></option>
    <%_ } _%>
                        <option [ngValue]="<%= otherEntityName %>Option" *ngFor="let <%= otherEntityName %>Option of <% if (!relationship.otherRelationship || relationship.relationshipManyToOne) { %><%= otherEntity.entityInstancePlural %>Shared<% } else { %><%= relationshipFieldNamePlural %><% } %>Collection">{{ <%= otherEntityName %>Option.<%= otherEntityField %> }}</option>
                    </select>
                </div>
  <%_ } else if (relationship.relationshipManyToMany && ownerSide) { _%>

                <div class="mb-3">
                    <label <%= jhiPrefix %>Translate="<%= translationKey %>" for="field_<%= relationshipFieldNamePlural %>"><%- getWebappTranslation(translationKey) %></label>
                    <select class="form-control" id="field_<%= relationshipFieldNamePlural %>" data-cy="<%= relationshipFieldName %>" multiple name="<%= propertyName %>" formControlName="<%= propertyName %>" [compareWith]="compare<%= otherEntity.entityAngularName %>">
                        <option [ngValue]="<%= otherEntityName %>Option" *ngFor="let <%= otherEntityName %>Option of <%= otherEntity.entityInstancePlural %>SharedCollection">{{ <%= otherEntityName %>Option.<%= otherEntityField %> }}</option>
                    </select>
                </div>
  <%_ } _%>
  <%_ if (relationship.relationshipValidate && (relationship.relationshipManyToOne || ownerSide)) { _%>
                <div *ngIf="editForm.get([<%- this.buildAngularFormPath(relationship.reference) %>])!.invalid && (editForm.get([<%- this.buildAngularFormPath(relationship.reference) %>])!.dirty || editForm.get([<%- this.buildAngularFormPath(relationship.reference) %>])!.touched)">
    <%_ if (relationshipRequired) { _%>
                    <small class="form-text text-danger"
                           *ngIf="editForm.get([<%- this.buildAngularFormPath(relationship.reference) %>])?.errors?.required" <%= jhiPrefix %>Translate="entity.validation.required">
                        <%- getWebappTranslation('entity.validation.required') %>
                    </small>
    <%_ } _%>
                </div>
  <%_ } _%>
<%_ } _%>
            </div>

            <div>
                <button type="button" id="cancel-save" data-cy="entityCreateCancelButton" class="btn btn-secondary" (click)="previousState()">
                    <fa-icon icon="ban"></fa-icon>&nbsp;<span <%= jhiPrefix %>Translate="entity.action.cancel"><%- getWebappTranslation('entity.action.cancel') %></span>
                </button>

                <button type="submit" id="save-entity" data-cy="entityCreateSaveButton" [disabled]="editForm.invalid || isSaving" class="btn btn-primary">
                    <fa-icon icon="save"></fa-icon>&nbsp;<span <%= jhiPrefix %>Translate="entity.action.save"><%- getWebappTranslation('entity.action.save') %></span>
                </button>
            </div>
        </form>
    </div>
</div>

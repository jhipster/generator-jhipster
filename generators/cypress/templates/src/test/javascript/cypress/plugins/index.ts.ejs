<%#
 Copyright 2013-2022 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
// ***********************************************************
// This example plugins/index.js can be used to load plugins
//
// You can change the location of this file or turn off loading
// the plugins file with the 'pluginsFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/plugins-guide
// ***********************************************************

// This function is called when a project is opened or re-opened (e.g. due to
// the project's config changing)
import fs = require('fs');
import { lighthouse, pa11y, prepareAudit } from 'cypress-audit';
import ReportGenerator = require('lighthouse/report/generator/report-generator');
/**
 * @type {Cypress.PluginConfig}
 */
module.exports = async (on<% if (cypressCoverage) { %>, config<% } %>) => {
  // `on` is used to hook into various events Cypress emits
<%_ if (cypressCoverage) { _%>
  // `config` is the resolved Cypress config
<%_ } _%>
  on('before:browser:launch', (browser, launchOptions) => {
    prepareAudit(launchOptions);
    if (browser.name === 'chrome' && browser.isHeadless) {
      launchOptions.args.push('--disable-gpu');
      return launchOptions;
    }
  });

  on('task', {
    lighthouse: lighthouse((lighthouseReport) => {
      !fs.existsSync('<%= BUILD_DIR %>cypress') && fs.mkdirSync('<%= BUILD_DIR %>cypress', { recursive: true });
      fs.writeFileSync('<%= BUILD_DIR %>cypress/lhreport.html', ReportGenerator.generateReport(lighthouseReport.lhr, 'html'));
    }),
    pa11y: pa11y(),
  });
<%_ if (cypressCoverage) { _%>
  const coverageTask = await import('@cypress/code-coverage/task.js');
  coverageTask(on, config);
  return config;
<%_ } _%>
}

<%#
 Copyright 2013-2021 the original author or authors from the JHipster project.

 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

      https://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
// ***********************************************************
// This example plugins/index.js can be used to load plugins
//
// You can change the location of this file or turn off loading
// the plugins file with the 'pluginsFile' configuration option.
//
// You can read more here:
// https://on.cypress.io/plugins-guide
// ***********************************************************

// This function is called when a project is opened or re-opened (e.g. due to
// the project's config changing)
import fs = require('fs');;
import { lighthouse, pa11y, prepareAudit } from 'cypress-audit';
import ReportGenerator = require('lighthouse/lighthouse-core/report/report-generator');
<%_ if (authenticationTypeOauth2) { _%>
import puppeteer = require('puppeteer');
<%_ } _%>
/**
 * @type {Cypress.PluginConfig}
 */
module.exports = (on, config) => {
  // `on` is used to hook into various events Cypress emits
  // `config` is the resolved Cypress config
  on('before:browser:launch', (browser, launchOptions) => {
    prepareAudit(launchOptions);
    if (browser.name === 'chrome' && browser.isHeadless) {
      launchOptions.args.push('--disable-gpu');
      return launchOptions
    }
  });

  on('task', {
    lighthouse: lighthouse((lighthouseReport) => {
      !fs.existsSync('<%= BUILD_DIR %>cypress') && fs.mkdirSync('<%= BUILD_DIR %>cypress', { recursive: true }); 
      fs.writeFileSync('<%= BUILD_DIR %>cypress/lhreport.html', ReportGenerator.generateReport(lighthouseReport.lhr, 'html')); 
    }),
    pa11y: pa11y(),
<%_ if (authenticationTypeOauth2) { _%>
    login({ baseUrl, username, password }) {
      return (async () => {
        const browser = await puppeteer.launch({
          args: ['--no-sandbox', '--disable-setuid-sandbox'],
          devtools: false,
          ignoreHTTPSErrors: true,
          headless: true });
        const page = await browser.newPage();
        await page.goto(`${baseUrl}oauth2/authorization/oidc`, { // The app redirects to the login-page
          waitUntil: 'networkidle2' // Wait until login-page has been reached
        });
        await page.waitForSelector('[name="username"]');
        await page.waitForSelector('[name="password"]');
        await page.waitForSelector('input[type="submit"]');
        await page.type('[name="username"]', username);
        await page.type('[name="password"]', password);
        await page.click('input[type="submit"]');
        await page.waitForNavigation({ waitUntil: 'networkidle2' }); // Wait until redirected back to the app
        const authCookies = await page.cookies();
        browser.close();
        return authCookies;
      })();
    },
    logout(baseUrl) {
      return (async () => {
        const browser = await puppeteer.launch({ ignoreHTTPSErrors: true });
        const page = await browser.newPage();
        await page.goto(`${baseUrl}api/logout`, {
          waitUntil: 'networkidle2'
        });
        return true;
      })
    } 
<%_ } _%>
  });
<%_ if (cypressCoverage) { _%>
    require('@cypress/code-coverage/task')(on, config);
    return config;
<%_ } _%>
}

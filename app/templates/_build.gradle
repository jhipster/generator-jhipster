buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.2.2.RELEASE')
        classpath('com.moowork.gradle:gradle-node-plugin:0.8')
        <% if(frontendBuilder == 'grunt') {%>
        classpath('com.moowork.gradle:gradle-grunt-plugin:0.6')
        <% }  if(frontendBuilder == 'gulp') {%>
  	    classpath('com.moowork.gradle:gradle-gulp-plugin:0.1')
        <% } %>
    }
}

apply plugin: 'java'
sourceCompatibility=1.<%= javaVersion %>
targetCompatibility=1.<%= javaVersion %>
apply plugin: 'maven'
apply plugin: 'spring-boot'
apply plugin: 'war'

bootRepackage {
   mainClass = '<%= packageName %>.Application'
}

springBoot {
    mainClass = '<%= packageName %>.Application'
}

bootRun {
    addResources = false
}

apply from: 'yeoman.gradle'

<% if (databaseType == 'sql') { %>
apply from: 'liquibase.gradle'
<% } %>
apply from: 'gatling.gradle'

if (project.hasProperty('prod')) {
    profile = 'prod'
} else if (project.hasProperty('fast')) {
    profile = 'fast'
}

if (profile == 'prod') {
    apply from: 'profile_prod.gradle'
} else if (profile == 'fast') {
    apply from: 'profile_fast.gradle'
} else {
    apply from: 'profile_dev.gradle'
}

group = '<%= packageName %>'
version = '0.1-SNAPSHOT'

description = ''

configurations {
    providedRuntime
}

war {
    baseName = '<%= _.slugify(baseName) %>'
    version =  '0.1-SNAPSHOT'
}

repositories {
    maven { url 'http://repo.spring.io/milestone' }
    maven { url 'http://repo.spring.io/snapshot' }
    maven { url 'https://repository.jboss.org/nexus/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/releases' }
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots' }
    maven { url 'http://repo.maven.apache.org/maven2' }
}

dependencies {
    compile group: 'com.codahale.metrics', name: 'metrics-core', version: codahale_metrics_version<% if (hibernateCache == 'ehcache') { %>
    compile group: 'com.codahale.metrics', name: 'metrics-ehcache', version: codahale_metrics_version<% } %>
    compile group: 'com.codahale.metrics', name: 'metrics-graphite', version: codahale_metrics_version
    compile group: 'com.codahale.metrics', name: 'metrics-jvm', version: codahale_metrics_version
    compile group: 'com.codahale.metrics', name: 'metrics-servlet', version: codahale_metrics_version
    compile group: 'com.codahale.metrics', name: 'metrics-json', version: codahale_metrics_version
    compile(group: 'com.codahale.metrics', name: 'metrics-servlets', version: codahale_metrics_version) {
        exclude(module: 'metrics-healthchecks')
    }
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-json-org', version: jackson_version
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hppc', version: jackson_version
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-joda', version: jackson_version
    compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-hibernate4', version: jackson_version
    compile group: 'com.ryantenney.metrics', name: 'metrics-spring', version: metrics_spring_version<% if (hibernateCache == 'hazelcast') { %>
    compile group: 'com.hazelcast', name: 'hazelcast', version: hazelcast_version
    compile group: 'com.hazelcast', name: 'hazelcast-hibernate4', version: hazelcast_version
    compile group: 'com.hazelcast', name: 'hazelcast-spring', version: hazelcast_version<% } %><% if (clusteredHttpSession == 'hazelcast' && hibernateCache != 'hazelcast') { %>
    compile group: 'com.hazelcast', name: 'hazelcast', version: hazelcast_version<% } %><% if (clusteredHttpSession == 'hazelcast') { %>
    compile group: 'com.hazelcast', name: 'hazelcast-wm', version: hazelcast_version<% } %>
    compile(group: 'com.zaxxer', name: 'HikariCP<% if (javaVersion == '7') { %>-java6<% } %>', version: HikariCP_version) {
        exclude(module: 'tools')
    }
    compile group: 'commons-lang', name: 'commons-lang', version: commons_lang_version
    compile group: 'commons-io', name: 'commons-io', version: commons_io_version
    compile group: 'javax.inject', name: 'javax.inject', version: javax_inject_version
    compile group: 'javax.transaction', name: 'javax.transaction-api', version: javax_transaction_version
    compile group: 'joda-time', name: 'joda-time', version: joda_time_version<% if (databaseType == 'sql') { %>
    compile group: 'joda-time', name: 'joda-time-hibernate', version: joda_time_hibernate_version<% } %><% if (databaseType == 'cassandra') { %>
    compile group: 'net.jpountz.lz4', name: 'lz4', version: lz4_version<% } %>
    compile group: 'org.apache.geronimo.javamail', name: 'geronimo-javamail_1.4_mail', version: geronimo_javamail_1_4_mail_version<% if (databaseType == 'sql') { %>
    compile group: 'org.hibernate', name: 'hibernate-core', version: hibernate_entitymanager_version
    compile group: 'org.hibernate', name: 'hibernate-envers', version: hibernate_entitymanager_version<% } %><% if (hibernateCache == 'ehcache' && databaseType == 'sql') { %>
    compile group: 'org.hibernate', name: 'hibernate-ehcache', version: hibernate_entitymanager_version<% } %>
    compile group: 'org.hibernate', name: 'hibernate-validator', version: hibernate_validator_version<% if (databaseType == 'sql') { %>
    compile group: 'org.jadira.usertype', name: 'usertype.core', version: usertype_core_version
    compile (group: 'org.liquibase', name: 'liquibase-core', version: liquibase_core_version) {
        exclude(module: 'jetty-servlet')
    }
    compile group: 'com.mattbertolini', name: 'liquibase-slf4j', version: liquibase_slf4j_version<% } %>
    compile group: 'org.springframework.boot', name: 'spring-boot-actuator', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-autoconfigure', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-loader-tools', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-logging', version: spring_boot_version
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: spring_boot_version<% if (databaseType == 'sql') { %>
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa', version: spring_boot_version<% } %><% if (databaseType == 'mongodb') { %>
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-data-mongodb', version: spring_boot_version<% } %>
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security', version: spring_boot_version
    compile(group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: spring_boot_version) {
        exclude module: 'spring-boot-starter-tomcat'
    }<% if (websocket == 'spring-websocket') { %>
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-websocket', version: spring_boot_version<% } %>
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-thymeleaf', version: spring_boot_version<% if (databaseType == 'cassandra') { %>
    compile group: 'org.springframework.data', name: 'spring-data-cassandra', version: spring_data_cassandra_version
    compile group: 'org.apache.cassandra', name: 'cassandra-all', version: cassandra_version
    compile(group: 'com.datastax.cassandra', name: 'cassandra-driver-core', version: datastax_driver_version) {
        exclude module: 'com.codahale.metrics'
    }
    compile group: 'com.datastax.cassandra', name: 'cassandra-driver-mapping', version: datastax_driver_version<% } %>
    compile group: 'org.springframework.cloud', name: 'spring-cloud-cloudfoundry-connector', version: spring_cloud_version
    compile group: 'org.springframework.cloud', name: 'spring-cloud-spring-service-connector', version: spring_cloud_version
    compile group: 'org.springframework.cloud', name: 'spring-cloud-localconfig-connector', version: spring_cloud_version
    compile(group: 'org.springframework', name: 'spring-context-support') {
        exclude(module: 'quartz')
    }<% if (authenticationType == 'oauth2') { %>
    compile group: 'org.springframework.security.oauth', name: 'spring-security-oauth2', version: spring_security_oauth2_version<% } %><% if (databaseType == 'mongodb') { %>
    compile group: 'org.mongeez', name: 'mongeez', version: mongeez_version<% } %>
    compile(group: 'com.mangofactory', name: 'swagger-springmvc', version: swagger_springmvc_version) {
        exclude(module: 'jackson-module-scala_2.10')
        exclude(module: 'scalap')
        exclude(module: 'scala-compiler')
    }<% if (devDatabaseType == 'mysql' || prodDatabaseType == 'mysql') { %>
    compile group: 'mysql', name: 'mysql-connector-java', version: mysql_connector_java_version<% } %><% if (devDatabaseType == 'postgresql' || prodDatabaseType == 'postgresql') { %>
    compile group: 'org.postgresql', name: 'postgresql', version: postgresql_version<% } %><% if (devDatabaseType == 'h2Memory') { %>
    compile group: 'com.h2database', name: 'h2', version: h2_version<% } %>
    compile group: 'fr.ippon.spark.metrics', name: 'metrics-spark-reporter', version: metrics_spark_reporter_version
    testCompile group: 'com.jayway.awaitility', name: 'awaitility', version: awaility_version
    testCompile group: 'com.jayway.jsonpath', name: 'json-path', version: json_path_version<% if (databaseType == 'cassandra') { %>
    testCompile(group: 'org.cassandraunit', name: 'cassandra-unit-spring', version: cassandra_unit_spring_version) {
        exclude(module: 'org.slf4j')
    }<% } %>
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: spring_boot_version
    testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-jetty', version: spring_boot_version<% if (javaVersion == '8') { %>
    testCompile group: 'org.assertj', name: 'assertj-core-java8', version: assertj_core_version<% } %><% if (javaVersion == '7') { %>
    testCompile group: 'org.assertj', name: 'assertj-core', version: assertj_core_version<% } %>
    testCompile group: 'junit', name: 'junit', version:'4.11'
    testCompile group: 'org.mockito', name: 'mockito-core', version:'1.9.5'<% if (databaseType == 'sql') { %>
    testCompile group: 'com.mattbertolini', name: 'liquibase-slf4j', version: liquibase_slf4j_version<% } %><% if (databaseType == 'mongodb') { %>
    testCompile group: 'cz.jirutka.spring', name: 'embedmongo-spring', version: embedmongo_spring_version<% } %>
    testCompile group: 'org.hamcrest', name: 'hamcrest-library', version:'1.3'
    testCompile group: 'io.gatling.highcharts', name: 'gatling-charts-highcharts', version: gatling_version
}

import org.apache.tools.ant.filters.ReplaceTokens
processResources {
    filter ReplaceTokens, tokens: [
        "rootProject.name": project.properties["rootProject.name"],
        "version": project.properties["version"]
    ]
}
processTestResources {
    filter ReplaceTokens, tokens: [
        "rootProject.name": project.properties["rootProject.name"],
        "version": project.properties["version"]
    ]
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}
